
XMC4200_GC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007030  08000000  0c000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  1fffc000  1fffc000  0001c000  2**0
                  ALLOC
  2 .data         000001c0  1fffc800  0c007030  00014800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000021c  1fffc9c0  0c0071f0  000149c0  2**2
                  ALLOC
  4 .no_init      00000020  20005fc0  20005fc0  0001c000  2**2
                  ALLOC
  5 .debug_aranges 00001710  00000000  00000000  000149c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00020bf0  00000000  00000000  000160d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000045a4  00000000  00000000  00036cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000b050  00000000  00000000  0003b264  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000625c  00000000  00000000  000462b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000dc0e  00000000  00000000  0004c510  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c867  00000000  00000000  0005a11e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001460  00000000  00000000  00066985  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .build_attributes 00000a43  00000000  00000000  00067de5  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 c8 ff 1f 01 02 00 08 91 02 00 08 91 02 00 08     ................
 8000010:	91 02 00 08 91 02 00 08 91 02 00 08 00 00 00 00     ................
	...
 800002c:	61 30 00 08 91 02 00 08 00 00 00 00 a1 32 00 08     a0...........2..
 800003c:	11 33 00 08 91 02 00 08 bd 6a 00 08 91 02 00 08     .3.......j......
 800004c:	75 6a 00 08 8d 6a 00 08 a5 6a 00 08 91 02 00 08     uj...j...j......
 800005c:	91 02 00 08 91 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 91 02 00 08 00 00 00 00 91 02 00 08     ................
 800007c:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 800008c:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 800009c:	91 02 00 08 91 02 00 08 91 02 00 08 00 00 00 00     ................
	...
 80000e8:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 80000f8:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 8000108:	91 02 00 08 91 02 00 08 00 00 00 00 00 00 00 00     ................
	...
 8000130:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
	...
 8000150:	91 02 00 08 91 02 00 08 00 00 00 00 00 00 00 00     ................
 8000160:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 8000170:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 8000180:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 8000190:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 80001a0:	91 02 00 08 91 02 00 08 31 27 00 08 21 27 00 08     ........1'..!'..
 80001b0:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
	...
 80001d8:	91 02 00 08 00 00 00 00 91 02 00 08 91 02 00 08     ................
 80001e8:	00 00 00 00 91 02 00 08 00 00 00 00 00 00 00 00     ................
	...

08000200 <Reset_Handler>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000200:	f8df d06c 	ldr.w	sp, [pc, #108]	; 8000270 <__zero_table_end__>

	.align	1
    .thumb
 8000204:	481b      	ldr	r0, [pc, #108]	; (8000274 <__zero_table_end__+0x4>)

 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c1b      	ldr	r4, [pc, #108]	; (8000278 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d1c      	ldr	r5, [pc, #112]	; (800027c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b16      	ldr	r3, [pc, #88]	; (8000280 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c17      	ldr	r4, [pc, #92]	; (8000284 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4812      	ldr	r0, [pc, #72]	; (8000288 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4812      	ldr	r0, [pc, #72]	; (800028c <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c007030 	.word	0x0c007030
 800024c:	1fffc800 	.word	0x1fffc800
 8000250:	000001c0 	.word	0x000001c0
 8000254:	0c007030 	.word	0x0c007030
 8000258:	1fffc800 	.word	0x1fffc800
 800025c:	00000000 	.word	0x00000000

08000260 <__copy_table_end__>:
 8000260:	1fffc9c0 	.word	0x1fffc9c0
 8000264:	0000021c 	.word	0x0000021c
 8000268:	20000000 	.word	0x20000000
 800026c:	00000000 	.word	0x00000000

08000270 <__zero_table_end__>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000270:	1fffc800 	.word	0x1fffc800

	.align	1
    .thumb
 8000274:	08000305 	.word	0x08000305
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000278:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800027c:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000280:	08000260 	.word	0x08000260
	ldr	r4, =__zero_table_end__
 8000284:	08000270 	.word	0x08000270
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000288:	08006b4d 	.word	0x08006b4d
    blx  r0
#endif

    ldr  r0, =main
 800028c:	080067ad 	.word	0x080067ad

08000290 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000290:	e7fe      	b.n	8000290 <BusFault_Handler>
	...

08000294 <TLE94112EL_SetHBRegdata>:
#include "base.h"

void TLE94112EL_SetHBRegdata(const TLE94112EL_t *const handler, uint8_t TLE94112EL_HB_ACT_X_CTRL, uint8_t regdata)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
 800029c:	460b      	mov	r3, r1
 800029e:	70fb      	strb	r3, [r7, #3]
 80002a0:	4613      	mov	r3, r2
 80002a2:	70bb      	strb	r3, [r7, #2]
  uint8_t tx_data[2];
  uint8_t rx_data[2];
  uint8_t addr;

	switch(TLE94112EL_HB_ACT_X_CTRL){
 80002a4:	78fb      	ldrb	r3, [r7, #3]
 80002a6:	2b02      	cmp	r3, #2
 80002a8:	d006      	beq.n	80002b8 <TLE94112EL_SetHBRegdata+0x24>
 80002aa:	2b03      	cmp	r3, #3
 80002ac:	d007      	beq.n	80002be <TLE94112EL_SetHBRegdata+0x2a>
 80002ae:	2b01      	cmp	r3, #1
 80002b0:	d108      	bne.n	80002c4 <TLE94112EL_SetHBRegdata+0x30>

		case 1:
			addr = TLE94112EL_HB_ACT_1_CTRL;
 80002b2:	2303      	movs	r3, #3
 80002b4:	73fb      	strb	r3, [r7, #15]
			break;
 80002b6:	e005      	b.n	80002c4 <TLE94112EL_SetHBRegdata+0x30>

		case 2:
			addr = TLE94112EL_HB_ACT_2_CTRL;
 80002b8:	2343      	movs	r3, #67	; 0x43
 80002ba:	73fb      	strb	r3, [r7, #15]
			break;
 80002bc:	e002      	b.n	80002c4 <TLE94112EL_SetHBRegdata+0x30>

		case 3:
			addr = TLE94112EL_HB_ACT_3_CTRL;
 80002be:	2323      	movs	r3, #35	; 0x23
 80002c0:	73fb      	strb	r3, [r7, #15]
			break;
 80002c2:	bf00      	nop

	}

	  //write
	  tx_data[0] = addr | 0x80;
 80002c4:	7bfb      	ldrb	r3, [r7, #15]
 80002c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	733b      	strb	r3, [r7, #12]
	  tx_data[1] = regdata;
 80002ce:	78bb      	ldrb	r3, [r7, #2]
 80002d0:	737b      	strb	r3, [r7, #13]
	  handler->spi_transfer(tx_data, rx_data);
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	689b      	ldr	r3, [r3, #8]
 80002d6:	f107 010c 	add.w	r1, r7, #12
 80002da:	f107 0208 	add.w	r2, r7, #8
 80002de:	4608      	mov	r0, r1
 80002e0:	4611      	mov	r1, r2
 80002e2:	4798      	blx	r3
}
 80002e4:	3710      	adds	r7, #16
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop

080002ec <TLE94112EL_Enable>:

  return rx_data[0];
}

int32_t TLE94112EL_Enable(const TLE94112EL_t *const handler)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
  handler->enable();
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4798      	blx	r3
  return 0;
 80002fa:	2300      	movs	r3, #0
}
 80002fc:	4618      	mov	r0, r3
 80002fe:	3708      	adds	r7, #8
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}

08000304 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 8000304:	b598      	push	{r3, r4, r7, lr}
 8000306:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 8000308:	4a08      	ldr	r2, [pc, #32]	; (800032c <SystemInit+0x28>)
 800030a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800030e:	4614      	mov	r4, r2
 8000310:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000312:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  memcpy(g_hrpwm_char_data, HRPWM_CHARDATA_LOC, 12);
 8000316:	4b06      	ldr	r3, [pc, #24]	; (8000330 <SystemInit+0x2c>)
 8000318:	4a06      	ldr	r2, [pc, #24]	; (8000334 <SystemInit+0x30>)
 800031a:	ca07      	ldmia	r2, {r0, r1, r2}
 800031c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  SystemCoreSetup();
 8000320:	f005 fb9e 	bl	8005a60 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 8000324:	f005 fc06 	bl	8005b34 <SystemCoreClockSetup>
}
 8000328:	bd98      	pop	{r3, r4, r7, pc}
 800032a:	bf00      	nop
 800032c:	20005fc4 	.word	0x20005fc4
 8000330:	20005fd4 	.word	0x20005fd4
 8000334:	20000084 	.word	0x20000084

08000338 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b084      	sub	sp, #16
 800033c:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 800033e:	4b2f      	ldr	r3, [pc, #188]	; (80003fc <SystemCoreClockUpdate+0xc4>)
 8000340:	68db      	ldr	r3, [r3, #12]
 8000342:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000346:	2b00      	cmp	r3, #0
 8000348:	d03e      	beq.n	80003c8 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 800034a:	4b2d      	ldr	r3, [pc, #180]	; (8000400 <SystemCoreClockUpdate+0xc8>)
 800034c:	68db      	ldr	r3, [r3, #12]
 800034e:	f003 0301 	and.w	r3, r3, #1
 8000352:	2b00      	cmp	r3, #0
 8000354:	d002      	beq.n	800035c <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 8000356:	4b2b      	ldr	r3, [pc, #172]	; (8000404 <SystemCoreClockUpdate+0xcc>)
 8000358:	60fb      	str	r3, [r7, #12]
 800035a:	e002      	b.n	8000362 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 800035c:	f005 fbe0 	bl	8005b20 <OSCHP_GetFrequency>
 8000360:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 8000362:	4b27      	ldr	r3, [pc, #156]	; (8000400 <SystemCoreClockUpdate+0xc8>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	f003 0304 	and.w	r3, r3, #4
 800036a:	2b00      	cmp	r3, #0
 800036c:	d020      	beq.n	80003b0 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 800036e:	4b24      	ldr	r3, [pc, #144]	; (8000400 <SystemCoreClockUpdate+0xc8>)
 8000370:	689b      	ldr	r3, [r3, #8]
 8000372:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000376:	0e1b      	lsrs	r3, r3, #24
 8000378:	3301      	adds	r3, #1
 800037a:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 800037c:	4b20      	ldr	r3, [pc, #128]	; (8000400 <SystemCoreClockUpdate+0xc8>)
 800037e:	689b      	ldr	r3, [r3, #8]
 8000380:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000384:	0a1b      	lsrs	r3, r3, #8
 8000386:	3301      	adds	r3, #1
 8000388:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 800038a:	4b1d      	ldr	r3, [pc, #116]	; (8000400 <SystemCoreClockUpdate+0xc8>)
 800038c:	689b      	ldr	r3, [r3, #8]
 800038e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000392:	0c1b      	lsrs	r3, r3, #16
 8000394:	3301      	adds	r3, #1
 8000396:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000398:	68bb      	ldr	r3, [r7, #8]
 800039a:	683a      	ldr	r2, [r7, #0]
 800039c:	fb02 f303 	mul.w	r3, r2, r3
 80003a0:	68fa      	ldr	r2, [r7, #12]
 80003a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80003a6:	687a      	ldr	r2, [r7, #4]
 80003a8:	fb02 f303 	mul.w	r3, r2, r3
 80003ac:	60fb      	str	r3, [r7, #12]
 80003ae:	e00d      	b.n	80003cc <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 80003b0:	4b13      	ldr	r3, [pc, #76]	; (8000400 <SystemCoreClockUpdate+0xc8>)
 80003b2:	689b      	ldr	r3, [r3, #8]
 80003b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80003b8:	3301      	adds	r3, #1
 80003ba:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 80003bc:	68fa      	ldr	r2, [r7, #12]
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80003c4:	60fb      	str	r3, [r7, #12]
 80003c6:	e001      	b.n	80003cc <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 80003c8:	4b0e      	ldr	r3, [pc, #56]	; (8000404 <SystemCoreClockUpdate+0xcc>)
 80003ca:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 80003cc:	4b0b      	ldr	r3, [pc, #44]	; (80003fc <SystemCoreClockUpdate+0xc4>)
 80003ce:	68db      	ldr	r3, [r3, #12]
 80003d0:	b2db      	uxtb	r3, r3
 80003d2:	3301      	adds	r3, #1
 80003d4:	68fa      	ldr	r2, [r7, #12]
 80003d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80003da:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 80003dc:	4b07      	ldr	r3, [pc, #28]	; (80003fc <SystemCoreClockUpdate+0xc4>)
 80003de:	691b      	ldr	r3, [r3, #16]
 80003e0:	f003 0301 	and.w	r3, r3, #1
 80003e4:	3301      	adds	r3, #1
 80003e6:	68fa      	ldr	r2, [r7, #12]
 80003e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80003ec:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 80003ee:	4a06      	ldr	r2, [pc, #24]	; (8000408 <SystemCoreClockUpdate+0xd0>)
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	6013      	str	r3, [r2, #0]
}
 80003f4:	3710      	adds	r7, #16
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	50004600 	.word	0x50004600
 8000400:	50004710 	.word	0x50004710
 8000404:	016e3600 	.word	0x016e3600
 8000408:	20005fc0 	.word	0x20005fc0

0800040c <XMC_ERU_Enable>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* Enable the clock and De-assert the ERU module from the reset state. */
void XMC_ERU_Enable(XMC_ERU_t *const eru)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
#if defined(XMC_ERU1)
  if (eru == XMC_ERU1)
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	4a07      	ldr	r2, [pc, #28]	; (8000434 <XMC_ERU_Enable+0x28>)
 8000418:	4293      	cmp	r3, r2
 800041a:	d107      	bne.n	800042c <XMC_ERU_Enable+0x20>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_ERU1);
 800041c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000420:	f000 fae4 	bl	80009ec <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_ERU1);
 8000424:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000428:	f000 f970 	bl	800070c <XMC_SCU_RESET_DeassertPeripheralReset>
  }
#else
  XMC_UNUSED_ARG(eru);
  #endif
}
 800042c:	3708      	adds	r7, #8
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	40044000 	.word	0x40044000

08000438 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8000438:	b480      	push	{r7}
 800043a:	b085      	sub	sp, #20
 800043c:	af00      	add	r7, sp, #0
 800043e:	60f8      	str	r0, [r7, #12]
 8000440:	460b      	mov	r3, r1
 8000442:	607a      	str	r2, [r7, #4]
 8000444:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 8000446:	7afb      	ldrb	r3, [r7, #11]
 8000448:	089b      	lsrs	r3, r3, #2
 800044a:	b2db      	uxtb	r3, r3
 800044c:	4618      	mov	r0, r3
 800044e:	7afb      	ldrb	r3, [r7, #11]
 8000450:	089b      	lsrs	r3, r3, #2
 8000452:	b2db      	uxtb	r3, r3
 8000454:	461a      	mov	r2, r3
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	3204      	adds	r2, #4
 800045a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800045e:	7afb      	ldrb	r3, [r7, #11]
 8000460:	f003 0303 	and.w	r3, r3, #3
 8000464:	00db      	lsls	r3, r3, #3
 8000466:	4619      	mov	r1, r3
 8000468:	23f8      	movs	r3, #248	; 0xf8
 800046a:	408b      	lsls	r3, r1
 800046c:	43db      	mvns	r3, r3
 800046e:	ea02 0103 	and.w	r1, r2, r3
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	1d02      	adds	r2, r0, #4
 8000476:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800047e:	7afb      	ldrb	r3, [r7, #11]
 8000480:	005b      	lsls	r3, r3, #1
 8000482:	4619      	mov	r1, r3
 8000484:	2303      	movs	r3, #3
 8000486:	408b      	lsls	r3, r1
 8000488:	43db      	mvns	r3, r3
 800048a:	401a      	ands	r2, r3
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	4a38      	ldr	r2, [pc, #224]	; (8000574 <XMC_GPIO_Init+0x13c>)
 8000494:	4293      	cmp	r3, r2
 8000496:	d10a      	bne.n	80004ae <XMC_GPIO_Init+0x76>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800049c:	7afb      	ldrb	r3, [r7, #11]
 800049e:	2101      	movs	r1, #1
 80004a0:	fa01 f303 	lsl.w	r3, r1, r3
 80004a4:	43db      	mvns	r3, r3
 80004a6:	401a      	ands	r2, r3
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	661a      	str	r2, [r3, #96]	; 0x60
 80004ac:	e042      	b.n	8000534 <XMC_GPIO_Init+0xfc>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	b2db      	uxtb	r3, r3
 80004b4:	b25b      	sxtb	r3, r3
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	da3c      	bge.n	8000534 <XMC_GPIO_Init+0xfc>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	685a      	ldr	r2, [r3, #4]
 80004be:	7afb      	ldrb	r3, [r7, #11]
 80004c0:	409a      	lsls	r2, r3
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 80004c6:	7afb      	ldrb	r3, [r7, #11]
 80004c8:	08db      	lsrs	r3, r3, #3
 80004ca:	b2db      	uxtb	r3, r3
 80004cc:	4618      	mov	r0, r3
 80004ce:	7afb      	ldrb	r3, [r7, #11]
 80004d0:	08db      	lsrs	r3, r3, #3
 80004d2:	b2db      	uxtb	r3, r3
 80004d4:	461a      	mov	r2, r3
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	3210      	adds	r2, #16
 80004da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004de:	7afb      	ldrb	r3, [r7, #11]
 80004e0:	f003 0307 	and.w	r3, r3, #7
 80004e4:	009b      	lsls	r3, r3, #2
 80004e6:	4619      	mov	r1, r3
 80004e8:	2307      	movs	r3, #7
 80004ea:	408b      	lsls	r3, r1
 80004ec:	43db      	mvns	r3, r3
 80004ee:	ea02 0103 	and.w	r1, r2, r3
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	f100 0210 	add.w	r2, r0, #16
 80004f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 80004fc:	7afb      	ldrb	r3, [r7, #11]
 80004fe:	08db      	lsrs	r3, r3, #3
 8000500:	b2db      	uxtb	r3, r3
 8000502:	4618      	mov	r0, r3
 8000504:	7afb      	ldrb	r3, [r7, #11]
 8000506:	08db      	lsrs	r3, r3, #3
 8000508:	b2db      	uxtb	r3, r3
 800050a:	461a      	mov	r2, r3
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	3210      	adds	r2, #16
 8000510:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	7a1b      	ldrb	r3, [r3, #8]
 8000518:	4619      	mov	r1, r3
 800051a:	7afb      	ldrb	r3, [r7, #11]
 800051c:	f003 0307 	and.w	r3, r3, #7
 8000520:	009b      	lsls	r3, r3, #2
 8000522:	fa01 f303 	lsl.w	r3, r1, r3
 8000526:	ea42 0103 	orr.w	r1, r2, r3
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	f100 0210 	add.w	r2, r0, #16
 8000530:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000534:	7afb      	ldrb	r3, [r7, #11]
 8000536:	089b      	lsrs	r3, r3, #2
 8000538:	b2db      	uxtb	r3, r3
 800053a:	4618      	mov	r0, r3
 800053c:	7afb      	ldrb	r3, [r7, #11]
 800053e:	089b      	lsrs	r3, r3, #2
 8000540:	b2db      	uxtb	r3, r3
 8000542:	461a      	mov	r2, r3
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	3204      	adds	r2, #4
 8000548:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	4619      	mov	r1, r3
 8000552:	7afb      	ldrb	r3, [r7, #11]
 8000554:	f003 0303 	and.w	r3, r3, #3
 8000558:	00db      	lsls	r3, r3, #3
 800055a:	fa01 f303 	lsl.w	r3, r1, r3
 800055e:	ea42 0103 	orr.w	r1, r2, r3
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	1d02      	adds	r2, r0, #4
 8000566:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800056a:	3714      	adds	r7, #20
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr
 8000574:	48028e00 	.word	0x48028e00

08000578 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800057c:	4b03      	ldr	r3, [pc, #12]	; (800058c <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 800057e:	681b      	ldr	r3, [r3, #0]
}
 8000580:	4618      	mov	r0, r3
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20005fc0 	.word	0x20005fc0

08000590 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  return(SCU_GENERAL->MIRRSTS);
 8000594:	4b03      	ldr	r3, [pc, #12]	; (80005a4 <XMC_SCU_GetMirrorStatus+0x14>)
 8000596:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 800059a:	4618      	mov	r0, r3
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	50004000 	.word	0x50004000

080005a8 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 80005b0:	f7ff fec2 	bl	8000338 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 80005b4:	4b0b      	ldr	r3, [pc, #44]	; (80005e4 <XMC_SCU_lDelay+0x3c>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a0b      	ldr	r2, [pc, #44]	; (80005e8 <XMC_SCU_lDelay+0x40>)
 80005ba:	fba2 2303 	umull	r2, r3, r2, r3
 80005be:	0c9a      	lsrs	r2, r3, #18
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	fb02 f303 	mul.w	r3, r2, r3
 80005c6:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 80005c8:	2300      	movs	r3, #0
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	e003      	b.n	80005d6 <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 80005ce:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	3301      	adds	r3, #1
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	68fa      	ldr	r2, [r7, #12]
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	429a      	cmp	r2, r3
 80005dc:	d3f7      	bcc.n	80005ce <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 80005de:	3710      	adds	r7, #16
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	20005fc0 	.word	0x20005fc0
 80005e8:	431bde83 	.word	0x431bde83

080005ec <XMC_SCU_INTERUPT_GetEventStatus>:
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 80005f0:	4b03      	ldr	r3, [pc, #12]	; (8000600 <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 80005f2:	685b      	ldr	r3, [r3, #4]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	50004074 	.word	0x50004074

08000604 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 800060c:	4a03      	ldr	r2, [pc, #12]	; (800061c <XMC_SCU_INTERRUPT_ClearEventStatus+0x18>)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	60d3      	str	r3, [r2, #12]
}
 8000612:	370c      	adds	r7, #12
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	50004074 	.word	0x50004074

08000620 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 8000620:	b5b0      	push	{r4, r5, r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af02      	add	r7, sp, #8
 8000626:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 8000628:	2000      	movs	r0, #0
 800062a:	f000 f8bf 	bl	80007ac <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 800062e:	f000 fa7d 	bl	8000b2c <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	79db      	ldrb	r3, [r3, #7]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d00a      	beq.n	8000650 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 800063a:	f000 fab5 	bl	8000ba8 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 800063e:	bf00      	nop
 8000640:	f000 faa0 	bl	8000b84 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 8000644:	4603      	mov	r3, r0
 8000646:	f083 0301 	eor.w	r3, r3, #1
 800064a:	b2db      	uxtb	r3, r3
 800064c:	2b00      	cmp	r3, #0
 800064e:	d1f7      	bne.n	8000640 <XMC_SCU_CLOCK_Init+0x20>
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	7a5b      	ldrb	r3, [r3, #9]
 8000654:	4618      	mov	r0, r3
 8000656:	f000 f923 	bl	80008a0 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 800065a:	bf00      	nop
 800065c:	f7ff ff98 	bl	8000590 <XMC_SCU_GetMirrorStatus>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d1fa      	bne.n	800065c <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	7a1b      	ldrb	r3, [r3, #8]
 800066a:	4618      	mov	r0, r3
 800066c:	f000 fa38 	bl	8000ae0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	7c1b      	ldrb	r3, [r3, #16]
 8000674:	4618      	mov	r0, r3
 8000676:	f000 f931 	bl	80008dc <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	7c5b      	ldrb	r3, [r3, #17]
 800067e:	4618      	mov	r0, r3
 8000680:	f000 f954 	bl	800092c <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	7c9b      	ldrb	r3, [r3, #18]
 8000688:	4618      	mov	r0, r3
 800068a:	f000 f93b 	bl	8000904 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	7cdb      	ldrb	r3, [r3, #19]
 8000692:	4618      	mov	r0, r3
 8000694:	f000 f95e 	bl	8000954 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	799b      	ldrb	r3, [r3, #6]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d00a      	beq.n	80006b6 <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 80006a0:	f000 faba 	bl	8000c18 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 80006a4:	bf00      	nop
 80006a6:	f000 fadf 	bl	8000c68 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 80006aa:	4603      	mov	r3, r0
 80006ac:	f083 0301 	eor.w	r3, r3, #1
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d1f7      	bne.n	80006a6 <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	78db      	ldrb	r3, [r3, #3]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d102      	bne.n	80006c4 <XMC_SCU_CLOCK_Init+0xa4>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 80006be:	f000 faf7 	bl	8000cb0 <XMC_SCU_CLOCK_DisableSystemPll>
 80006c2:	e014      	b.n	80006ee <XMC_SCU_CLOCK_Init+0xce>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 80006c4:	f000 fae4 	bl	8000c90 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	8899      	ldrh	r1, [r3, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80006d4:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80006da:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	4608      	mov	r0, r1
 80006e4:	4611      	mov	r1, r2
 80006e6:	462a      	mov	r2, r5
 80006e8:	4623      	mov	r3, r4
 80006ea:	f000 faf1 	bl	8000cd0 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	68db      	ldr	r3, [r3, #12]
 80006f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80006f6:	d103      	bne.n	8000700 <XMC_SCU_CLOCK_Init+0xe0>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 80006f8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80006fc:	f000 f856 	bl	80007ac <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 8000700:	f7ff fe1a 	bl	8000338 <SystemCoreClockUpdate>
}
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bdb0      	pop	{r4, r5, r7, pc}
 800070a:	bf00      	nop

0800070c <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 800070c:	b480      	push	{r7}
 800070e:	b085      	sub	sp, #20
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	0f1b      	lsrs	r3, r3, #28
 8000718:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000720:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8000722:	68fa      	ldr	r2, [r7, #12]
 8000724:	4613      	mov	r3, r2
 8000726:	005b      	lsls	r3, r3, #1
 8000728:	4413      	add	r3, r2
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	461a      	mov	r2, r3
 800072e:	4b04      	ldr	r3, [pc, #16]	; (8000740 <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 8000730:	4413      	add	r3, r2
 8000732:	68ba      	ldr	r2, [r7, #8]
 8000734:	601a      	str	r2, [r3, #0]
}
 8000736:	3714      	adds	r7, #20
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr
 8000740:	50004414 	.word	0x50004414

08000744 <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000744:	b480      	push	{r7}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	0f1b      	lsrs	r3, r3, #28
 8000750:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000758:	60bb      	str	r3, [r7, #8]

  return ((*(uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 800075a:	68fa      	ldr	r2, [r7, #12]
 800075c:	4613      	mov	r3, r2
 800075e:	005b      	lsls	r3, r3, #1
 8000760:	4413      	add	r3, r2
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	461a      	mov	r2, r3
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <XMC_SCU_RESET_IsPeripheralResetAsserted+0x44>)
 8000768:	4413      	add	r3, r2
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	4013      	ands	r3, r2
 8000770:	2b00      	cmp	r3, #0
 8000772:	bf14      	ite	ne
 8000774:	2301      	movne	r3, #1
 8000776:	2300      	moveq	r3, #0
 8000778:	b2db      	uxtb	r3, r3
}
 800077a:	4618      	mov	r0, r3
 800077c:	3714      	adds	r7, #20
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	5000440c 	.word	0x5000440c

0800078c <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8000790:	f7ff fef2 	bl	8000578 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 8000794:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 8000796:	4b04      	ldr	r3, [pc, #16]	; (80007a8 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 8000798:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	fa22 f303 	lsr.w	r3, r2, r3
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	50004600 	.word	0x50004600

080007ac <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 80007b4:	4906      	ldr	r1, [pc, #24]	; (80007d0 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80007b8:	68db      	ldr	r3, [r3, #12]
 80007ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4313      	orrs	r3, r2
 80007c2:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	50004600 	.word	0x50004600

080007d4 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 80007dc:	4906      	ldr	r1, [pc, #24]	; (80007f8 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80007e0:	699b      	ldr	r3, [r3, #24]
 80007e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4313      	orrs	r3, r2
 80007ea:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	50004600 	.word	0x50004600

080007fc <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8000804:	4906      	ldr	r1, [pc, #24]	; (8000820 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800080a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4313      	orrs	r3, r2
 8000812:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	50004600 	.word	0x50004600

08000824 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 800082e:	88fb      	ldrh	r3, [r7, #6]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d108      	bne.n	8000846 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000834:	4a0a      	ldr	r2, [pc, #40]	; (8000860 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000836:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000838:	68db      	ldr	r3, [r3, #12]
 800083a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800083e:	f023 0301 	bic.w	r3, r3, #1
 8000842:	60d3      	str	r3, [r2, #12]
 8000844:	e007      	b.n	8000856 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000846:	4a06      	ldr	r2, [pc, #24]	; (8000860 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000848:	4b05      	ldr	r3, [pc, #20]	; (8000860 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 800084a:	68db      	ldr	r3, [r3, #12]
 800084c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	60d3      	str	r3, [r2, #12]
  }
}
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr
 8000860:	50004710 	.word	0x50004710

08000864 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800086e:	bf00      	nop
 8000870:	4b09      	ldr	r3, [pc, #36]	; (8000898 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 8000872:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000876:	f003 0308 	and.w	r3, r3, #8
 800087a:	2b00      	cmp	r3, #0
 800087c:	d1f8      	bne.n	8000870 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 800087e:	4907      	ldr	r1, [pc, #28]	; (800089c <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 8000888:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 800088a:	4313      	orrs	r3, r2
 800088c:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	50004000 	.word	0x50004000
 800089c:	50004300 	.word	0x50004300

080008a0 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80008aa:	bf00      	nop
 80008ac:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 80008ae:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80008b2:	f003 0308 	and.w	r3, r3, #8
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d1f8      	bne.n	80008ac <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80008ba:	4907      	ldr	r1, [pc, #28]	; (80008d8 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 80008c4:	79fb      	ldrb	r3, [r7, #7]
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80008c6:	4313      	orrs	r3, r2
 80008c8:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr
 80008d4:	50004000 	.word	0x50004000
 80008d8:	50004300 	.word	0x50004300

080008dc <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80008e4:	4906      	ldr	r1, [pc, #24]	; (8000900 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 80008e6:	4b06      	ldr	r3, [pc, #24]	; (8000900 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 80008e8:	68db      	ldr	r3, [r3, #12]
 80008ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80008f2:	4313      	orrs	r3, r2
 80008f4:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr
 8000900:	50004600 	.word	0x50004600

08000904 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800090c:	4906      	ldr	r1, [pc, #24]	; (8000928 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8000910:	6a1b      	ldr	r3, [r3, #32]
 8000912:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800091a:	4313      	orrs	r3, r2
 800091c:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	50004600 	.word	0x50004600

0800092c <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000934:	4906      	ldr	r1, [pc, #24]	; (8000950 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000938:	691b      	ldr	r3, [r3, #16]
 800093a:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000942:	4313      	orrs	r3, r2
 8000944:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	50004600 	.word	0x50004600

08000954 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 800095c:	4906      	ldr	r1, [pc, #24]	; (8000978 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8000960:	695b      	ldr	r3, [r3, #20]
 8000962:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 800096a:	4313      	orrs	r3, r2
 800096c:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	50004600 	.word	0x50004600

0800097c <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000984:	4906      	ldr	r1, [pc, #24]	; (80009a0 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000988:	699b      	ldr	r3, [r3, #24]
 800098a:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000992:	4313      	orrs	r3, r2
 8000994:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
}
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	50004600 	.word	0x50004600

080009a4 <XMC_SCU_CLOCK_SetWdtClockDivider>:
}
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80009ac:	4906      	ldr	r1, [pc, #24]	; (80009c8 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80009ae:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80009b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009b2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80009ba:	4313      	orrs	r3, r2
 80009bc:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr
 80009c8:	50004600 	.word	0x50004600

080009cc <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 80009d6:	4a04      	ldr	r2, [pc, #16]	; (80009e8 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	6053      	str	r3, [r2, #4]
}
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	50004600 	.word	0x50004600

080009ec <XMC_SCU_CLOCK_UngatePeripheralClock>:
  *(uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
}

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	0f1b      	lsrs	r3, r3, #28
 80009f8:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000a00:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 8000a02:	68fa      	ldr	r2, [r7, #12]
 8000a04:	4613      	mov	r3, r2
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	4413      	add	r3, r2
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <XMC_SCU_CLOCK_UngatePeripheralClock+0x34>)
 8000a10:	4413      	add	r3, r2
 8000a12:	68ba      	ldr	r2, [r7, #8]
 8000a14:	601a      	str	r2, [r3, #0]
}
 8000a16:	3714      	adds	r7, #20
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	50004648 	.word	0x50004648

08000a24 <XMC_SCU_CLOCK_IsPeripheralClockGated>:

/* API to ungate a given module clock */
bool XMC_SCU_CLOCK_IsPeripheralClockGated(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  uint32_t index = ((peripheral & 0xf0000000UL) >> 28UL);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	0f1b      	lsrs	r3, r3, #28
 8000a30:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000a38:	60bb      	str	r3, [r7, #8]

  return ((*(uint32_t *)(&(SCU_CLK->CGATSTAT0) + (index * 3U)) & mask) != 0U);
 8000a3a:	68fa      	ldr	r2, [r7, #12]
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	4413      	add	r3, r2
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	461a      	mov	r2, r3
 8000a46:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <XMC_SCU_CLOCK_IsPeripheralClockGated+0x44>)
 8000a48:	4413      	add	r3, r2
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	4013      	ands	r3, r2
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	bf14      	ite	ne
 8000a54:	2301      	movne	r3, #1
 8000a56:	2300      	moveq	r3, #0
 8000a58:	b2db      	uxtb	r3, r3
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3714      	adds	r7, #20
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	50004640 	.word	0x50004640

08000a6c <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8000a76:	4a19      	ldr	r2, [pc, #100]	; (8000adc <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000a78:	4b18      	ldr	r3, [pc, #96]	; (8000adc <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000a7a:	695b      	ldr	r3, [r3, #20]
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000a82:	4a16      	ldr	r2, [pc, #88]	; (8000adc <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000a84:	4b15      	ldr	r3, [pc, #84]	; (8000adc <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000a86:	695b      	ldr	r3, [r3, #20]
 8000a88:	f043 0310 	orr.w	r3, r3, #16
 8000a8c:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000a8e:	4913      	ldr	r1, [pc, #76]	; (8000adc <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	3b01      	subs	r3, #1
 8000a94:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	3b01      	subs	r3, #1
 8000a9a:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	614b      	str	r3, [r1, #20]
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000aa0:	4a0e      	ldr	r2, [pc, #56]	; (8000adc <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000aa4:	695b      	ldr	r3, [r3, #20]
 8000aa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aaa:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000aac:	4a0b      	ldr	r2, [pc, #44]	; (8000adc <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000ab0:	695b      	ldr	r3, [r3, #20]
 8000ab2:	f023 0310 	bic.w	r3, r3, #16
 8000ab6:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8000ab8:	4a08      	ldr	r2, [pc, #32]	; (8000adc <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000aba:	4b08      	ldr	r3, [pc, #32]	; (8000adc <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000abc:	695b      	ldr	r3, [r3, #20]
 8000abe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ac2:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8000ac4:	bf00      	nop
 8000ac6:	4b05      	ldr	r3, [pc, #20]	; (8000adc <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000ac8:	691b      	ldr	r3, [r3, #16]
 8000aca:	f003 0304 	and.w	r3, r3, #4
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d0f9      	beq.n	8000ac6 <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	50004710 	.word	0x50004710

08000ae0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8000aea:	4a0f      	ldr	r2, [pc, #60]	; (8000b28 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000aec:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000af4:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d10e      	bne.n	8000b1a <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8000afc:	4a0a      	ldr	r2, [pc, #40]	; (8000b28 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000afe:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000b06:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8000b08:	2064      	movs	r0, #100	; 0x64
 8000b0a:	f7ff fd4d 	bl	80005a8 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8000b0e:	4a06      	ldr	r2, [pc, #24]	; (8000b28 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000b10:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b18:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8000b1a:	2064      	movs	r0, #100	; 0x64
 8000b1c:	f7ff fd44 	bl	80005a8 <XMC_SCU_lDelay>
}
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	50004710 	.word	0x50004710

08000b2c <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000b30:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f003 0301 	and.w	r3, r3, #1
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d109      	bne.n	8000b50 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000b42:	bf00      	nop
 8000b44:	4b0d      	ldr	r3, [pc, #52]	; (8000b7c <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f003 0301 	and.w	r3, r3, #1
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d0f9      	beq.n	8000b44 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000b50:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d00a      	beq.n	8000b72 <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000b5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b62:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8000b64:	bf00      	nop
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d1f9      	bne.n	8000b66 <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	50004200 	.word	0x50004200
 8000b80:	50004400 	.word	0x50004400

08000b84 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f003 0308 	and.w	r3, r3, #8
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	bf0c      	ite	eq
 8000b94:	2301      	moveq	r3, #1
 8000b96:	2300      	movne	r3, #0
 8000b98:	b2db      	uxtb	r3, r3
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	50004300 	.word	0x50004300

08000ba8 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
 8000bac:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000bb0:	f7ff fd28 	bl	8000604 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000bb4:	4a17      	ldr	r2, [pc, #92]	; (8000c14 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000bb6:	4b17      	ldr	r3, [pc, #92]	; (8000c14 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000bb8:	69db      	ldr	r3, [r3, #28]
 8000bba:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000bbe:	61d3      	str	r3, [r2, #28]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 8000bc0:	bf00      	nop
 8000bc2:	f7ff fd13 	bl	80005ec <XMC_SCU_INTERUPT_GetEventStatus>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d0f8      	beq.n	8000bc2 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
 8000bd0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000bd4:	f7ff fd16 	bl	8000604 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8000bd8:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000bda:	2208      	movs	r2, #8
 8000bdc:	605a      	str	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 8000bde:	bf00      	nop
 8000be0:	f7ff fd04 	bl	80005ec <XMC_SCU_INTERUPT_GetEventStatus>
 8000be4:	4603      	mov	r3, r0
 8000be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d0f8      	beq.n	8000be0 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x38>

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
 8000bee:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000bf2:	f7ff fd07 	bl	8000604 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000bf6:	4a07      	ldr	r2, [pc, #28]	; (8000c14 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	f043 0308 	orr.w	r3, r3, #8
 8000c00:	60d3      	str	r3, [r2, #12]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 8000c02:	bf00      	nop
 8000c04:	f7ff fcf2 	bl	80005ec <XMC_SCU_INTERUPT_GetEventStatus>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d0f8      	beq.n	8000c04 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>
}
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	50004300 	.word	0x50004300

08000c18 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000c18:	b5b0      	push	{r4, r5, r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000c1c:	4a0f      	ldr	r2, [pc, #60]	; (8000c5c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c1e:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c26:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000c28:	4d0d      	ldr	r5, [pc, #52]	; (8000c60 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000c2a:	4b0d      	ldr	r3, [pc, #52]	; (8000c60 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000c32:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000c36:	f004 ff73 	bl	8005b20 <OSCHP_GetFrequency>
 8000c3a:	4602      	mov	r2, r0
 8000c3c:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8000c3e:	fba3 2302 	umull	r2, r3, r3, r2
 8000c42:	0d1b      	lsrs	r3, r3, #20
 8000c44:	3b01      	subs	r3, #1
 8000c46:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000c48:	4323      	orrs	r3, r4
 8000c4a:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000c4c:	4a03      	ldr	r2, [pc, #12]	; (8000c5c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c4e:	4b03      	ldr	r3, [pc, #12]	; (8000c5c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000c56:	6053      	str	r3, [r2, #4]
}
 8000c58:	bdb0      	pop	{r4, r5, r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	50004710 	.word	0x50004710
 8000c60:	50004700 	.word	0x50004700
 8000c64:	6b5fca6b 	.word	0x6b5fca6b

08000c68 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000c6c:	4b07      	ldr	r3, [pc, #28]	; (8000c8c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000c74:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000c78:	bf0c      	ite	eq
 8000c7a:	2301      	moveq	r3, #1
 8000c7c:	2300      	movne	r3, #0
 8000c7e:	b2db      	uxtb	r3, r3
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	50004710 	.word	0x50004710

08000c90 <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000c94:	4a05      	ldr	r2, [pc, #20]	; (8000cac <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000c96:	4b05      	ldr	r3, [pc, #20]	; (8000cac <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c9e:	f023 0302 	bic.w	r3, r3, #2
 8000ca2:	6053      	str	r3, [r2, #4]
}
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	50004710 	.word	0x50004710

08000cb0 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000cb4:	4a05      	ldr	r2, [pc, #20]	; (8000ccc <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000cb6:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cbe:	f043 0302 	orr.w	r3, r3, #2
 8000cc2:	6053      	str	r3, [r2, #4]
}
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	50004710 	.word	0x50004710

08000cd0 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60ba      	str	r2, [r7, #8]
 8000cd8:	607b      	str	r3, [r7, #4]
 8000cda:	4603      	mov	r3, r0
 8000cdc:	81fb      	strh	r3, [r7, #14]
 8000cde:	460b      	mov	r3, r1
 8000ce0:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000ce2:	89fb      	ldrh	r3, [r7, #14]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff fd9d 	bl	8000824 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000cea:	7b7b      	ldrb	r3, [r7, #13]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	f040 8084 	bne.w	8000dfa <XMC_SCU_CLOCK_StartSystemPll+0x12a>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000cf2:	89fb      	ldrh	r3, [r7, #14]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d109      	bne.n	8000d0c <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000cf8:	f004 ff12 	bl	8005b20 <OSCHP_GetFrequency>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	4b4b      	ldr	r3, [pc, #300]	; (8000e2c <XMC_SCU_CLOCK_StartSystemPll+0x15c>)
 8000d00:	fba3 2302 	umull	r2, r3, r3, r2
 8000d04:	0c9b      	lsrs	r3, r3, #18
 8000d06:	059b      	lsls	r3, r3, #22
 8000d08:	617b      	str	r3, [r7, #20]
 8000d0a:	e002      	b.n	8000d12 <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000d0c:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000d10:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	687a      	ldr	r2, [r7, #4]
 8000d16:	fb02 f203 	mul.w	r2, r2, r3
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d20:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	4a42      	ldr	r2, [pc, #264]	; (8000e30 <XMC_SCU_CLOCK_StartSystemPll+0x160>)
 8000d26:	fba2 2303 	umull	r2, r3, r2, r3
 8000d2a:	091b      	lsrs	r3, r3, #4
 8000d2c:	0d9b      	lsrs	r3, r3, #22
 8000d2e:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000d30:	4a40      	ldr	r2, [pc, #256]	; (8000e34 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d32:	4b40      	ldr	r3, [pc, #256]	; (8000e34 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f043 0301 	orr.w	r3, r3, #1
 8000d3a:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000d3c:	4a3d      	ldr	r2, [pc, #244]	; (8000e34 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d3e:	4b3d      	ldr	r3, [pc, #244]	; (8000e34 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f043 0310 	orr.w	r3, r3, #16
 8000d46:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000d48:	493a      	ldr	r1, [pc, #232]	; (8000e34 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d4a:	4b3a      	ldr	r3, [pc, #232]	; (8000e34 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d4c:	689a      	ldr	r2, [r3, #8]
 8000d4e:	4b3a      	ldr	r3, [pc, #232]	; (8000e38 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8000d50:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	3a01      	subs	r2, #1
 8000d56:	0212      	lsls	r2, r2, #8
 8000d58:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	3b01      	subs	r3, #1
 8000d5e:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000d60:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	3b01      	subs	r3, #1
 8000d66:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000d6c:	4a31      	ldr	r2, [pc, #196]	; (8000e34 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d6e:	4b31      	ldr	r3, [pc, #196]	; (8000e34 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d76:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000d78:	4a2e      	ldr	r2, [pc, #184]	; (8000e34 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d7a:	4b2e      	ldr	r3, [pc, #184]	; (8000e34 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f023 0310 	bic.w	r3, r3, #16
 8000d82:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000d84:	4a2b      	ldr	r2, [pc, #172]	; (8000e34 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d86:	4b2b      	ldr	r3, [pc, #172]	; (8000e34 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d8e:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000d90:	bf00      	nop
 8000d92:	4b28      	ldr	r3, [pc, #160]	; (8000e34 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f003 0304 	and.w	r3, r3, #4
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d0f9      	beq.n	8000d92 <XMC_SCU_CLOCK_StartSystemPll+0xc2>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000d9e:	4a25      	ldr	r2, [pc, #148]	; (8000e34 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000da0:	4b24      	ldr	r3, [pc, #144]	; (8000e34 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f023 0301 	bic.w	r3, r3, #1
 8000da8:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000daa:	bf00      	nop
 8000dac:	4b21      	ldr	r3, [pc, #132]	; (8000e34 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f003 0301 	and.w	r3, r3, #1
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d1f9      	bne.n	8000dac <XMC_SCU_CLOCK_StartSystemPll+0xdc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	4a20      	ldr	r2, [pc, #128]	; (8000e3c <XMC_SCU_CLOCK_StartSystemPll+0x16c>)
 8000dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc0:	095b      	lsrs	r3, r3, #5
 8000dc2:	0d9b      	lsrs	r3, r3, #22
 8000dc4:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000dc6:	6a3a      	ldr	r2, [r7, #32]
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d202      	bcs.n	8000dd4 <XMC_SCU_CLOCK_StartSystemPll+0x104>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000dce:	6938      	ldr	r0, [r7, #16]
 8000dd0:	f000 f838 	bl	8000e44 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	085b      	lsrs	r3, r3, #1
 8000dd8:	4a19      	ldr	r2, [pc, #100]	; (8000e40 <XMC_SCU_CLOCK_StartSystemPll+0x170>)
 8000dda:	fba2 2303 	umull	r2, r3, r2, r3
 8000dde:	095b      	lsrs	r3, r3, #5
 8000de0:	0d9b      	lsrs	r3, r3, #22
 8000de2:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000de4:	6a3a      	ldr	r2, [r7, #32]
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d202      	bcs.n	8000df2 <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000dec:	6938      	ldr	r0, [r7, #16]
 8000dee:	f000 f829 	bl	8000e44 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000df2:	6a38      	ldr	r0, [r7, #32]
 8000df4:	f000 f826 	bl	8000e44 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000df8:	e015      	b.n	8000e26 <XMC_SCU_CLOCK_StartSystemPll+0x156>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000dfa:	490e      	ldr	r1, [pc, #56]	; (8000e34 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000dfc:	4b0d      	ldr	r3, [pc, #52]	; (8000e34 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000e04:	6a3b      	ldr	r3, [r7, #32]
 8000e06:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	608b      	str	r3, [r1, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000e0c:	4a09      	ldr	r2, [pc, #36]	; (8000e34 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f043 0301 	orr.w	r3, r3, #1
 8000e16:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000e18:	bf00      	nop
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d0f9      	beq.n	8000e1a <XMC_SCU_CLOCK_StartSystemPll+0x14a>
    {
      /* wait for prescaler mode */
    }
  }
}
 8000e26:	3718      	adds	r7, #24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	431bde83 	.word	0x431bde83
 8000e30:	aaaaaaab 	.word	0xaaaaaaab
 8000e34:	50004710 	.word	0x50004710
 8000e38:	f08080ff 	.word	0xf08080ff
 8000e3c:	88888889 	.word	0x88888889
 8000e40:	b60b60b7 	.word	0xb60b60b7

08000e44 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000e4c:	4907      	ldr	r1, [pc, #28]	; (8000e6c <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000e4e:	4b07      	ldr	r3, [pc, #28]	; (8000e6c <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	3b01      	subs	r3, #1
 8000e5a:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	608b      	str	r3, [r1, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  XMC_SCU_lDelay(50U);
 8000e60:	2032      	movs	r0, #50	; 0x32
 8000e62:	f7ff fba1 	bl	80005a8 <XMC_SCU_lDelay>
}
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	50004710 	.word	0x50004710

08000e70 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e7e:	60da      	str	r2, [r3, #12]
}
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop

08000e8c <XMC_CCU4_lDeassertReset>:
    XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4a08      	ldr	r2, [pc, #32]	; (8000eb8 <XMC_CCU4_lDeassertReset+0x2c>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d103      	bne.n	8000ea4 <XMC_CCU4_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8000e9c:	2004      	movs	r0, #4
 8000e9e:	f7ff fc35 	bl	800070c <XMC_SCU_RESET_DeassertPeripheralReset>
 8000ea2:	e006      	b.n	8000eb2 <XMC_CCU4_lDeassertReset+0x26>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a05      	ldr	r2, [pc, #20]	; (8000ebc <XMC_CCU4_lDeassertReset+0x30>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d102      	bne.n	8000eb2 <XMC_CCU4_lDeassertReset+0x26>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8000eac:	2008      	movs	r0, #8
 8000eae:	f7ff fc2d 	bl	800070c <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	4000c000 	.word	0x4000c000
 8000ebc:	40010000 	.word	0x40010000

08000ec0 <XMC_CCU4_lUngateClock>:
    XMC_ASSERT("XMC_CCU4_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a08      	ldr	r2, [pc, #32]	; (8000eec <XMC_CCU4_lUngateClock+0x2c>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d103      	bne.n	8000ed8 <XMC_CCU4_lUngateClock+0x18>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
 8000ed0:	2004      	movs	r0, #4
 8000ed2:	f7ff fd8b 	bl	80009ec <XMC_SCU_CLOCK_UngatePeripheralClock>
 8000ed6:	e006      	b.n	8000ee6 <XMC_CCU4_lUngateClock+0x26>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <XMC_CCU4_lUngateClock+0x30>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d102      	bne.n	8000ee6 <XMC_CCU4_lUngateClock+0x26>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
 8000ee0:	2008      	movs	r0, #8
 8000ee2:	f7ff fd83 	bl	80009ec <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
  }
}
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	4000c000 	.word	0x4000c000
 8000ef0:	40010000 	.word	0x40010000

08000ef4 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8000efc:	2010      	movs	r0, #16
 8000efe:	f7ff fd65 	bl	80009cc <XMC_SCU_CLOCK_EnableClock>
#endif
  
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff ffdc 	bl	8000ec0 <XMC_CCU4_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f7ff ffbf 	bl	8000e8c <XMC_CCU4_lDeassertReset>
#endif
}
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f7ff ffe7 	bl	8000ef4 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff ffa2 	bl	8000e70 <XMC_CCU4_StartPrescaler>
  
  gctrl = module->GCTRL;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f38:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 8000f3a:	78fb      	ldrb	r3, [r7, #3]
 8000f3c:	039b      	lsls	r3, r3, #14
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	68fa      	ldr	r2, [r7, #12]
 8000f48:	601a      	str	r2, [r3, #0]
}
 8000f4a:	3710      	adds	r7, #16
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	795b      	ldrb	r3, [r3, #5]
 8000f66:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	051a      	lsls	r2, r3, #20
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	791b      	ldrb	r3, [r3, #4]
 8000f76:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	795b      	ldrb	r3, [r3, #5]
 8000f86:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	795b      	ldrb	r3, [r3, #5]
 8000f96:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	791b      	ldrb	r3, [r3, #4]
 8000fa6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	461a      	mov	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b087      	sub	sp, #28
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	70fb      	strb	r3, [r7, #3]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000fd2:	60fb      	str	r3, [r7, #12]
  
  switch(event)
 8000fd4:	78fb      	ldrb	r3, [r7, #3]
 8000fd6:	2b09      	cmp	r3, #9
 8000fd8:	d82c      	bhi.n	8001034 <XMC_CCU4_SLICE_SetInterruptNode+0x78>
 8000fda:	a201      	add	r2, pc, #4	; (adr r2, 8000fe0 <XMC_CCU4_SLICE_SetInterruptNode+0x24>)
 8000fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe0:	08001009 	.word	0x08001009
 8000fe4:	08001009 	.word	0x08001009
 8000fe8:	08001013 	.word	0x08001013
 8000fec:	08001013 	.word	0x08001013
 8000ff0:	08001035 	.word	0x08001035
 8000ff4:	08001035 	.word	0x08001035
 8000ff8:	08001035 	.word	0x08001035
 8000ffc:	08001035 	.word	0x08001035
 8001000:	0800101d 	.word	0x0800101d
 8001004:	08001029 	.word	0x08001029
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 8001008:	2303      	movs	r3, #3
 800100a:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
      break;
 8001010:	e016      	b.n	8001040 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 8001012:	230c      	movs	r3, #12
 8001014:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 8001016:	2302      	movs	r3, #2
 8001018:	617b      	str	r3, [r7, #20]
      break;
 800101a:	e011      	b.n	8001040 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 800101c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001020:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 8001022:	2308      	movs	r3, #8
 8001024:	617b      	str	r3, [r7, #20]
      break;
 8001026:	e00b      	b.n	8001040 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 8001028:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800102c:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 800102e:	230a      	movs	r3, #10
 8001030:	617b      	str	r3, [r7, #20]
      break;
 8001032:	e005      	b.n	8001040 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 8001034:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001038:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 800103a:	230c      	movs	r3, #12
 800103c:	617b      	str	r3, [r7, #20]
      break;
 800103e:	bf00      	nop
  }
  
  srs &= ~mask; 
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	43db      	mvns	r3, r3
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	4013      	ands	r3, r2
 8001048:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
 800104a:	78ba      	ldrb	r2, [r7, #2]
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	68fa      	ldr	r2, [r7, #12]
 8001054:	4313      	orrs	r3, r2
 8001056:	60fb      	str	r3, [r7, #12]
  slice->SRS = srs;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8001060:	371c      	adds	r7, #28
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop

0800106c <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR> 
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU8_GIDLC_SPRB_Msk;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f44f 7280 	mov.w	r2, #256	; 0x100
 800107a:	60da      	str	r2, [r3, #12]
}
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop

08001088 <XMC_CCU8_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StopTimer(XMC_CCU8_SLICE_t *const slice)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TRBC_Msk;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2201      	movs	r2, #1
 8001094:	611a      	str	r2, [r3, #16]
}
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <XMC_CCU8_lDeassertReset>:
    XMC_ASSERT("XMC_CCU8_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU8_lDeassertReset(const XMC_CCU8_MODULE_t *const module)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  if (module == CCU80)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4a04      	ldr	r2, [pc, #16]	; (80010bc <XMC_CCU8_lDeassertReset+0x1c>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d102      	bne.n	80010b6 <XMC_CCU8_lDeassertReset+0x16>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU80);
 80010b0:	2080      	movs	r0, #128	; 0x80
 80010b2:	f7ff fb2b 	bl	800070c <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU8_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40020000 	.word	0x40020000

080010c0 <XMC_CCU8_lUngateClock>:
    XMC_ASSERT("XMC_CCU8_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU8_lUngateClock(XMC_CCU8_MODULE_t *const module)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  if (module == CCU80)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4a04      	ldr	r2, [pc, #16]	; (80010dc <XMC_CCU8_lUngateClock+0x1c>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d102      	bne.n	80010d6 <XMC_CCU8_lUngateClock+0x16>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU80);
 80010d0:	2080      	movs	r0, #128	; 0x80
 80010d2:	f7ff fc8b 	bl	80009ec <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU8_lUngateClock:Invalid Module Pointer", 0);
  }
}
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40020000 	.word	0x40020000

080010e0 <XMC_CCU8_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/* API to set the CCU8 module as active and enable the clock  */
void XMC_CCU8_EnableModule(XMC_CCU8_MODULE_t *const module)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_EnableModule:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));

#if (UC_FAMILY == XMC4)
  /* Enable CCU8 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 80010e8:	2010      	movs	r0, #16
 80010ea:	f7ff fc6f 	bl	80009cc <XMC_SCU_CLOCK_EnableClock>
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU8_lUngateClock(module);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff ffe6 	bl	80010c0 <XMC_CCU8_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU8_lDeassertReset(module);
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff ffd3 	bl	80010a0 <XMC_CCU8_lDeassertReset>
#endif
}
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <XMC_CCU8_Init>:
#endif
}

/* API to initialize CCU8 global resources  */
void XMC_CCU8_Init(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_SLICE_MCMS_ACTION_t mcs_action)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	460b      	mov	r3, r1
 800110a:	70fb      	strb	r3, [r7, #3]

  XMC_ASSERT("XMC_CCU8_Init:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_Init:Invalid mcs action", XMC_CCU8_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU8 module */
  XMC_CCU8_EnableModule(module);
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff ffe7 	bl	80010e0 <XMC_CCU8_EnableModule>
  /* Start the prescaler */
  XMC_CCU8_StartPrescaler(module);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ffaa 	bl	800106c <XMC_CCU8_StartPrescaler>
  
  gctrl = module->GCTRL;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU8_GCTRL_MSDE_Msk);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001124:	60fb      	str	r3, [r7, #12]
  gctrl |= (uint32_t)mcs_action << CCU8_GCTRL_MSDE_Pos;
 8001126:	78fb      	ldrb	r3, [r7, #3]
 8001128:	039b      	lsls	r3, r3, #14
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	4313      	orrs	r3, r2
 800112e:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	601a      	str	r2, [r3, #0]
}
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <XMC_CCU8_SLICE_CompareInit>:
}

/* API to configure CC8 Slice in Compare mode */
void XMC_CCU8_SLICE_CompareInit(XMC_CCU8_SLICE_t *const slice,
                                const XMC_CCU8_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Timer Init Pointer is NULL",
             (XMC_CCU8_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);
  /* Stops the timer */
  XMC_CCU8_SLICE_StopTimer(slice);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff ff9e 	bl	8001088 <XMC_CCU8_SLICE_StopTimer>
  /* Program the timer mode */
  slice->TC = compare_init->tc;
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC =  (uint32_t)compare_init->timer_concatenation << CCU8_CC8_CMC_TCE_Pos;
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	7b5b      	ldrb	r3, [r3, #13]
 8001158:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800115c:	b2db      	uxtb	r3, r3
 800115e:	051a      	lsls	r2, r3, #20
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	7b1b      	ldrb	r3, [r3, #12]
 8001168:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800116c:	b2db      	uxtb	r3, r3
 800116e:	461a      	mov	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	7b1b      	ldrb	r3, [r3, #12]
 8001178:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800117c:	b2db      	uxtb	r3, r3
 800117e:	461a      	mov	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	7b5b      	ldrb	r3, [r3, #13]
 8001188:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800118c:	b2db      	uxtb	r3, r3
 800118e:	461a      	mov	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->psl;
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685a      	ldr	r2, [r3, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	619a      	str	r2, [r3, #24]
  /* Asymmetric PWM and Slice output routing configuration */
#if defined(CCU8V3) /* Defined for XMC1400 devices only */
  slice->CHC = (uint32_t) compare_init->chc;
#else
  slice->CHC = (uint32_t)((uint32_t)compare_init->chc ^ XMC_CCU8_SLICE_CHC_CONFIG_MASK);
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	f083 0214 	eor.w	r2, r3, #20
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	649a      	str	r2, [r3, #72]	; 0x48
#endif
}
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop

080011b0 <XMC_CCU8_SLICE_SetTimerPeriodMatch>:
  slice->TC = tc;
}

/* Programs period match value of the timer  */
void XMC_CCU8_SLICE_SetTimerPeriodMatch(XMC_CCU8_SLICE_t *const slice, const uint16_t period_val)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	460b      	mov	r3, r1
 80011ba:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 80011bc:	887a      	ldrh	r2, [r7, #2]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <XMC_CCU8_SLICE_SetTimerCompareMatch>:

/* Programs timer compare match value for channel 1 or 2 */
void XMC_CCU8_SLICE_SetTimerCompareMatch(XMC_CCU8_SLICE_t *const slice,
                                         const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel,
                                         const uint16_t compare_val)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	460b      	mov	r3, r1
 80011d6:	70fb      	strb	r3, [r7, #3]
 80011d8:	4613      	mov	r3, r2
 80011da:	803b      	strh	r3, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid channel", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(channel));

  if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
 80011dc:	78fb      	ldrb	r3, [r7, #3]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d103      	bne.n	80011ea <XMC_CCU8_SLICE_SetTimerCompareMatch+0x1e>
  {
    slice->CR1S = (uint32_t) compare_val;
 80011e2:	883a      	ldrh	r2, [r7, #0]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80011e8:	e002      	b.n	80011f0 <XMC_CCU8_SLICE_SetTimerCompareMatch+0x24>
  }
  else
  {
    slice->CR2S = (uint32_t) compare_val;
 80011ea:	883a      	ldrh	r2, [r7, #0]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop

080011fc <XMC_CCU8_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU8_SLICE_SetInterruptNode(XMC_CCU8_SLICE_t *const slice,
                                     const XMC_CCU8_SLICE_IRQ_ID_t event,
                                     const XMC_CCU8_SLICE_SR_ID_t sr)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b087      	sub	sp, #28
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	70fb      	strb	r3, [r7, #3]
 8001208:	4613      	mov	r3, r2
 800120a:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU8_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  srs = slice->SRS;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001212:	60fb      	str	r3, [r7, #12]

  switch(event)
 8001214:	78fb      	ldrb	r3, [r7, #3]
 8001216:	2b09      	cmp	r3, #9
 8001218:	d831      	bhi.n	800127e <XMC_CCU8_SLICE_SetInterruptNode+0x82>
 800121a:	a201      	add	r2, pc, #4	; (adr r2, 8001220 <XMC_CCU8_SLICE_SetInterruptNode+0x24>)
 800121c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001220:	08001249 	.word	0x08001249
 8001224:	08001249 	.word	0x08001249
 8001228:	08001253 	.word	0x08001253
 800122c:	08001253 	.word	0x08001253
 8001230:	0800125d 	.word	0x0800125d
 8001234:	0800125d 	.word	0x0800125d
 8001238:	0800127f 	.word	0x0800127f
 800123c:	0800127f 	.word	0x0800127f
 8001240:	08001267 	.word	0x08001267
 8001244:	08001273 	.word	0x08001273
  {
    case XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU8_CC8_SRS_POSR_Msk);
 8001248:	2303      	movs	r3, #3
 800124a:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_POSR_Pos;
 800124c:	2300      	movs	r3, #0
 800124e:	613b      	str	r3, [r7, #16]
      break;
 8001250:	e01b      	b.n	800128a <XMC_CCU8_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1:
    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1:
      mask = ((uint32_t) CCU8_CC8_SRS_CM1SR_Msk);
 8001252:	230c      	movs	r3, #12
 8001254:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_CM1SR_Pos;
 8001256:	2302      	movs	r3, #2
 8001258:	613b      	str	r3, [r7, #16]
      break;
 800125a:	e016      	b.n	800128a <XMC_CCU8_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2:
    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2:
      mask = ((uint32_t) CCU8_CC8_SRS_CM2SR_Msk);
 800125c:	2330      	movs	r3, #48	; 0x30
 800125e:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_CM2SR_Pos;
 8001260:	2304      	movs	r3, #4
 8001262:	613b      	str	r3, [r7, #16]
      break;
 8001264:	e011      	b.n	800128a <XMC_CCU8_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU8_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU8_CC8_SRS_E0SR_Msk);
 8001266:	f44f 7340 	mov.w	r3, #768	; 0x300
 800126a:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E0SR_Pos;
 800126c:	2308      	movs	r3, #8
 800126e:	613b      	str	r3, [r7, #16]
      break;
 8001270:	e00b      	b.n	800128a <XMC_CCU8_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU8_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU8_CC8_SRS_E1SR_Msk);
 8001272:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001276:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E1SR_Pos;
 8001278:	230a      	movs	r3, #10
 800127a:	613b      	str	r3, [r7, #16]
      break;
 800127c:	e005      	b.n	800128a <XMC_CCU8_SLICE_SetInterruptNode+0x8e>

    default:
      mask = ((uint32_t) CCU8_CC8_SRS_E2SR_Msk);
 800127e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001282:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E2SR_Pos;
 8001284:	230c      	movs	r3, #12
 8001286:	613b      	str	r3, [r7, #16]
      break;
 8001288:	bf00      	nop
  }
  
  srs &= ~mask;
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	43db      	mvns	r3, r3
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	4013      	ands	r3, r2
 8001292:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
 8001294:	78ba      	ldrb	r2, [r7, #2]
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	68fa      	ldr	r2, [r7, #12]
 800129e:	4313      	orrs	r3, r2
 80012a0:	60fb      	str	r3, [r7, #12]
  
  slice->SRS = srs;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	68fa      	ldr	r2, [r7, #12]
 80012a6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 80012aa:	371c      	adds	r7, #28
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <XMC_ERU_ETL_Init>:
 ********************************************************************************************************************/
/* Initializes the selected ERU_ETLx channel with the config structure.  */
void XMC_ERU_ETL_Init(XMC_ERU_t *const eru,
                      const uint8_t channel,
                      const XMC_ERU_ETL_CONFIG_t *const config)
{ 
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	460b      	mov	r3, r1
 80012be:	607a      	str	r2, [r7, #4]
 80012c0:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);
 80012c2:	68f8      	ldr	r0, [r7, #12]
 80012c4:	f7ff f8a2 	bl	800040c <XMC_ERU_Enable>

  eru->EXISEL = (eru->EXISEL & 
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681a      	ldr	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 80012cc:	7afb      	ldrb	r3, [r7, #11]
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	4619      	mov	r1, r3
 80012d2:	230f      	movs	r3, #15
 80012d4:	408b      	lsls	r3, r1
 80012d6:	43db      	mvns	r3, r3
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
 80012d8:	401a      	ands	r2, r3
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	7af9      	ldrb	r1, [r7, #11]
 80012e0:	0089      	lsls	r1, r1, #2
 80012e2:	408b      	lsls	r3, r1
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 80012e4:	431a      	orrs	r2, r3
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	601a      	str	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
  
  eru->EXICON[channel] = config->raw;
 80012ea:	7afa      	ldrb	r2, [r7, #11]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6859      	ldr	r1, [r3, #4]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	3204      	adds	r2, #4
 80012f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop

08001300 <XMC_ERU_OGU_SetServiceRequestMode>:

/* Configures the gating scheme for service request generation by setting (GP) bit. */
void XMC_ERU_OGU_SetServiceRequestMode(XMC_ERU_t *const eru,
                                       const uint8_t channel,
                                       const XMC_ERU_OGU_SERVICE_REQUEST_t mode)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	70fb      	strb	r3, [r7, #3]
 800130c:	4613      	mov	r3, r2
 800130e:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Channel Number", (channel < 4U));
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Service Request Mode", XMC_ERU_OGU_CHECK_SERIVCE_REQUEST(mode));

  eru->EXOCON_b[channel].GP = (uint8_t)mode;
 8001310:	78fa      	ldrb	r2, [r7, #3]
 8001312:	78bb      	ldrb	r3, [r7, #2]
 8001314:	f003 0303 	and.w	r3, r3, #3
 8001318:	b2d9      	uxtb	r1, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	3208      	adds	r2, #8
 800131e:	f001 0103 	and.w	r1, r1, #3
 8001322:	0109      	lsls	r1, r1, #4
 8001324:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001328:	f020 0030 	bic.w	r0, r0, #48	; 0x30
 800132c:	4301      	orrs	r1, r0
 800132e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	460b      	mov	r3, r1
 8001346:	70fb      	strb	r3, [r7, #3]
 8001348:	4613      	mov	r3, r2
 800134a:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001350:	78fb      	ldrb	r3, [r7, #3]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	4619      	mov	r1, r3
 8001356:	2303      	movs	r3, #3
 8001358:	408b      	lsls	r3, r1
 800135a:	43db      	mvns	r3, r3
 800135c:	401a      	ands	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001366:	78bb      	ldrb	r3, [r7, #2]
 8001368:	78f9      	ldrb	r1, [r7, #3]
 800136a:	0049      	lsls	r1, r1, #1
 800136c:	408b      	lsls	r3, r1
 800136e:	431a      	orrs	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	675a      	str	r2, [r3, #116]	; 0x74
}
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop

08001380 <XMC_SPI_CH_Init>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/
 
/* Initializes the selected SPI channel with the config structure. */
void XMC_SPI_CH_Init(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  XMC_USIC_CH_Enable(channel);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f000 f884 	bl	8001498 <XMC_USIC_CH_Enable>
  
  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	795b      	ldrb	r3, [r3, #5]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d112      	bne.n	80013be <XMC_SPI_CH_Init+0x3e>
  {
    /* Configure baud rate */
    if (config->normal_divider_mode)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	791b      	ldrb	r3, [r3, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d007      	beq.n	80013b0 <XMC_SPI_CH_Init+0x30>
    {
      /* Normal divider mode */
      (void)XMC_USIC_CH_SetBaudrateEx(channel, config->baudrate, XMC_SPI_CH_OVERSAMPLING); 
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	4619      	mov	r1, r3
 80013a8:	2202      	movs	r2, #2
 80013aa:	f000 f91f 	bl	80015ec <XMC_USIC_CH_SetBaudrateEx>
 80013ae:	e006      	b.n	80013be <XMC_SPI_CH_Init+0x3e>
    }
    else
    {
      /* Fractional divider mode */
      (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, XMC_SPI_CH_OVERSAMPLING); 
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	4619      	mov	r1, r3
 80013b8:	2202      	movs	r2, #2
 80013ba:	f000 f8a7 	bl	800150c <XMC_USIC_CH_SetBaudrate>
  }
  
  /* Configuration of USIC Shift Control */
  /* Transmission Mode (TRM) = 1  */
  /* Passive Data Level (PDL) = 1 */
  channel->SCTR = USIC_CH_SCTR_PDL_Msk |
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a0e      	ldr	r2, [pc, #56]	; (80013fc <XMC_SPI_CH_Init+0x7c>)
 80013c2:	635a      	str	r2, [r3, #52]	; 0x34
                  (0x7UL << USIC_CH_SCTR_WLE_Pos);

  /* Configuration of USIC Transmit Control/Status Register */
  /* TBUF Data Enable (TDEN) = 1 */
  /* TBUF Data Single Shot Mode (TDSSM) = 1 */
  channel->TCSR = (uint32_t)(USIC_CH_TCSR_HPCMD_Msk |
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 80013ca:	639a      	str	r2, [r3, #56]	; 0x38
                  (0x01UL  << USIC_CH_TCSR_TDEN_Pos) |
                  USIC_CH_TCSR_TDSSM_Msk);

  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	795b      	ldrb	r3, [r3, #5]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d107      	bne.n	80013e4 <XMC_SPI_CH_Init+0x64>
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
                           USIC_CH_PCR_SSCMode_SELCTR_Msk |
                           (uint32_t)config->selo_inversion |
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	799b      	ldrb	r3, [r3, #6]
                  USIC_CH_TCSR_TDSSM_Msk);

  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
 80013d8:	f043 030b 	orr.w	r3, r3, #11
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	461a      	mov	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	63da      	str	r2, [r3, #60]	; 0x3c
                           (uint32_t)config->selo_inversion |
                           USIC_CH_PCR_SSCMode_FEM_Msk);
  }

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f04f 32ff 	mov.w	r2, #4294967295
 80013ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	891b      	ldrh	r3, [r3, #8]
 80013f0:	461a      	mov	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	073f0102 	.word	0x073f0102

08001400 <XMC_SPI_CH_EnableSlaveSelect>:
  return (XMC_SPI_CH_STATUS_t)status;
}

/* Enable the selected slave signal by setting (SELO) bits in PCR register. */
void XMC_SPI_CH_EnableSlaveSelect(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_SLAVE_SELECT_t slave)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
  /* Configuration of Protocol Control Register */
  channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_SELO_Msk;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800140e:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	63da      	str	r2, [r3, #60]	; 0x3c
  channel->PCR_SSCMode |= (uint32_t)slave;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	431a      	orrs	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <XMC_SPI_CH_GetReceivedData>:
  }
}

/* Reads the data from the buffers based on the FIFO mode selection. */
uint16_t XMC_SPI_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800143a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d103      	bne.n	800144a <XMC_SPI_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001446:	81fb      	strh	r3, [r7, #14]
 8001448:	e003      	b.n	8001452 <XMC_SPI_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8001450:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 8001452:	89fb      	ldrh	r3, [r7, #14]
}
 8001454:	4618      	mov	r0, r3
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <XMC_SPI_CH_DisableEvent>:
  channel->CCR |= (event&0x1fc00U);
  channel->PCR_SSCMode |= ((event << 13U) & 0xe000U);
}

void XMC_SPI_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~(event&0x1fc00U);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	f403 33fe 	and.w	r3, r3, #130048	; 0x1fc00
 8001474:	43db      	mvns	r3, r3
 8001476:	401a      	ands	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	641a      	str	r2, [r3, #64]	; 0x40
  channel->PCR_SSCMode &= (uint32_t)~((event << 13U) & 0xe000U);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	035b      	lsls	r3, r3, #13
 8001484:	b29b      	uxth	r3, r3
 8001486:	43db      	mvns	r3, r3
 8001488:	401a      	ands	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4a14      	ldr	r2, [pc, #80]	; (80014f4 <XMC_USIC_CH_Enable+0x5c>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d003      	beq.n	80014b0 <XMC_USIC_CH_Enable+0x18>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4a13      	ldr	r2, [pc, #76]	; (80014f8 <XMC_USIC_CH_Enable+0x60>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d103      	bne.n	80014b8 <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 80014b0:	4812      	ldr	r0, [pc, #72]	; (80014fc <XMC_USIC_CH_Enable+0x64>)
 80014b2:	f000 f9e7 	bl	8001884 <XMC_USIC_Enable>
 80014b6:	e00a      	b.n	80014ce <XMC_USIC_CH_Enable+0x36>
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4a11      	ldr	r2, [pc, #68]	; (8001500 <XMC_USIC_CH_Enable+0x68>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d003      	beq.n	80014c8 <XMC_USIC_CH_Enable+0x30>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4a10      	ldr	r2, [pc, #64]	; (8001504 <XMC_USIC_CH_Enable+0x6c>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d102      	bne.n	80014ce <XMC_USIC_CH_Enable+0x36>
  {
    XMC_USIC_Enable(XMC_USIC1);
 80014c8:	480f      	ldr	r0, [pc, #60]	; (8001508 <XMC_USIC_CH_Enable+0x70>)
 80014ca:	f000 f9db 	bl	8001884 <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2203      	movs	r2, #3
 80014d2:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 80014d4:	bf00      	nop
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d0f9      	beq.n	80014d6 <XMC_USIC_CH_Enable+0x3e>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	f023 020f 	bic.w	r2, r3, #15
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	641a      	str	r2, [r3, #64]	; 0x40
}
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40030000 	.word	0x40030000
 80014f8:	40030200 	.word	0x40030200
 80014fc:	40030008 	.word	0x40030008
 8001500:	48020000 	.word	0x48020000
 8001504:	48020200 	.word	0x48020200
 8001508:	48020008 	.word	0x48020008

0800150c <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08e      	sub	sp, #56	; 0x38
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	2b63      	cmp	r3, #99	; 0x63
 800151c:	d958      	bls.n	80015d0 <XMC_USIC_CH_SetBaudrate+0xc4>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d055      	beq.n	80015d0 <XMC_USIC_CH_SetBaudrate+0xc4>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 8001524:	f7ff f932 	bl	800078c <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8001528:	4602      	mov	r2, r0
 800152a:	4b2e      	ldr	r3, [pc, #184]	; (80015e4 <XMC_USIC_CH_SetBaudrate+0xd8>)
 800152c:	fba3 2302 	umull	r2, r3, r3, r2
 8001530:	095b      	lsrs	r3, r3, #5
 8001532:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	4a2b      	ldr	r2, [pc, #172]	; (80015e4 <XMC_USIC_CH_SetBaudrate+0xd8>)
 8001538:	fba2 2303 	umull	r2, r3, r2, r3
 800153c:	095b      	lsrs	r3, r3, #5
 800153e:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1U;
 8001540:	2301      	movs	r3, #1
 8001542:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 8001544:	2301      	movs	r3, #1
 8001546:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 8001548:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800154c:	627b      	str	r3, [r7, #36]	; 0x24

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 800154e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001552:	633b      	str	r3, [r7, #48]	; 0x30
 8001554:	e022      	b.n	800159c <XMC_USIC_CH_SetBaudrate+0x90>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 8001556:	6a3b      	ldr	r3, [r7, #32]
 8001558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800155a:	fb02 f203 	mul.w	r2, r2, r3
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	6879      	ldr	r1, [r7, #4]
 8001562:	fb01 f303 	mul.w	r3, r1, r3
 8001566:	fbb2 f3f3 	udiv	r3, r2, r3
 800156a:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	0a9b      	lsrs	r3, r3, #10
 8001570:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001578:	617b      	str	r3, [r7, #20]

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001580:	d209      	bcs.n	8001596 <XMC_USIC_CH_SetBaudrate+0x8a>
 8001582:	697a      	ldr	r2, [r7, #20]
 8001584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001586:	429a      	cmp	r2, r3
 8001588:	d205      	bcs.n	8001596 <XMC_USIC_CH_SetBaudrate+0x8a>
      {
        pdiv_frac_min = pdiv_frac;
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 8001592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001594:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8001596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001598:	3b01      	subs	r3, #1
 800159a:	633b      	str	r3, [r7, #48]	; 0x30
 800159c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1d9      	bne.n	8001556 <XMC_USIC_CH_SetBaudrate+0x4a>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 80015a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a4:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	611a      	str	r2, [r3, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	695a      	ldr	r2, [r3, #20]
 80015b0:	4b0d      	ldr	r3, [pc, #52]	; (80015e8 <XMC_USIC_CH_SetBaudrate+0xdc>)
 80015b2:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	3a01      	subs	r2, #1
 80015b8:	0292      	lsls	r2, r2, #10
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 80015ba:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 80015bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015be:	3b01      	subs	r3, #1
 80015c0:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 80015c2:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
 80015c8:	2300      	movs	r3, #0
 80015ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80015ce:	e002      	b.n	80015d6 <XMC_USIC_CH_SetBaudrate+0xca>
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  return status;
 80015d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3738      	adds	r7, #56	; 0x38
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	51eb851f 	.word	0x51eb851f
 80015e8:	fc0080ef 	.word	0xfc0080ef

080015ec <XMC_USIC_CH_SetBaudrateEx>:

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, int32_t rate, int32_t oversampling)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08c      	sub	sp, #48	; 0x30
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
  int32_t peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 80015f8:	f7ff f8c8 	bl	800078c <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 80015fc:	4603      	mov	r3, r0
 80015fe:	623b      	str	r3, [r7, #32]
  int32_t brg_clock = rate * oversampling;
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	fb02 f303 	mul.w	r3, r2, r3
 8001608:	61fb      	str	r3, [r7, #28]
  int32_t actual_rate_upper;
  int32_t actual_rate_lower;
  uint32_t pdiv = 1;
 800160a:	2301      	movs	r3, #1
 800160c:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t divider_step;
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
 800160e:	6a3a      	ldr	r2, [r7, #32]
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	429a      	cmp	r2, r3
 8001614:	dd5f      	ble.n	80016d6 <XMC_USIC_CH_SetBaudrateEx+0xea>
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 8001616:	6a3a      	ldr	r2, [r7, #32]
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	fb92 f3f3 	sdiv	r3, r2, r3
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
    while (divider_step >= 1023)
 8001620:	e010      	b.n	8001644 <XMC_USIC_CH_SetBaudrateEx+0x58>
    {
      pdiv++;
 8001622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001624:	3301      	adds	r3, #1
 8001626:	62fb      	str	r3, [r7, #44]	; 0x2c
      brg_clock = rate * oversampling * pdiv;
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	fb02 f303 	mul.w	r3, r2, r3
 8001630:	461a      	mov	r2, r3
 8001632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001634:	fb03 f302 	mul.w	r3, r3, r2
 8001638:	61fb      	str	r3, [r7, #28]
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 800163a:	6a3a      	ldr	r2, [r7, #32]
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001642:	62bb      	str	r3, [r7, #40]	; 0x28
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    while (divider_step >= 1023)
 8001644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001646:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800164a:	4293      	cmp	r3, r2
 800164c:	d8e9      	bhi.n	8001622 <XMC_USIC_CH_SetBaudrateEx+0x36>
    {
      pdiv++;
      brg_clock = rate * oversampling * pdiv;
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    }
    actual_rate_upper = peripheral_clock / (divider_step * oversampling * pdiv);
 800164e:	6a3a      	ldr	r2, [r7, #32]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001654:	fb01 f303 	mul.w	r3, r1, r3
 8001658:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800165a:	fb01 f303 	mul.w	r3, r1, r3
 800165e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001662:	61bb      	str	r3, [r7, #24]
    actual_rate_lower = peripheral_clock / ((divider_step + 1) * oversampling * pdiv);
 8001664:	6a3a      	ldr	r2, [r7, #32]
 8001666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001668:	3301      	adds	r3, #1
 800166a:	6879      	ldr	r1, [r7, #4]
 800166c:	fb01 f303 	mul.w	r3, r1, r3
 8001670:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001672:	fb01 f303 	mul.w	r3, r1, r3
 8001676:	fbb2 f3f3 	udiv	r3, r2, r3
 800167a:	617b      	str	r3, [r7, #20]

    // choose better approximation if the peripheral frequency is not a multiple of the baudrate
    if (abs(rate - actual_rate_lower) < abs(rate - actual_rate_upper))
 800167c:	68ba      	ldr	r2, [r7, #8]
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001686:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800168a:	68b9      	ldr	r1, [r7, #8]
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	1acb      	subs	r3, r1, r3
 8001690:	2b00      	cmp	r3, #0
 8001692:	bfb8      	it	lt
 8001694:	425b      	neglt	r3, r3
 8001696:	429a      	cmp	r2, r3
 8001698:	da02      	bge.n	80016a0 <XMC_USIC_CH_SetBaudrateEx+0xb4>
    {
      divider_step += 1;
 800169a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800169c:	3301      	adds	r3, #1
 800169e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    divider_step = 1024 - divider_step;
 80016a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016a2:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80016a6:	62bb      	str	r3, [r7, #40]	; 0x28


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
 80016a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016aa:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	611a      	str	r2, [r3, #16]
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	695a      	ldr	r2, [r3, #20]
 80016b6:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <XMC_USIC_CH_SetBaudrateEx+0xfc>)
 80016b8:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	3a01      	subs	r2, #1
 80016be:	0292      	lsls	r2, r2, #10
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 80016c0:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
				   ((pdiv -1) << USIC_CH_BRG_PDIV_Pos);
 80016c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c4:	3b01      	subs	r3, #1
 80016c6:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 80016c8:	431a      	orrs	r2, r3


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
				   ((pdiv -1) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
 80016ce:	2300      	movs	r3, #0
 80016d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80016d4:	e002      	b.n	80016dc <XMC_USIC_CH_SetBaudrateEx+0xf0>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return status;
 80016dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3730      	adds	r7, #48	; 0x30
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	fc0080ef 	.word	0xfc0080ef

080016ec <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	603b      	str	r3, [r7, #0]
 80016f8:	4613      	mov	r3, r2
 80016fa:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001702:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001712:	4b09      	ldr	r3, [pc, #36]	; (8001738 <XMC_USIC_CH_TXFIFO_Configure+0x4c>)
 8001714:	4013      	ands	r3, r2
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8001716:	683a      	ldr	r2, [r7, #0]
 8001718:	0211      	lsls	r1, r2, #8
 800171a:	68ba      	ldr	r2, [r7, #8]
 800171c:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
 800171e:	79fa      	ldrb	r2, [r7, #7]
 8001720:	0612      	lsls	r2, r2, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8001722:	430a      	orrs	r2, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
 8001724:	431a      	orrs	r2, r3
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
 800172c:	3714      	adds	r7, #20
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	f8ffc0c0 	.word	0xf8ffc0c0

0800173c <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	603b      	str	r3, [r7, #0]
 8001748:	4613      	mov	r3, r2
 800174a:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001752:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001762:	4b0a      	ldr	r3, [pc, #40]	; (800178c <XMC_USIC_CH_RXFIFO_Configure+0x50>)
 8001764:	4013      	ands	r3, r2
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	0211      	lsls	r1, r2, #8
 800176a:	68ba      	ldr	r2, [r7, #8]
 800176c:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
 800176e:	79fa      	ldrb	r2, [r7, #7]
 8001770:	0612      	lsls	r2, r2, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
 8001772:	430a      	orrs	r2, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8001774:	4313      	orrs	r3, r2
 8001776:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                   (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	efffc0c0 	.word	0xefffc0c0

08001790 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>:
}

void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
                                            const XMC_USIC_CH_FIFO_SIZE_t size,
                                            const uint32_t limit)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	460b      	mov	r3, r1
 800179a:	607a      	str	r2, [r7, #4]
 800179c:	72fb      	strb	r3, [r7, #11]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80017a4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80017b4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	021b      	lsls	r3, r3, #8
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 80017bc:	431a      	orrs	r2, r3
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
 80017be:	7afb      	ldrb	r3, [r7, #11]
 80017c0:	061b      	lsls	r3, r3, #24
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 80017c2:	431a      	orrs	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
}
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <XMC_USIC_CH_SetInterruptNodePointer>:

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	460b      	mov	r3, r1
 80017de:	607a      	str	r2, [r7, #4]
 80017e0:	72fb      	strb	r3, [r7, #11]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	699a      	ldr	r2, [r3, #24]
 80017e6:	7afb      	ldrb	r3, [r7, #11]
 80017e8:	2107      	movs	r1, #7
 80017ea:	fa01 f303 	lsl.w	r3, r1, r3
 80017ee:	43db      	mvns	r3, r3
 80017f0:	401a      	ands	r2, r3
                  (service_request << (uint32_t)interrupt_node));
 80017f2:	7afb      	ldrb	r3, [r7, #11]
 80017f4:	6879      	ldr	r1, [r7, #4]
 80017f6:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80017fa:	431a      	orrs	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	619a      	str	r2, [r3, #24]
                  (service_request << (uint32_t)interrupt_node));
}
 8001800:	3714      	adds	r7, #20
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop

0800180c <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	460b      	mov	r3, r1
 8001816:	607a      	str	r2, [r7, #4]
 8001818:	72fb      	strb	r3, [r7, #11]
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001820:	7afb      	ldrb	r3, [r7, #11]
 8001822:	2107      	movs	r1, #7
 8001824:	fa01 f303 	lsl.w	r3, r1, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	401a      	ands	r2, r3
                   (service_request << (uint32_t)interrupt_node));
 800182c:	7afb      	ldrb	r3, [r7, #11]
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001834:	431a      	orrs	r2, r3
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (service_request << (uint32_t)interrupt_node));
}
 800183c:	3714      	adds	r7, #20
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop

08001848 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	460b      	mov	r3, r1
 8001852:	607a      	str	r2, [r7, #4]
 8001854:	72fb      	strb	r3, [r7, #11]
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800185c:	7afb      	ldrb	r3, [r7, #11]
 800185e:	2107      	movs	r1, #7
 8001860:	fa01 f303 	lsl.w	r3, r1, r3
 8001864:	43db      	mvns	r3, r3
 8001866:	401a      	ands	r2, r3
                   (service_request << (uint32_t)interrupt_node));
 8001868:	7afb      	ldrb	r3, [r7, #11]
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001870:	431a      	orrs	r2, r3
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                   (service_request << (uint32_t)interrupt_node));
}
 8001878:	3714      	adds	r7, #20
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop

08001884 <XMC_USIC_Enable>:

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4a1b      	ldr	r2, [pc, #108]	; (80018fc <XMC_USIC_Enable+0x78>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d118      	bne.n	80018c6 <XMC_USIC_Enable+0x42>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
 8001894:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001898:	f7ff f8a8 	bl	80009ec <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC0));
 800189c:	bf00      	nop
 800189e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80018a2:	f7ff f8bf 	bl	8000a24 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d1f8      	bne.n	800189e <XMC_USIC_Enable+0x1a>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 80018ac:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80018b0:	f7fe ff2c 	bl	800070c <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC0));
 80018b4:	bf00      	nop
 80018b6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80018ba:	f7fe ff43 	bl	8000744 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d1f8      	bne.n	80018b6 <XMC_USIC_Enable+0x32>
 80018c4:	e017      	b.n	80018f6 <XMC_USIC_Enable+0x72>
#endif 
  }
#if defined(USIC1)  
  else if (usic == USIC1)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a0d      	ldr	r2, [pc, #52]	; (8001900 <XMC_USIC_Enable+0x7c>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d113      	bne.n	80018f6 <XMC_USIC_Enable+0x72>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
 80018ce:	480d      	ldr	r0, [pc, #52]	; (8001904 <XMC_USIC_Enable+0x80>)
 80018d0:	f7ff f88c 	bl	80009ec <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC1));
 80018d4:	bf00      	nop
 80018d6:	480b      	ldr	r0, [pc, #44]	; (8001904 <XMC_USIC_Enable+0x80>)
 80018d8:	f7ff f8a4 	bl	8000a24 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1f9      	bne.n	80018d6 <XMC_USIC_Enable+0x52>
#endif 
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 80018e2:	4808      	ldr	r0, [pc, #32]	; (8001904 <XMC_USIC_Enable+0x80>)
 80018e4:	f7fe ff12 	bl	800070c <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC1));
 80018e8:	bf00      	nop
 80018ea:	4806      	ldr	r0, [pc, #24]	; (8001904 <XMC_USIC_Enable+0x80>)
 80018ec:	f7fe ff2a 	bl	8000744 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1f9      	bne.n	80018ea <XMC_USIC_Enable+0x66>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40030008 	.word	0x40030008
 8001900:	48020008 	.word	0x48020008
 8001904:	10000080 	.word	0x10000080

08001908 <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8001910:	4b14      	ldr	r3, [pc, #80]	; (8001964 <_sbrk+0x5c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d102      	bne.n	800191e <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 8001918:	4b12      	ldr	r3, [pc, #72]	; (8001964 <_sbrk+0x5c>)
 800191a:	4a13      	ldr	r2, [pc, #76]	; (8001968 <_sbrk+0x60>)
 800191c:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 800191e:	4b11      	ldr	r3, [pc, #68]	; (8001964 <_sbrk+0x5c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3303      	adds	r3, #3
 8001928:	f023 0303 	bic.w	r3, r3, #3
 800192c:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 800192e:	4b0d      	ldr	r3, [pc, #52]	; (8001964 <_sbrk+0x5c>)
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4413      	add	r3, r2
 8001936:	4a0d      	ldr	r2, [pc, #52]	; (800196c <_sbrk+0x64>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d207      	bcs.n	800194c <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 800193c:	4b09      	ldr	r3, [pc, #36]	; (8001964 <_sbrk+0x5c>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4413      	add	r3, r2
 8001944:	4a07      	ldr	r2, [pc, #28]	; (8001964 <_sbrk+0x5c>)
 8001946:	6013      	str	r3, [r2, #0]
    return (base);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	e006      	b.n	800195a <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 800194c:	f005 f8f8 	bl	8006b40 <__errno>
 8001950:	4602      	mov	r2, r0
 8001952:	230c      	movs	r3, #12
 8001954:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 8001956:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 800195a:	4618      	mov	r0, r3
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	1fffc9c0 	.word	0x1fffc9c0
 8001968:	20000000 	.word	0x20000000
 800196c:	20005fc0 	.word	0x20005fc0

08001970 <_init>:

/* Init */
void _init(void)
{}
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <XMC_USIC_CH_WriteToTBUFTCI>:
 * XMC_USIC_CH_WriteToTBUF() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_WriteToTBUFTCI(XMC_USIC_CH_t *const channel,
                                             const uint16_t data,
                                             const uint32_t transmit_control_information)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	460b      	mov	r3, r1
 8001986:	607a      	str	r2, [r7, #4]
 8001988:	817b      	strh	r3, [r7, #10]
  channel->TBUF[transmit_control_information] = data;
 800198a:	8979      	ldrh	r1, [r7, #10]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	3220      	adds	r2, #32
 8001992:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <XMC_USIC_CH_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  channel->CCR |= event;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	431a      	orrs	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <XMC_USIC_CH_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~event;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	43db      	mvns	r3, r3
 80019d2:	401a      	ands	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop

080019e4 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80019f6:	b2db      	uxtb	r3, r3
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <XMC_USIC_CH_GetReceiveBufferStatus>:
 * can be read from RBUF.
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_USIC_CH_GetReceiveBufferStatus(XMC_USIC_CH_t *const channel)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a10:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <XMC_USIC_CH_TriggerServiceRequest>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t service_request_line)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a30:	409a      	lsls	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	669a      	str	r2, [r3, #104]	; 0x68
}
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <XMC_USIC_CH_TXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  channel->TBCTR |= event;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	431a      	orrs	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <XMC_USIC_CH_TXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  channel->TBCTR &= (uint32_t)~event;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	43db      	mvns	r3, r3
 8001a78:	401a      	ands	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop

08001a8c <XMC_USIC_CH_TXFIFO_PutDataHPCMode>:
 * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataHPCMode(XMC_USIC_CH_t *const channel,
                                                       const uint16_t data,
                                                       const uint32_t frame_length)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	460b      	mov	r3, r1
 8001a96:	607a      	str	r2, [r7, #4]
 8001a98:	817b      	strh	r3, [r7, #10]
  channel->IN[frame_length] = data;
 8001a9a:	8979      	ldrh	r1, [r7, #10]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	3260      	adds	r2, #96	; 0x60
 8001aa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <XMC_USIC_CH_TXFIFO_Flush>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001abe:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <XMC_USIC_CH_TXFIFO_IsFull>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001ada:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	bf14      	ite	ne
 8001ae2:	2301      	movne	r3, #1
 8001ae4:	2300      	moveq	r3, #0
 8001ae6:	b2db      	uxtb	r3, r3
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <XMC_USIC_CH_TXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001b02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	bf14      	ite	ne
 8001b0a:	2301      	movne	r3, #1
 8001b0c:	2300      	moveq	r3, #0
 8001b0e:	b2db      	uxtb	r3, r3
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <XMC_USIC_CH_RXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
  channel->RBCTR |= event;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <XMC_USIC_CH_RXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  channel->RBCTR &= (uint32_t)~event;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	43db      	mvns	r3, r3
 8001b54:	401a      	ands	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop

08001b68 <XMC_USIC_CH_RXFIFO_Flush>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b76:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001b92:	f003 0308 	and.w	r3, r3, #8
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	bf14      	ite	ne
 8001b9a:	2301      	movne	r3, #1
 8001b9c:	2300      	moveq	r3, #0
 8001b9e:	b2db      	uxtb	r3, r3
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <XMC_SPI_CH_SetTransmitMode>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Transmit()
 */
__STATIC_INLINE void XMC_SPI_CH_SetTransmitMode(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE_t mode)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
                  (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 8001bc0:	78fb      	ldrb	r3, [r7, #3]
 8001bc2:	019b      	lsls	r3, r3, #6
 8001bc4:	b2db      	uxtb	r3, r3
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Transmit()
 */
__STATIC_INLINE void XMC_SPI_CH_SetTransmitMode(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE_t mode)
{
  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	641a      	str	r2, [r3, #64]	; 0x40
                  (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
}
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop

08001bd8 <SPI_MASTER_Init>:

/*
 * This function initializes the SPI channel, based on UI configuration.
 */
SPI_MASTER_STATUS_t SPI_MASTER_Init(SPI_MASTER_t* const handle)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  SPI_MASTER_STATUS_t status;

  XMC_ASSERT("SPI_MASTER_Init:handle NULL" , (handle != NULL));

  /* Configure the port registers and data input registers of SPI channel */
  status = handle->config->fptr_spi_master_config();
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	4798      	blx	r3
 8001be8:	4603      	mov	r3, r0
 8001bea:	73fb      	strb	r3, [r7, #15]

  return status;
 8001bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop

08001bf8 <SPI_MASTER_Transmit>:

  return status;
}

SPI_MASTER_STATUS_t SPI_MASTER_Transmit(const SPI_MASTER_t *const handle, uint8_t* dataptr, uint32_t count)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
  SPI_MASTER_STATUS_t status;
  
   status = SPI_MASTER_STATUS_FAILURE;
 8001c04:	2301      	movs	r3, #1
 8001c06:	75fb      	strb	r3, [r7, #23]

#if (SPI_MASTER_INTERRUPT_TRANSMIT_MODE == 1U)
  if (handle->config->transmit_mode == SPI_MASTER_TRANSFER_MODE_INTERRUPT)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d106      	bne.n	8001c22 <SPI_MASTER_Transmit+0x2a>
  {
    status = SPI_MASTER_StartTransmitIRQ(handle, dataptr, count);
 8001c14:	68f8      	ldr	r0, [r7, #12]
 8001c16:	68b9      	ldr	r1, [r7, #8]
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	f000 f807 	bl	8001c2c <SPI_MASTER_StartTransmitIRQ>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	75fb      	strb	r3, [r7, #23]
  {
    status = SPI_MASTER_lStartTransmitPolling(handle, dataptr, count);
  }
#endif

  return status;
 8001c22:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3718      	adds	r7, #24
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <SPI_MASTER_StartTransmitIRQ>:
#if (SPI_MASTER_INTERRUPT_TRANSMIT_MODE == 1U)
/*
 * Transmit the number of data words specified.
 */
SPI_MASTER_STATUS_t SPI_MASTER_StartTransmitIRQ(const SPI_MASTER_t *const handle, uint8_t* dataptr, uint32_t count)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b088      	sub	sp, #32
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
  SPI_MASTER_STATUS_t status;
  uint32_t bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD; /* This is to support the word length 8 and 16.
 8001c38:	2301      	movs	r3, #1
 8001c3a:	61bb      	str	r3, [r7, #24]
                                                           Specify the number of bytes for the configured word length */
  SPI_MASTER_RUNTIME_t * runtime_handle;

  XMC_ASSERT("SPI_MASTER_StartTransmitIRQ:handle NULL" , (handle != NULL));

  status = SPI_MASTER_STATUS_MODE_MISMATCH;
 8001c3c:	2304      	movs	r3, #4
 8001c3e:	77fb      	strb	r3, [r7, #31]
  runtime_handle = handle->runtime;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	617b      	str	r3, [r7, #20]

  if (handle->config->transmit_mode == SPI_MASTER_TRANSFER_MODE_INTERRUPT)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d15c      	bne.n	8001d0c <SPI_MASTER_StartTransmitIRQ+0xe0>
  {
    /* Check whether SPI channel is free or not */
    if ((dataptr != NULL) && (count > 0U))
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d057      	beq.n	8001d08 <SPI_MASTER_StartTransmitIRQ+0xdc>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d054      	beq.n	8001d08 <SPI_MASTER_StartTransmitIRQ+0xdc>
    {
      status = SPI_MASTER_STATUS_BUSY;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	77fb      	strb	r3, [r7, #31]
      /*Check data pointer is valid or not*/
      if (false == runtime_handle->tx_busy)
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	f083 0301 	eor.w	r3, r3, #1
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d048      	beq.n	8001d06 <SPI_MASTER_StartTransmitIRQ+0xda>
      {
        if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2b08      	cmp	r3, #8
 8001c7c:	d901      	bls.n	8001c82 <SPI_MASTER_StartTransmitIRQ+0x56>
        {
          bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
 8001c7e:	2302      	movs	r3, #2
 8001c80:	61bb      	str	r3, [r7, #24]
        }

        /* Obtain the address of data, size of data */
        runtime_handle->tx_data = dataptr;
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	68ba      	ldr	r2, [r7, #8]
 8001c86:	619a      	str	r2, [r3, #24]
        runtime_handle->tx_data_count = (uint32_t)count << (bytes_per_word - 1U);
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	fa03 f202 	lsl.w	r2, r3, r2
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	605a      	str	r2, [r3, #4]
        /* Initialize to first index and set the busy flag */
        runtime_handle->tx_data_index = 0U;
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	609a      	str	r2, [r3, #8]
        runtime_handle->tx_busy = true;
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f883 2020 	strb.w	r2, [r3, #32]

        /* Enable the transmit buffer event */
        if ((uint32_t)handle->config->tx_fifo_size > 0U)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d00c      	beq.n	8001ccc <SPI_MASTER_StartTransmitIRQ+0xa0>
        {
          /* Flush the Transmit FIFO */
          XMC_USIC_CH_TXFIFO_Flush(handle->channel);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff fefa 	bl	8001ab0 <XMC_USIC_CH_TXFIFO_Flush>
          XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001cc6:	f7ff febb 	bl	8001a40 <XMC_USIC_CH_TXFIFO_EnableEvent>
 8001cca:	e006      	b.n	8001cda <SPI_MASTER_StartTransmitIRQ+0xae>
        }
        else
        {
          XMC_USIC_CH_EnableEvent(handle->channel,(uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cd6:	f7ff fe63 	bl	80019a0 <XMC_USIC_CH_EnableEvent>
        }
        XMC_SPI_CH_SetTransmitMode(handle->channel, runtime_handle->spi_master_mode);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	7f1b      	ldrb	r3, [r3, #28]
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	4610      	mov	r0, r2
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	f7ff ff60 	bl	8001bac <XMC_SPI_CH_SetTransmitMode>
        status = SPI_MASTER_STATUS_SUCCESS;
 8001cec:	2300      	movs	r3, #0
 8001cee:	77fb      	strb	r3, [r7, #31]

        /* Trigger the transmit buffer interrupt */
        XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)handle->config->tx_sr);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8001cfc:	4610      	mov	r0, r2
 8001cfe:	4619      	mov	r1, r3
 8001d00:	f7ff fe8e 	bl	8001a20 <XMC_USIC_CH_TriggerServiceRequest>
    /* Check whether SPI channel is free or not */
    if ((dataptr != NULL) && (count > 0U))
    {
      status = SPI_MASTER_STATUS_BUSY;
      /*Check data pointer is valid or not*/
      if (false == runtime_handle->tx_busy)
 8001d04:	e002      	b.n	8001d0c <SPI_MASTER_StartTransmitIRQ+0xe0>
 8001d06:	e001      	b.n	8001d0c <SPI_MASTER_StartTransmitIRQ+0xe0>
        XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)handle->config->tx_sr);
      }
    }
    else
    {
      status = SPI_MASTER_STATUS_BUFFER_INVALID;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	77fb      	strb	r3, [r7, #31]
    }
  }
  return status;
 8001d0c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3720      	adds	r7, #32
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop

08001d18 <SPI_MASTER_Transfer>:
 */
SPI_MASTER_STATUS_t SPI_MASTER_Transfer(const SPI_MASTER_t *const handle,
                                        uint8_t* tx_dataptr,
                                        uint8_t* rx_dataptr,
                                        uint32_t count)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
 8001d24:	603b      	str	r3, [r7, #0]
  SPI_MASTER_STATUS_t status;
  SPI_MASTER_RUNTIME_t * runtime_handle;

  XMC_ASSERT("SPI_MASTER_Transfer:handle NULL" , (handle != NULL));

  status = SPI_MASTER_STATUS_BUSY;
 8001d26:	2302      	movs	r3, #2
 8001d28:	75fb      	strb	r3, [r7, #23]
  runtime_handle = handle->runtime;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	613b      	str	r3, [r7, #16]

  if (XMC_SPI_CH_MODE_STANDARD == runtime_handle->spi_master_mode)
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	7f1b      	ldrb	r3, [r3, #28]
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d13f      	bne.n	8001dba <SPI_MASTER_Transfer+0xa2>
  {
    /* Check whether SPI channel is free or not */
    if ((tx_dataptr != NULL) && (rx_dataptr != NULL) && (count > 0U))
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d038      	beq.n	8001db2 <SPI_MASTER_Transfer+0x9a>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d035      	beq.n	8001db2 <SPI_MASTER_Transfer+0x9a>
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d032      	beq.n	8001db2 <SPI_MASTER_Transfer+0x9a>
    {
      /*Check data pointer is valid or not*/
      if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	7fdb      	ldrb	r3, [r3, #31]
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	f083 0301 	eor.w	r3, r3, #1
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d029      	beq.n	8001db0 <SPI_MASTER_Transfer+0x98>
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	f083 0301 	eor.w	r3, r3, #1
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d020      	beq.n	8001db0 <SPI_MASTER_Transfer+0x98>
      {
        runtime_handle->rx_busy = true;
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	2201      	movs	r2, #1
 8001d72:	77da      	strb	r2, [r3, #31]
        runtime_handle->rx_data = rx_dataptr;
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	615a      	str	r2, [r3, #20]
        runtime_handle->tx_data = tx_dataptr;
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	68ba      	ldr	r2, [r7, #8]
 8001d7e:	619a      	str	r2, [r3, #24]
        runtime_handle->tx_data_count = count;
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	605a      	str	r2, [r3, #4]
        runtime_handle->tx_data_dummy = false;
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        runtime_handle->rx_data_dummy = false;
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

#if (SPI_MASTER_INTERRUPT_RECEIVE_MODE == 1U)
        if (handle->config->receive_mode == SPI_MASTER_TRANSFER_MODE_INTERRUPT)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d106      	bne.n	8001db0 <SPI_MASTER_Transfer+0x98>
        {
          status = SPI_MASTER_lReceiveIRQ(handle, count);
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	6839      	ldr	r1, [r7, #0]
 8001da6:	f000 f8f3 	bl	8001f90 <SPI_MASTER_lReceiveIRQ>
 8001daa:	4603      	mov	r3, r0
 8001dac:	75fb      	strb	r3, [r7, #23]
  {
    /* Check whether SPI channel is free or not */
    if ((tx_dataptr != NULL) && (rx_dataptr != NULL) && (count > 0U))
    {
      /*Check data pointer is valid or not*/
      if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
 8001dae:	e003      	b.n	8001db8 <SPI_MASTER_Transfer+0xa0>
 8001db0:	e002      	b.n	8001db8 <SPI_MASTER_Transfer+0xa0>
#endif
      }
    }
    else
    {
      status = SPI_MASTER_STATUS_BUFFER_INVALID;
 8001db2:	2303      	movs	r3, #3
 8001db4:	75fb      	strb	r3, [r7, #23]
 8001db6:	e002      	b.n	8001dbe <SPI_MASTER_Transfer+0xa6>
 8001db8:	e001      	b.n	8001dbe <SPI_MASTER_Transfer+0xa6>
    }
  }
  else
  {
    status = SPI_MASTER_STATUS_FAILURE;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <SPI_MASTER_lTransmitHandler>:
 * Transmit interrupt handler for the APP.
 * This is a common interrupt handling function called for different instances of the APP.
 *
 */
void SPI_MASTER_lTransmitHandler(const SPI_MASTER_t * const handle)
{
 8001dc8:	b590      	push	{r4, r7, lr}
 8001dca:	b087      	sub	sp, #28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint16_t data; /* Data to be loaded into the TBUF */
  uint32_t bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD; /* This is to support the word length 8 and 16.*/
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	613b      	str	r3, [r7, #16]
  SPI_MASTER_RUNTIME_t * runtime_handle = handle->runtime;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	60fb      	str	r3, [r7, #12]

  if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2b08      	cmp	r3, #8
 8001de2:	d901      	bls.n	8001de8 <SPI_MASTER_lTransmitHandler+0x20>
  {
    bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
 8001de4:	2302      	movs	r3, #2
 8001de6:	613b      	str	r3, [r7, #16]
  }

  if (runtime_handle->tx_data_index < runtime_handle->tx_data_count)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	f080 808b 	bcs.w	8001f0c <SPI_MASTER_lTransmitHandler+0x144>
  {
    data = 0U;
 8001df6:	2300      	movs	r3, #0
 8001df8:	82fb      	strh	r3, [r7, #22]
    /*When Transmit FIFO is enabled*/
    if ((uint32_t)handle->config->tx_fifo_size > 0U)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d04b      	beq.n	8001e9e <SPI_MASTER_lTransmitHandler+0xd6>
    {
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 8001e06:	e03e      	b.n	8001e86 <SPI_MASTER_lTransmitHandler+0xbe>
      {
        if (runtime_handle->tx_data_index < runtime_handle->tx_data_count)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d236      	bcs.n	8001e82 <SPI_MASTER_lTransmitHandler+0xba>
        {
          /*Load the FIFO byte by byte till either FIFO is full or all data is loaded*/
          if (runtime_handle->tx_data_dummy == true)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d00b      	beq.n	8001e38 <SPI_MASTER_lTransmitHandler+0x70>
          {
            XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, 0xFFFFU, (uint32_t)runtime_handle->spi_master_mode);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	7f1b      	ldrb	r3, [r3, #28]
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	4610      	mov	r0, r2
 8001e2c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001e30:	461a      	mov	r2, r3
 8001e32:	f7ff fe2b 	bl	8001a8c <XMC_USIC_CH_TXFIFO_PutDataHPCMode>
 8001e36:	e01d      	b.n	8001e74 <SPI_MASTER_lTransmitHandler+0xac>
          }
          else
          {
            if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d107      	bne.n	8001e4e <SPI_MASTER_lTransmitHandler+0x86>
            {
              data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	699a      	ldr	r2, [r3, #24]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	4413      	add	r3, r2
 8001e48:	881b      	ldrh	r3, [r3, #0]
 8001e4a:	82fb      	strh	r3, [r7, #22]
 8001e4c:	e006      	b.n	8001e5c <SPI_MASTER_lTransmitHandler+0x94>
            }
            else
            {
              data = runtime_handle->tx_data[runtime_handle->tx_data_index];
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	699a      	ldr	r2, [r3, #24]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	4413      	add	r3, r2
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	82fb      	strh	r3, [r7, #22]
            }
            XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	7f1b      	ldrb	r3, [r3, #28]
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	461c      	mov	r4, r3
 8001e68:	8afb      	ldrh	r3, [r7, #22]
 8001e6a:	4610      	mov	r0, r2
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4622      	mov	r2, r4
 8001e70:	f7ff fe0c 	bl	8001a8c <XMC_USIC_CH_TXFIFO_PutDataHPCMode>
          }
          (runtime_handle->tx_data_index)+= bytes_per_word;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	441a      	add	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	e001      	b.n	8001e86 <SPI_MASTER_lTransmitHandler+0xbe>
        }
        else
        {
          break;
 8001e82:	bf00      	nop
 8001e84:	e080      	b.n	8001f88 <SPI_MASTER_lTransmitHandler+0x1c0>
    data = 0U;
    /*When Transmit FIFO is enabled*/
    if ((uint32_t)handle->config->tx_fifo_size > 0U)
    {
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff fe1e 	bl	8001acc <XMC_USIC_CH_TXFIFO_IsFull>
 8001e90:	4603      	mov	r3, r0
 8001e92:	f083 0301 	eor.w	r3, r3, #1
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1b5      	bne.n	8001e08 <SPI_MASTER_lTransmitHandler+0x40>
 8001e9c:	e074      	b.n	8001f88 <SPI_MASTER_lTransmitHandler+0x1c0>
        }
      }
    }
    else/*When Transmit FIFO is disabled*/
    {
      if (runtime_handle->tx_data_dummy == true)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00b      	beq.n	8001ec2 <SPI_MASTER_lTransmitHandler+0xfa>
      {
        XMC_USIC_CH_WriteToTBUFTCI(handle->channel, 0xFFFFU, (uint32_t)runtime_handle->spi_master_mode);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	7f1b      	ldrb	r3, [r3, #28]
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	4610      	mov	r0, r2
 8001eb6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001eba:	461a      	mov	r2, r3
 8001ebc:	f7ff fd5e 	bl	800197c <XMC_USIC_CH_WriteToTBUFTCI>
 8001ec0:	e01d      	b.n	8001efe <SPI_MASTER_lTransmitHandler+0x136>
      }
      else
      {
        if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d107      	bne.n	8001ed8 <SPI_MASTER_lTransmitHandler+0x110>
        {
          data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	699a      	ldr	r2, [r3, #24]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	881b      	ldrh	r3, [r3, #0]
 8001ed4:	82fb      	strh	r3, [r7, #22]
 8001ed6:	e006      	b.n	8001ee6 <SPI_MASTER_lTransmitHandler+0x11e>
        }
        else
        {
          data = runtime_handle->tx_data[runtime_handle->tx_data_index];
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	699a      	ldr	r2, [r3, #24]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	82fb      	strh	r3, [r7, #22]
        }
        XMC_USIC_CH_WriteToTBUFTCI(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	7f1b      	ldrb	r3, [r3, #28]
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	461c      	mov	r4, r3
 8001ef2:	8afb      	ldrh	r3, [r7, #22]
 8001ef4:	4610      	mov	r0, r2
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4622      	mov	r2, r4
 8001efa:	f7ff fd3f 	bl	800197c <XMC_USIC_CH_WriteToTBUFTCI>
      }
      (runtime_handle->tx_data_index)+= bytes_per_word;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	689a      	ldr	r2, [r3, #8]
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	441a      	add	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	609a      	str	r2, [r3, #8]
 8001f0a:	e03d      	b.n	8001f88 <SPI_MASTER_lTransmitHandler+0x1c0>
    }
  }
  else
  {
    if (XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel) == true)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff fdef 	bl	8001af4 <XMC_USIC_CH_TXFIFO_IsEmpty>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d035      	beq.n	8001f88 <SPI_MASTER_lTransmitHandler+0x1c0>
    {
      /* Clear the flag */
      if ((uint32_t)handle->config->tx_fifo_size > 0U)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d007      	beq.n	8001f38 <SPI_MASTER_lTransmitHandler+0x170>
      {
        /* Clear the transmit FIFO event */
        XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001f32:	f7ff fd97 	bl	8001a64 <XMC_USIC_CH_TXFIFO_DisableEvent>
 8001f36:	e006      	b.n	8001f46 <SPI_MASTER_lTransmitHandler+0x17e>
      }
      else
      {
        /* Clear the standard transmit event */
        XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f42:	f7ff fd3d 	bl	80019c0 <XMC_USIC_CH_DisableEvent>
      }

      /* Wait for the transmit buffer to be free to ensure that all data is transmitted */
      while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001f46:	bf00      	nop
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff fd49 	bl	80019e4 <XMC_USIC_CH_GetTransmitBufferStatus>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b80      	cmp	r3, #128	; 0x80
 8001f56:	d0f7      	beq.n	8001f48 <SPI_MASTER_lTransmitHandler+0x180>
      {

      }

      /* All data is transmitted */
      runtime_handle->tx_busy = false;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 2020 	strb.w	r2, [r3, #32]
      runtime_handle->tx_data = NULL;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2200      	movs	r2, #0
 8001f64:	619a      	str	r2, [r3, #24]

      if ((handle->config->tx_cbhandler != NULL) && (runtime_handle->rx_busy == false))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d00b      	beq.n	8001f88 <SPI_MASTER_lTransmitHandler+0x1c0>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	7fdb      	ldrb	r3, [r3, #31]
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	f083 0301 	eor.w	r3, r3, #1
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d003      	beq.n	8001f88 <SPI_MASTER_lTransmitHandler+0x1c0>
      {
        /* Execute the callback function provided in the SPI_MASTER APP UI */
        handle->config->tx_cbhandler();
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f86:	4798      	blx	r3
      }
    }
  }
}
 8001f88:	371c      	adds	r7, #28
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd90      	pop	{r4, r7, pc}
 8001f8e:	bf00      	nop

08001f90 <SPI_MASTER_lReceiveIRQ>:
#endif

#if (SPI_MASTER_INTERRUPT_RECEIVE_MODE == 1U)

SPI_MASTER_STATUS_t SPI_MASTER_lReceiveIRQ(const SPI_MASTER_t *const handle, uint32_t count)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]

  SPI_MASTER_STATUS_t status;
  SPI_MASTER_RUNTIME_t * runtime_handle;
  uint32_t bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD;; /* This is to support the word length 8 and 16.
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	617b      	str	r3, [r7, #20]
                                                            Specify the number of bytes for the configured word length*/

  runtime_handle = handle->runtime;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	613b      	str	r3, [r7, #16]
  runtime_handle->rx_data_index = 0U;
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	611a      	str	r2, [r3, #16]

  if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2b08      	cmp	r3, #8
 8001fb2:	d901      	bls.n	8001fb8 <SPI_MASTER_lReceiveIRQ+0x28>
  {
    bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	617b      	str	r3, [r7, #20]
  }

  /* If no active reception in progress, obtain the address of data buffer and number of data bytes to be received */
  runtime_handle->rx_data_count = (uint32_t)count << (bytes_per_word - 1U);
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	fa03 f202 	lsl.w	r2, r3, r2
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	60da      	str	r2, [r3, #12]

  /* Check if FIFO is enabled */
  if ((uint32_t)handle->config->rx_fifo_size > 0U)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d017      	beq.n	8002004 <SPI_MASTER_lReceiveIRQ+0x74>
  {
    /* Clear the receive FIFO */
    XMC_USIC_CH_RXFIFO_Flush(handle->channel);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff fdc5 	bl	8001b68 <XMC_USIC_CH_RXFIFO_Flush>
    SPI_MASTER_lStdRBUFFlush(handle->channel);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f000 f996 	bl	8002314 <SPI_MASTER_lStdRBUFFlush>

    /* Configure the FIFO trigger limit based on the required data size */
    SPI_MASTER_lReconfigureRxFIFO(handle, runtime_handle->rx_data_count);
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	4619      	mov	r1, r3
 8001ff0:	f000 f958 	bl	80022a4 <SPI_MASTER_lReconfigureRxFIFO>

    /* Enable the receive FIFO events */
    XMC_USIC_CH_RXFIFO_EnableEvent(handle->channel,(uint32_t)SPI_MASTER_FIFO_RECEIVE_EVENT);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8001ffe:	f7ff fd8d 	bl	8001b1c <XMC_USIC_CH_RXFIFO_EnableEvent>
 8002002:	e00b      	b.n	800201c <SPI_MASTER_lReceiveIRQ+0x8c>
  }
  else
  {
    /* Flush the RBUF0 and RBUF1 */
    SPI_MASTER_lStdRBUFFlush(handle->channel);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f000 f983 	bl	8002314 <SPI_MASTER_lStdRBUFFlush>

    /* Enable the standard receive events */
    XMC_USIC_CH_EnableEvent(handle->channel, (uint32_t)SPI_MASTER_RECEIVE_EVENT);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8002018:	f7ff fcc2 	bl	80019a0 <XMC_USIC_CH_EnableEvent>
  }
  /* Call the transmit, to receive the data synchronously */
  status = SPI_MASTER_Transmit(handle, runtime_handle->tx_data, runtime_handle->tx_data_count);
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	699a      	ldr	r2, [r3, #24]
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	4611      	mov	r1, r2
 8002028:	461a      	mov	r2, r3
 800202a:	f7ff fde5 	bl	8001bf8 <SPI_MASTER_Transmit>
 800202e:	4603      	mov	r3, r0
 8002030:	73fb      	strb	r3, [r7, #15]

  return status;
 8002032:	7bfb      	ldrb	r3, [r7, #15]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <SPI_MASTER_lReceiveHandler>:
/*
 * Receive interrupt handler for the APP.
 * This is a common interrupt handling function for different instances of the SPI_MASTER APP.
 */
void SPI_MASTER_lReceiveHandler(const SPI_MASTER_t * const handle)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint16_t data; /* Data to be loaded into the TBUF */
  uint32_t bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD; /* This is to support the word length 8 and 16. */
 8002044:	2301      	movs	r3, #1
 8002046:	617b      	str	r3, [r7, #20]
  SPI_MASTER_RUNTIME_t * runtime_handle = handle->runtime;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	613b      	str	r3, [r7, #16]

  data = 0U;
 800204e:	2300      	movs	r3, #0
 8002050:	81fb      	strh	r3, [r7, #14]

  if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2b08      	cmp	r3, #8
 800205a:	d901      	bls.n	8002060 <SPI_MASTER_lReceiveHandler+0x24>
  {
    bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
 800205c:	2302      	movs	r3, #2
 800205e:	617b      	str	r3, [r7, #20]
  }

  if ((uint32_t)handle->config->rx_fifo_size > 0U)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8002068:	2b00      	cmp	r3, #0
 800206a:	d01d      	beq.n	80020a8 <SPI_MASTER_lReceiveHandler+0x6c>
  {
    /* read the FIFO */
    SPI_MASTER_lFIFORead(handle, bytes_per_word);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	6979      	ldr	r1, [r7, #20]
 8002070:	f000 f8b6 	bl	80021e0 <SPI_MASTER_lFIFORead>
    /* Reconfigure the RXFIFO trigger limit based on pending receive bytes */
    if ((runtime_handle->rx_data_count - runtime_handle->rx_data_index) <= (1UL << (handle->config->rx_fifo_size - 1)))
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	68da      	ldr	r2, [r3, #12]
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	1ad2      	subs	r2, r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8002086:	3b01      	subs	r3, #1
 8002088:	2101      	movs	r1, #1
 800208a:	fa01 f303 	lsl.w	r3, r1, r3
 800208e:	429a      	cmp	r2, r3
 8002090:	f200 80a2 	bhi.w	80021d8 <SPI_MASTER_lReceiveHandler+0x19c>
    {
      SPI_MASTER_lReconfigureRxFIFO(handle, (uint32_t)(runtime_handle->rx_data_count - runtime_handle->rx_data_index));
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	68da      	ldr	r2, [r3, #12]
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	4619      	mov	r1, r3
 80020a2:	f000 f8ff 	bl	80022a4 <SPI_MASTER_lReconfigureRxFIFO>
 80020a6:	e097      	b.n	80021d8 <SPI_MASTER_lReceiveHandler+0x19c>
    }
  }
  else
  {
    /* When RxFIFO is disabled */
    if ((XMC_USIC_CH_GetReceiveBufferStatus(handle->channel) & (uint32_t)XMC_USIC_CH_RBUF_STATUS_DATA_VALID0) != 0U )
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff fca9 	bl	8001a04 <XMC_USIC_CH_GetReceiveBufferStatus>
 80020b2:	4603      	mov	r3, r0
 80020b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d028      	beq.n	800210e <SPI_MASTER_lReceiveHandler+0xd2>
    {
      if (runtime_handle->rx_data_index < runtime_handle->rx_data_count)
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	691a      	ldr	r2, [r3, #16]
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d222      	bcs.n	800210e <SPI_MASTER_lReceiveHandler+0xd2>
      {
        data = XMC_SPI_CH_GetReceivedData(handle->channel);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff f9ad 	bl	800142c <XMC_SPI_CH_GetReceivedData>
 80020d2:	4603      	mov	r3, r0
 80020d4:	81fb      	strh	r3, [r7, #14]

        runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	695a      	ldr	r2, [r3, #20]
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	4413      	add	r3, r2
 80020e0:	89fa      	ldrh	r2, [r7, #14]
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	701a      	strb	r2, [r3, #0]

        if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d10a      	bne.n	8002102 <SPI_MASTER_lReceiveHandler+0xc6>
        {
          runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	695a      	ldr	r2, [r3, #20]
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	3301      	adds	r3, #1
 80020f6:	4413      	add	r3, r2
 80020f8:	89fa      	ldrh	r2, [r7, #14]
 80020fa:	0a12      	lsrs	r2, r2, #8
 80020fc:	b292      	uxth	r2, r2
 80020fe:	b2d2      	uxtb	r2, r2
 8002100:	701a      	strb	r2, [r3, #0]
        }

        (runtime_handle->rx_data_index)+= bytes_per_word;
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	691a      	ldr	r2, [r3, #16]
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	441a      	add	r2, r3
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	611a      	str	r2, [r3, #16]
      }
    }
    if ((XMC_USIC_CH_GetReceiveBufferStatus(handle->channel) & (uint32_t)XMC_USIC_CH_RBUF_STATUS_DATA_VALID1) != 0U)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff fc76 	bl	8001a04 <XMC_USIC_CH_GetReceiveBufferStatus>
 8002118:	4603      	mov	r3, r0
 800211a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d028      	beq.n	8002174 <SPI_MASTER_lReceiveHandler+0x138>
    {
      if (runtime_handle->rx_data_index < runtime_handle->rx_data_count)
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	691a      	ldr	r2, [r3, #16]
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	429a      	cmp	r2, r3
 800212c:	d222      	bcs.n	8002174 <SPI_MASTER_lReceiveHandler+0x138>
      {
        data = XMC_SPI_CH_GetReceivedData(handle->channel);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff f97a 	bl	800142c <XMC_SPI_CH_GetReceivedData>
 8002138:	4603      	mov	r3, r0
 800213a:	81fb      	strh	r3, [r7, #14]

        runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	695a      	ldr	r2, [r3, #20]
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	4413      	add	r3, r2
 8002146:	89fa      	ldrh	r2, [r7, #14]
 8002148:	b2d2      	uxtb	r2, r2
 800214a:	701a      	strb	r2, [r3, #0]

        if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	2b02      	cmp	r3, #2
 8002150:	d10a      	bne.n	8002168 <SPI_MASTER_lReceiveHandler+0x12c>
        {
          runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	695a      	ldr	r2, [r3, #20]
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	3301      	adds	r3, #1
 800215c:	4413      	add	r3, r2
 800215e:	89fa      	ldrh	r2, [r7, #14]
 8002160:	0a12      	lsrs	r2, r2, #8
 8002162:	b292      	uxth	r2, r2
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	701a      	strb	r2, [r3, #0]
        }

        (runtime_handle->rx_data_index)+= bytes_per_word;
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	691a      	ldr	r2, [r3, #16]
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	441a      	add	r2, r3
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	611a      	str	r2, [r3, #16]
      }
    }

    if (runtime_handle->rx_data_index == runtime_handle->rx_data_count)
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	691a      	ldr	r2, [r3, #16]
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	429a      	cmp	r2, r3
 800217e:	d12b      	bne.n	80021d8 <SPI_MASTER_lReceiveHandler+0x19c>
    {
      /* Disable both standard receive and alternative receive FIFO events */
      if ((uint32_t)handle->config->rx_fifo_size > 0U)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8002188:	2b00      	cmp	r3, #0
 800218a:	d007      	beq.n	800219c <SPI_MASTER_lReceiveHandler+0x160>
      {
        /* Enable the receive FIFO events */
        XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,(uint32_t)SPI_MASTER_FIFO_RECEIVE_EVENT);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4618      	mov	r0, r3
 8002192:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8002196:	f7ff fcd3 	bl	8001b40 <XMC_USIC_CH_RXFIFO_DisableEvent>
 800219a:	e006      	b.n	80021aa <SPI_MASTER_lReceiveHandler+0x16e>
      }
      else
      {
        XMC_SPI_CH_DisableEvent(handle->channel, (uint32_t)SPI_MASTER_RECEIVE_EVENT);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80021a6:	f7ff f95b 	bl	8001460 <XMC_SPI_CH_DisableEvent>
      }
      /* Reception complete */
      runtime_handle->rx_busy = false;
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	2200      	movs	r2, #0
 80021ae:	77da      	strb	r2, [r3, #31]
      runtime_handle->tx_data_dummy = false;
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      runtime_handle->rx_data_dummy = true;
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      runtime_handle->rx_data = NULL;
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	2200      	movs	r2, #0
 80021c4:	615a      	str	r2, [r3, #20]

      if (handle->config->rx_cbhandler != NULL)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d003      	beq.n	80021d8 <SPI_MASTER_lReceiveHandler+0x19c>
      {
        /* Execute the 'End of reception' callback function */
        handle->config->rx_cbhandler();
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021d6:	4798      	blx	r3
      }
    }
  }
}
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop

080021e0 <SPI_MASTER_lFIFORead>:

/*
 * Read the data from FIFO until it becomes empty.
 */
void SPI_MASTER_lFIFORead(const SPI_MASTER_t * const handle, const uint32_t bytes_per_word)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  SPI_MASTER_RUNTIME_t * runtime_handle;
  uint16_t data;

  runtime_handle = handle->runtime;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	60fb      	str	r3, [r7, #12]
  data = 0U;
 80021f0:	2300      	movs	r3, #0
 80021f2:	817b      	strh	r3, [r7, #10]

  /* When Receive FIFO is enabled*/
  while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
 80021f4:	e047      	b.n	8002286 <SPI_MASTER_lFIFORead+0xa6>
  {
    if (runtime_handle->rx_data_index < runtime_handle->rx_data_count)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	691a      	ldr	r2, [r3, #16]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d222      	bcs.n	8002248 <SPI_MASTER_lFIFORead+0x68>
    {
      data = XMC_SPI_CH_GetReceivedData(handle->channel);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff f910 	bl	800142c <XMC_SPI_CH_GetReceivedData>
 800220c:	4603      	mov	r3, r0
 800220e:	817b      	strh	r3, [r7, #10]
      runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	695a      	ldr	r2, [r3, #20]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	4413      	add	r3, r2
 800221a:	897a      	ldrh	r2, [r7, #10]
 800221c:	b2d2      	uxtb	r2, r2
 800221e:	701a      	strb	r2, [r3, #0]

      if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	2b02      	cmp	r3, #2
 8002224:	d10a      	bne.n	800223c <SPI_MASTER_lFIFORead+0x5c>
      {
        runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	695a      	ldr	r2, [r3, #20]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	3301      	adds	r3, #1
 8002230:	4413      	add	r3, r2
 8002232:	897a      	ldrh	r2, [r7, #10]
 8002234:	0a12      	lsrs	r2, r2, #8
 8002236:	b292      	uxth	r2, r2
 8002238:	b2d2      	uxtb	r2, r2
 800223a:	701a      	strb	r2, [r3, #0]
      }
      (runtime_handle->rx_data_index)+= bytes_per_word;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	691a      	ldr	r2, [r3, #16]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	441a      	add	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	611a      	str	r2, [r3, #16]
    }

    if (runtime_handle->rx_data_index == runtime_handle->rx_data_count)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	691a      	ldr	r2, [r3, #16]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	429a      	cmp	r2, r3
 8002252:	d118      	bne.n	8002286 <SPI_MASTER_lFIFORead+0xa6>
    {
      /*Reception complete*/
      runtime_handle->rx_busy = false;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	77da      	strb	r2, [r3, #31]
      runtime_handle->tx_data_dummy = false;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      /*Disable both standard receive and alternative receive FIFO events*/
      XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,(uint32_t)SPI_MASTER_FIFO_RECEIVE_EVENT);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 800226c:	f7ff fc68 	bl	8001b40 <XMC_USIC_CH_RXFIFO_DisableEvent>
      if (handle->config->rx_cbhandler != NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002276:	2b00      	cmp	r3, #0
 8002278:	d004      	beq.n	8002284 <SPI_MASTER_lFIFORead+0xa4>
      {
        /* Execute the 'End of reception' callback function */
        handle->config->rx_cbhandler();
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002280:	4798      	blx	r3
      }
      break;
 8002282:	e00b      	b.n	800229c <SPI_MASTER_lFIFORead+0xbc>
 8002284:	e00a      	b.n	800229c <SPI_MASTER_lFIFORead+0xbc>

  runtime_handle = handle->runtime;
  data = 0U;

  /* When Receive FIFO is enabled*/
  while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff fc7a 	bl	8001b84 <XMC_USIC_CH_RXFIFO_IsEmpty>
 8002290:	4603      	mov	r3, r0
 8002292:	f083 0301 	eor.w	r3, r3, #1
 8002296:	b2db      	uxtb	r3, r3
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1ac      	bne.n	80021f6 <SPI_MASTER_lFIFORead+0x16>
        handle->config->rx_cbhandler();
      }
      break;
    }
  }
}
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop

080022a4 <SPI_MASTER_lReconfigureRxFIFO>:

/*
 * This function configures the FIFO settings
 */
static void SPI_MASTER_lReconfigureRxFIFO(const SPI_MASTER_t * const handle, uint32_t data_size)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  uint32_t fifo_size;
  uint32_t ret_limit_val;

  if (((uint32_t)handle->config->rx_fifo_size > 0U) && (data_size > 0U))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d028      	beq.n	800230c <SPI_MASTER_lReconfigureRxFIFO+0x68>
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d025      	beq.n	800230c <SPI_MASTER_lReconfigureRxFIFO+0x68>
  {
	fifo_size = 1UL << (handle->config->rx_fifo_size - 1);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80022c8:	3b01      	subs	r3, #1
 80022ca:	2201      	movs	r2, #1
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	60bb      	str	r3, [r7, #8]

    if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d902      	bls.n	80022e2 <SPI_MASTER_lReconfigureRxFIFO+0x3e>
	{
	  /* Data size is divided by 2, to change the trigger limit according the word length */
	  data_size = (uint32_t)data_size >> 1U;
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	085b      	lsrs	r3, r3, #1
 80022e0:	603b      	str	r3, [r7, #0]
	}

	/*If data size is more than FIFO size, configure the limit to the FIFO size*/
	if (data_size <= fifo_size)
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d803      	bhi.n	80022f2 <SPI_MASTER_lReconfigureRxFIFO+0x4e>
	{
	  ret_limit_val = data_size - 1U;
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	3b01      	subs	r3, #1
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	e001      	b.n	80022f6 <SPI_MASTER_lReconfigureRxFIFO+0x52>
	}
	else
	{
	  ret_limit_val = fifo_size;
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	60fb      	str	r3, [r7, #12]
	}

	/*Set the limit value*/
	XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel, handle->config->rx_fifo_size, ret_limit_val);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8002302:	4610      	mov	r0, r2
 8002304:	4619      	mov	r1, r3
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	f7ff fa42 	bl	8001790 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>
  }
}
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop

08002314 <SPI_MASTER_lStdRBUFFlush>:

/*
 * Clears the receive buffers
 */
static void SPI_MASTER_lStdRBUFFlush(XMC_USIC_CH_t *const channel)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Clear RBF0 */
  (void)XMC_SPI_CH_GetReceivedData(channel);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f7ff f885 	bl	800142c <XMC_SPI_CH_GetReceivedData>
  /* Clear RBF1 */
  (void)XMC_SPI_CH_GetReceivedData(channel);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7ff f882 	bl	800142c <XMC_SPI_CH_GetReceivedData>
}
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop

08002330 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002334:	4b04      	ldr	r3, [pc, #16]	; (8002348 <__NVIC_GetPriorityGrouping+0x18>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800233c:	0a1b      	lsrs	r3, r3, #8
}
 800233e:	4618      	mov	r0, r3
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	e000ed00 	.word	0xe000ed00

0800234c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235a:	2b00      	cmp	r3, #0
 800235c:	db0b      	blt.n	8002376 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800235e:	4908      	ldr	r1, [pc, #32]	; (8002380 <__NVIC_EnableIRQ+0x34>)
 8002360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002364:	095b      	lsrs	r3, r3, #5
 8002366:	79fa      	ldrb	r2, [r7, #7]
 8002368:	f002 021f 	and.w	r2, r2, #31
 800236c:	2001      	movs	r0, #1
 800236e:	fa00 f202 	lsl.w	r2, r0, r2
 8002372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	e000e100 	.word	0xe000e100

08002384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	4603      	mov	r3, r0
 800238c:	6039      	str	r1, [r7, #0]
 800238e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002394:	2b00      	cmp	r3, #0
 8002396:	db0a      	blt.n	80023ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002398:	490d      	ldr	r1, [pc, #52]	; (80023d0 <__NVIC_SetPriority+0x4c>)
 800239a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	b2d2      	uxtb	r2, r2
 80023a2:	0092      	lsls	r2, r2, #2
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	440b      	add	r3, r1
 80023a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80023ac:	e00a      	b.n	80023c4 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ae:	4909      	ldr	r1, [pc, #36]	; (80023d4 <__NVIC_SetPriority+0x50>)
 80023b0:	79fb      	ldrb	r3, [r7, #7]
 80023b2:	f003 030f 	and.w	r3, r3, #15
 80023b6:	3b04      	subs	r3, #4
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	b2d2      	uxtb	r2, r2
 80023bc:	0092      	lsls	r2, r2, #2
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	440b      	add	r3, r1
 80023c2:	761a      	strb	r2, [r3, #24]
  }
}
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	e000e100 	.word	0xe000e100
 80023d4:	e000ed00 	.word	0xe000ed00

080023d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023d8:	b480      	push	{r7}
 80023da:	b089      	sub	sp, #36	; 0x24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f003 0307 	and.w	r3, r3, #7
 80023ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	f1c3 0307 	rsb	r3, r3, #7
 80023f2:	2b06      	cmp	r3, #6
 80023f4:	bf28      	it	cs
 80023f6:	2306      	movcs	r3, #6
 80023f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	3306      	adds	r3, #6
 80023fe:	2b06      	cmp	r3, #6
 8002400:	d902      	bls.n	8002408 <NVIC_EncodePriority+0x30>
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	3b01      	subs	r3, #1
 8002406:	e000      	b.n	800240a <NVIC_EncodePriority+0x32>
 8002408:	2300      	movs	r3, #0
 800240a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	2201      	movs	r2, #1
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	1e5a      	subs	r2, r3, #1
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	401a      	ands	r2, r3
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	2101      	movs	r1, #1
 8002422:	fa01 f303 	lsl.w	r3, r1, r3
 8002426:	1e59      	subs	r1, r3, #1
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 800242c:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 800242e:	4618      	mov	r0, r3
 8002430:	3724      	adds	r7, #36	; 0x24
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop

0800243c <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	460b      	mov	r3, r1
 8002446:	70fb      	strb	r3, [r7, #3]
 8002448:	4613      	mov	r3, r2
 800244a:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 800244c:	78f8      	ldrb	r0, [r7, #3]
 800244e:	78fb      	ldrb	r3, [r7, #3]
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	3306      	adds	r3, #6
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	4413      	add	r3, r2
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 800245e:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8002460:	431a      	orrs	r2, r3
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	1d83      	adds	r3, r0, #6
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	440b      	add	r3, r1
 800246a:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop

08002478 <XMC_USIC_CH_SetWordLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetFrameLength()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	460b      	mov	r3, r1
 8002482:	70fb      	strb	r3, [r7, #3]
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002488:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
                  (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
 800248c:	78fb      	ldrb	r3, [r7, #3]
 800248e:	3b01      	subs	r3, #1
 8002490:	061b      	lsls	r3, r3, #24
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetFrameLength()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
 8002492:	431a      	orrs	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	635a      	str	r2, [r3, #52]	; 0x34
                  (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
}
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop

080024a4 <XMC_USIC_CH_SetFrameLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	460b      	mov	r3, r1
 80024ae:	70fb      	strb	r3, [r7, #3]
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024b4:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
 80024b8:	78fb      	ldrb	r3, [r7, #3]
 80024ba:	3b01      	subs	r3, #1
 80024bc:	041b      	lsls	r3, r3, #16
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
 80024be:	431a      	orrs	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	635a      	str	r2, [r3, #52]	; 0x34
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
}
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop

080024d0 <XMC_USIC_CH_ConfigureShiftClockOutput>:
 * 
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	695b      	ldr	r3, [r3, #20]
 80024e0:	f023 4250 	bic.w	r2, r3, #3489660928	; 0xd0000000
                                             USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
 80024e4:	68bb      	ldr	r3, [r7, #8]
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
                                             USIC_CH_BRG_SCLKOSEL_Msk))) |
 80024e6:	431a      	orrs	r2, r3
                 (uint32_t)passive_level |
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	431a      	orrs	r2, r3
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	615a      	str	r2, [r3, #20]
                                             USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
                 (uint32_t)clock_output;
}
 80024f0:	3714      	adds	r7, #20
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop

080024fc <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	460b      	mov	r3, r1
 8002506:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250c:	f023 020f 	bic.w	r2, r3, #15
 8002510:	78fb      	ldrb	r3, [r7, #3]
 8002512:	431a      	orrs	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop

08002524 <XMC_SPI_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Init(), XMC_SPI_CH_Stop()
 */
__STATIC_INLINE void XMC_SPI_CH_Start(XMC_USIC_CH_t *const channel)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* USIC channel in SPI mode */
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_SPI);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	2101      	movs	r1, #1
 8002530:	f7ff ffe4 	bl	80024fc <XMC_USIC_CH_SetMode>
}
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop

0800253c <XMC_SPI_CH_SetSlaveSelectDelay>:
 * This delay is dependent on the peripheral clock. The maximum possible value supported by this API
 * is 30 clock cycles.
 *
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel,uint32_t sclk_period)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
								   USIC_CH_BRG_PCTQ_Msk)) |
                 (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	3b01      	subs	r3, #1
 8002552:	029b      	lsls	r3, r3, #10
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel,uint32_t sclk_period)
{

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
								   USIC_CH_BRG_PCTQ_Msk)) |
 8002554:	4313      	orrs	r3, r2
 8002556:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 *
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel,uint32_t sclk_period)
{

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	615a      	str	r2, [r3, #20]
								   USIC_CH_BRG_PCTQ_Msk)) |
                 (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
}
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <XMC_SPI_CH_ConfigureShiftClockOutput>:
 * period. These settings are applicable only in master mode.
 */
__STATIC_INLINE void XMC_SPI_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                          const XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                          const XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
  XMC_USIC_CH_ConfigureShiftClockOutput(channel, (XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t)passive_level,
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	68b9      	ldr	r1, [r7, #8]
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	f7ff ffa9 	bl	80024d0 <XMC_USIC_CH_ConfigureShiftClockOutput>
                                       (XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t)clock_output);
}
 800257e:	3710      	adds	r7, #16
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <XMC_SPI_CH_SetWordLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_SetFrameLength()
 */
__STATIC_INLINE void XMC_SPI_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	460b      	mov	r3, r1
 800258e:	70fb      	strb	r3, [r7, #3]
  XMC_USIC_CH_SetWordLength(channel, word_length);
 8002590:	78fb      	ldrb	r3, [r7, #3]
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	4619      	mov	r1, r3
 8002596:	f7ff ff6f 	bl	8002478 <XMC_USIC_CH_SetWordLength>
}
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <XMC_SPI_CH_SetFrameLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl(), XMC_SPI_CH_DisableSlaveSelect()
 */
__STATIC_INLINE void XMC_SPI_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	460b      	mov	r3, r1
 80025aa:	70fb      	strb	r3, [r7, #3]
  XMC_USIC_CH_SetFrameLength(channel, frame_length);
 80025ac:	78fb      	ldrb	r3, [r7, #3]
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	4619      	mov	r1, r3
 80025b2:	f7ff ff77 	bl	80024a4 <XMC_USIC_CH_SetFrameLength>
}
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <XMC_SPI_CH_SetInputSource>:
 * the SPI communication.
 */
__STATIC_INLINE void XMC_SPI_CH_SetInputSource(XMC_USIC_CH_t *const channel,
                                               const XMC_SPI_CH_INPUT_t input,
                                               const uint8_t source)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	460b      	mov	r3, r1
 80025c6:	70fb      	strb	r3, [r7, #3]
 80025c8:	4613      	mov	r3, r2
 80025ca:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DX0CR_DSEN_Msk)) | USIC_CH_DX0CR_INSW_Msk;
 80025cc:	78f8      	ldrb	r0, [r7, #3]
 80025ce:	78fb      	ldrb	r3, [r7, #3]
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	3306      	adds	r3, #6
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 80025de:	f043 0210 	orr.w	r2, r3, #16
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	1d83      	adds	r3, r0, #6
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	440b      	add	r3, r1
 80025ea:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 80025ec:	78fa      	ldrb	r2, [r7, #3]
 80025ee:	78bb      	ldrb	r3, [r7, #2]
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	4611      	mov	r1, r2
 80025f4:	461a      	mov	r2, r3
 80025f6:	f7ff ff21 	bl	800243c <XMC_USIC_CH_SetInputSource>
}
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <SPI_MASTER_0_lInit>:
 * @brief Configure the port registers and data input registers of SPI channel
 *
 * @param[in] handle Pointer to an object of SPI_MASTER configuration
 */
static SPI_MASTER_STATUS_t SPI_MASTER_0_lInit(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
  SPI_MASTER_STATUS_t status;
  status = SPI_MASTER_STATUS_SUCCESS; 
 8002606:	2300      	movs	r3, #0
 8002608:	71fb      	strb	r3, [r7, #7]
  /* LLD initialization */
  XMC_SPI_CH_Init(XMC_SPI1_CH1, &SPI_MASTER_0_Channel_Config);
 800260a:	483d      	ldr	r0, [pc, #244]	; (8002700 <SPI_MASTER_0_lInit+0x100>)
 800260c:	493d      	ldr	r1, [pc, #244]	; (8002704 <SPI_MASTER_0_lInit+0x104>)
 800260e:	f7fe feb7 	bl	8001380 <XMC_SPI_CH_Init>
                             
  XMC_SPI_CH_SetWordLength(XMC_SPI1_CH1, (uint8_t)8);
 8002612:	483b      	ldr	r0, [pc, #236]	; (8002700 <SPI_MASTER_0_lInit+0x100>)
 8002614:	2108      	movs	r1, #8
 8002616:	f7ff ffb5 	bl	8002584 <XMC_SPI_CH_SetWordLength>

  XMC_SPI_CH_SetFrameLength(XMC_SPI1_CH1, (uint8_t)16);
 800261a:	4839      	ldr	r0, [pc, #228]	; (8002700 <SPI_MASTER_0_lInit+0x100>)
 800261c:	2110      	movs	r1, #16
 800261e:	f7ff ffbf 	bl	80025a0 <XMC_SPI_CH_SetFrameLength>

  /* Configure the clock polarity and clock delay */
  XMC_SPI_CH_ConfigureShiftClockOutput(XMC_SPI1_CH1,
 8002622:	4837      	ldr	r0, [pc, #220]	; (8002700 <SPI_MASTER_0_lInit+0x100>)
 8002624:	2100      	movs	r1, #0
 8002626:	2200      	movs	r2, #0
 8002628:	f7ff ff9e 	bl	8002568 <XMC_SPI_CH_ConfigureShiftClockOutput>
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED,
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK);
  /* Configure Leading/Trailing delay */
  XMC_SPI_CH_SetSlaveSelectDelay(XMC_SPI1_CH1, 2U);
 800262c:	4834      	ldr	r0, [pc, #208]	; (8002700 <SPI_MASTER_0_lInit+0x100>)
 800262e:	2102      	movs	r1, #2
 8002630:	f7ff ff84 	bl	800253c <XMC_SPI_CH_SetSlaveSelectDelay>

               
  /* Configure the input pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)0, &SPI_MASTER_0_MISO_Config.port_config);
 8002634:	4834      	ldr	r0, [pc, #208]	; (8002708 <SPI_MASTER_0_lInit+0x108>)
 8002636:	2100      	movs	r1, #0
 8002638:	4a34      	ldr	r2, [pc, #208]	; (800270c <SPI_MASTER_0_lInit+0x10c>)
 800263a:	f7fd fefd 	bl	8000438 <XMC_GPIO_Init>

  /* Configure the data input line selected */
  XMC_SPI_CH_SetInputSource(XMC_SPI1_CH1, XMC_SPI_CH_INPUT_DIN0, (uint8_t)SPI_MASTER_INPUT_D);
 800263e:	4830      	ldr	r0, [pc, #192]	; (8002700 <SPI_MASTER_0_lInit+0x100>)
 8002640:	2100      	movs	r1, #0
 8002642:	2203      	movs	r2, #3
 8002644:	f7ff ffba 	bl	80025bc <XMC_SPI_CH_SetInputSource>
  /* Start the SPI_Channel */
  XMC_SPI_CH_Start(XMC_SPI1_CH1);
 8002648:	482d      	ldr	r0, [pc, #180]	; (8002700 <SPI_MASTER_0_lInit+0x100>)
 800264a:	f7ff ff6b 	bl	8002524 <XMC_SPI_CH_Start>

  /* Configure the output pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)9, &SPI_MASTER_0_MOSI_Config.port_config);
 800264e:	4830      	ldr	r0, [pc, #192]	; (8002710 <SPI_MASTER_0_lInit+0x110>)
 8002650:	2109      	movs	r1, #9
 8002652:	4a30      	ldr	r2, [pc, #192]	; (8002714 <SPI_MASTER_0_lInit+0x114>)
 8002654:	f7fd fef0 	bl	8000438 <XMC_GPIO_Init>
    
  /* Initialize SPI SCLK out pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)8, &SPI_MASTER_0_SCLKOUT_Config.port_config);
 8002658:	482d      	ldr	r0, [pc, #180]	; (8002710 <SPI_MASTER_0_lInit+0x110>)
 800265a:	2108      	movs	r1, #8
 800265c:	4a2e      	ldr	r2, [pc, #184]	; (8002718 <SPI_MASTER_0_lInit+0x118>)
 800265e:	f7fd feeb 	bl	8000438 <XMC_GPIO_Init>

  /* Configure the pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)2, &SPI_MASTER_0_SS_0_Config.port_config);
 8002662:	4829      	ldr	r0, [pc, #164]	; (8002708 <SPI_MASTER_0_lInit+0x108>)
 8002664:	2102      	movs	r1, #2
 8002666:	4a2d      	ldr	r2, [pc, #180]	; (800271c <SPI_MASTER_0_lInit+0x11c>)
 8002668:	f7fd fee6 	bl	8000438 <XMC_GPIO_Init>
  XMC_SPI_CH_EnableSlaveSelect(XMC_SPI1_CH1, XMC_SPI_CH_SLAVE_SELECT_1);
 800266c:	4824      	ldr	r0, [pc, #144]	; (8002700 <SPI_MASTER_0_lInit+0x100>)
 800266e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002672:	f7fe fec5 	bl	8001400 <XMC_SPI_CH_EnableSlaveSelect>

  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI1_CH1,
 8002676:	4822      	ldr	r0, [pc, #136]	; (8002700 <SPI_MASTER_0_lInit+0x100>)
 8002678:	2110      	movs	r1, #16
 800267a:	2202      	movs	r2, #2
 800267c:	f7ff f8aa 	bl	80017d4 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
                                      (uint32_t)SPI_MASTER_SR_ID_2);
            
  /* Configure transmit FIFO settings */
  XMC_USIC_CH_TXFIFO_Configure(XMC_SPI1_CH1,
 8002680:	481f      	ldr	r0, [pc, #124]	; (8002700 <SPI_MASTER_0_lInit+0x100>)
 8002682:	2110      	movs	r1, #16
 8002684:	2204      	movs	r2, #4
 8002686:	2301      	movs	r3, #1
 8002688:	f7ff f830 	bl	80016ec <XMC_USIC_CH_TXFIFO_Configure>
                               (XMC_USIC_CH_FIFO_SIZE_t)XMC_USIC_CH_FIFO_SIZE_16WORDS,
                               1U);

  /* Configure the service interrupt nodes for standard transmit FIFO events */
               
  XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_SPI1_CH1,
 800268c:	481c      	ldr	r0, [pc, #112]	; (8002700 <SPI_MASTER_0_lInit+0x100>)
 800268e:	2110      	movs	r1, #16
 8002690:	2201      	movs	r2, #1
 8002692:	f7ff f8bb 	bl	800180c <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>
                                             XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
                                             (uint32_t)SPI_MASTER_SR_ID_1);
  /* Configure receive FIFO settings */
  XMC_USIC_CH_RXFIFO_Configure(XMC_SPI1_CH1,
 8002696:	481a      	ldr	r0, [pc, #104]	; (8002700 <SPI_MASTER_0_lInit+0x100>)
 8002698:	2100      	movs	r1, #0
 800269a:	2204      	movs	r2, #4
 800269c:	2300      	movs	r3, #0
 800269e:	f7ff f84d 	bl	800173c <XMC_USIC_CH_RXFIFO_Configure>
                               0U,
                               (XMC_USIC_CH_FIFO_SIZE_t)XMC_USIC_CH_FIFO_SIZE_16WORDS,
                               0U);
             
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_SPI1_CH1,
 80026a2:	4817      	ldr	r0, [pc, #92]	; (8002700 <SPI_MASTER_0_lInit+0x100>)
 80026a4:	2110      	movs	r1, #16
 80026a6:	2200      	movs	r2, #0
 80026a8:	f7ff f8ce 	bl	8001848 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
                                             XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
                                             (uint32_t)SPI_MASTER_SR_ID_0);
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_SPI1_CH1,
 80026ac:	4814      	ldr	r0, [pc, #80]	; (8002700 <SPI_MASTER_0_lInit+0x100>)
 80026ae:	2113      	movs	r1, #19
 80026b0:	2200      	movs	r2, #0
 80026b2:	f7ff f8c9 	bl	8001848 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
                                             XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE,
                                             (uint32_t)SPI_MASTER_SR_ID_0);
  /* Set priority of the Transmit interrupt */
  NVIC_SetPriority((IRQn_Type)91, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 63U, 0U));
 80026b6:	f7ff fe3b 	bl	8002330 <__NVIC_GetPriorityGrouping>
 80026ba:	4603      	mov	r3, r0
 80026bc:	4618      	mov	r0, r3
 80026be:	213f      	movs	r1, #63	; 0x3f
 80026c0:	2200      	movs	r2, #0
 80026c2:	f7ff fe89 	bl	80023d8 <NVIC_EncodePriority>
 80026c6:	4603      	mov	r3, r0
 80026c8:	205b      	movs	r0, #91	; 0x5b
 80026ca:	4619      	mov	r1, r3
 80026cc:	f7ff fe5a 	bl	8002384 <__NVIC_SetPriority>
     
  /* Enable Transmit interrupt */
  NVIC_EnableIRQ((IRQn_Type)91);
 80026d0:	205b      	movs	r0, #91	; 0x5b
 80026d2:	f7ff fe3b 	bl	800234c <__NVIC_EnableIRQ>
             
  /* Set priority of the Receive interrupt */
  NVIC_SetPriority((IRQn_Type)90, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 62U, 0U));
 80026d6:	f7ff fe2b 	bl	8002330 <__NVIC_GetPriorityGrouping>
 80026da:	4603      	mov	r3, r0
 80026dc:	4618      	mov	r0, r3
 80026de:	213e      	movs	r1, #62	; 0x3e
 80026e0:	2200      	movs	r2, #0
 80026e2:	f7ff fe79 	bl	80023d8 <NVIC_EncodePriority>
 80026e6:	4603      	mov	r3, r0
 80026e8:	205a      	movs	r0, #90	; 0x5a
 80026ea:	4619      	mov	r1, r3
 80026ec:	f7ff fe4a 	bl	8002384 <__NVIC_SetPriority>
    
  /* Enable Receive interrupt */
  NVIC_EnableIRQ((IRQn_Type)90);
 80026f0:	205a      	movs	r0, #90	; 0x5a
 80026f2:	f7ff fe2b 	bl	800234c <__NVIC_EnableIRQ>
    
  return status;
 80026f6:	79fb      	ldrb	r3, [r7, #7]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3708      	adds	r7, #8
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	48020200 	.word	0x48020200
 8002704:	1fffc814 	.word	0x1fffc814
 8002708:	48028000 	.word	0x48028000
 800270c:	1fffc9c4 	.word	0x1fffc9c4
 8002710:	48028100 	.word	0x48028100
 8002714:	1fffc800 	.word	0x1fffc800
 8002718:	08006d4c 	.word	0x08006d4c
 800271c:	08006d68 	.word	0x08006d68

08002720 <USIC1_1_IRQHandler>:
/*Transmit ISR*/
void SPI_MASTER_0_tx_handler()
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  SPI_MASTER_lTransmitHandler(&SPI_MASTER_0);
 8002724:	4801      	ldr	r0, [pc, #4]	; (800272c <USIC1_1_IRQHandler+0xc>)
 8002726:	f7ff fb4f 	bl	8001dc8 <SPI_MASTER_lTransmitHandler>
}
 800272a:	bd80      	pop	{r7, pc}
 800272c:	1fffc844 	.word	0x1fffc844

08002730 <USIC1_0_IRQHandler>:

/*Receive ISR*/
void SPI_MASTER_0_rx_handler()
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  SPI_MASTER_lReceiveHandler(&SPI_MASTER_0);
 8002734:	4801      	ldr	r0, [pc, #4]	; (800273c <USIC1_0_IRQHandler+0xc>)
 8002736:	f7ff fc81 	bl	800203c <SPI_MASTER_lReceiveHandler>
}
 800273a:	bd80      	pop	{r7, pc}
 800273c:	1fffc844 	.word	0x1fffc844

08002740 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	460b      	mov	r3, r1
 800274a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
 800274c:	78fb      	ldrb	r3, [r7, #3]
 800274e:	2201      	movs	r2, #1
 8002750:	409a      	lsls	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	60da      	str	r2, [r3, #12]
}
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	60da      	str	r2, [r3, #12]
}
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	460b      	mov	r3, r1
 8002782:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8002784:	887a      	ldrh	r2, [r7, #2]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	635a      	str	r2, [r3, #52]	; 0x34
}
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	460b      	mov	r3, r1
 800279e:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 80027a0:	887a      	ldrh	r2, [r7, #2]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	611a      	str	r2, [r3, #16]
}
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop

080027cc <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	460b      	mov	r3, r1
 80027d6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80027de:	78fb      	ldrb	r3, [r7, #3]
 80027e0:	2101      	movs	r1, #1
 80027e2:	fa01 f303 	lsl.w	r3, r1, r3
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <XMC_CCU8_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_DisableClock()<BR>  XMC_CCU8_EnableMultipleClocks()<BR>  XMC_CCU8_StartPrescaler()<BR>  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_EnableClock(XMC_CCU8_MODULE_t *const module, const uint8_t slice_number)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	460b      	mov	r3, r1
 8002802:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1 << slice_number);
 8002804:	78fb      	ldrb	r3, [r7, #3]
 8002806:	2201      	movs	r2, #1
 8002808:	409a      	lsls	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	60da      	str	r2, [r3, #12]
}
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <XMC_CCU8_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StartTimer(XMC_CCU8_SLICE_t *const slice)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCSET = CCU8_CC8_TCSET_TRBS_Msk;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	60da      	str	r2, [r3, #12]
}
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <XMC_CCU8_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU8_EnableShadowTransfer(XMC_CCU8_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_EnableShadowTransfer:Invalid module Pointer", XMC_CCU8_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	611a      	str	r2, [r3, #16]
}
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop

0800284c <XMC_CCU8_SLICE_EnableEvent>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_SetInterruptNode()<BR>  XMC_CCU8_SLICE_EnableMultipleEvents()<BR>  XMC_CCU8_SLICE_DisableEvent()<BR> 
 *  XMC_CCU8_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_EnableEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_IRQ_ID_t event)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	460b      	mov	r3, r1
 8002856:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800285e:	78fb      	ldrb	r3, [r7, #3]
 8002860:	2101      	movs	r1, #1
 8002862:	fa01 f303 	lsl.w	r3, r1, r3
 8002866:	431a      	orrs	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <PWM_lCCU4_Init>:

#ifdef PWM_SLICE_USED_CCU4

/*Initialize the APP and CCU4 slice. */
PWM_STATUS_t PWM_lCCU4_Init(PWM_t *const handle_ptr)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  PWM_STATUS_t status = PWM_STATUS_FAILURE;
 8002880:	2301      	movs	r3, #1
 8002882:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("PWM_lCCU4_Init:Invalid handle_ptr" , (handle_ptr != NULL))

  if (PWM_STATUS_UNINITIALIZED == handle_ptr->state)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800288a:	2b02      	cmp	r3, #2
 800288c:	d14d      	bne.n	800292a <PWM_lCCU4_Init+0xb2>
  {
    /* Initialize consumed Apps */
    status = (PWM_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handle);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f000 fb66 	bl	8002f64 <GLOBAL_CCU4_Init>
 8002898:	4603      	mov	r3, r0
 800289a:	73fb      	strb	r3, [r7, #15]

    /*Initialize CCU4 slice */
    if (PWM_STATUS_SUCCESS == status)/*check GLOBAL_CCU4_Init status*/
 800289c:	7bfb      	ldrb	r3, [r7, #15]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d13f      	bne.n	8002922 <PWM_lCCU4_Init+0xaa>
    {
      XMC_DEBUG("PWM_lCCU4_Init:Initilizing Slice")
      XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689a      	ldr	r2, [r3, #8]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	4610      	mov	r0, r2
 80028ac:	4619      	mov	r1, r3
 80028ae:	f7fe fb4f 	bl	8000f50 <XMC_CCU4_SLICE_CompareInit>

      /* Set the period and compare register values */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr,
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689a      	ldr	r2, [r3, #8]
    		                             (uint16_t)handle_ptr->period_value);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	69db      	ldr	r3, [r3, #28]
    {
      XMC_DEBUG("PWM_lCCU4_Init:Initilizing Slice")
      XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);

      /* Set the period and compare register values */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr,
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	4610      	mov	r0, r2
 80028be:	4619      	mov	r1, r3
 80028c0:	f7ff ff5a 	bl	8002778 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
    		                             (uint16_t)handle_ptr->period_value);

      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr,
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689a      	ldr	r2, [r3, #8]
    		                              (uint16_t)handle_ptr->compare_value);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	699b      	ldr	r3, [r3, #24]

      /* Set the period and compare register values */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr,
    		                             (uint16_t)handle_ptr->period_value);

      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr,
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	4610      	mov	r0, r2
 80028d0:	4619      	mov	r1, r3
 80028d2:	f7ff ff5f 	bl	8002794 <XMC_CCU4_SLICE_SetTimerCompareMatch>
    		                              (uint16_t)handle_ptr->compare_value);

      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_kernel_ptr, handle_ptr->shadow_mask);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028de:	4610      	mov	r0, r2
 80028e0:	4619      	mov	r1, r3
 80028e2:	f7ff ff65 	bl	80027b0 <XMC_CCU4_EnableShadowTransfer>

      /* Initialize interrupts */
      PWM_lCCU4_ConfigInterrupts(handle_ptr);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 f824 	bl	8002934 <PWM_lCCU4_ConfigInterrupts>

      XMC_GPIO_Init(handle_ptr->gpio_out_port,handle_ptr->gpio_out_pin,
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6919      	ldr	r1, [r3, #16]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	4608      	mov	r0, r1
 80028fc:	4611      	mov	r1, r2
 80028fe:	461a      	mov	r2, r3
 8002900:	f7fd fd9a 	bl	8000438 <XMC_GPIO_Init>
    		        handle_ptr->gpio_out_config);

      handle_ptr->state = PWM_STATUS_SUCCESS;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

      /* Start the PWM generation if start at initialization is enabled */
      if ((bool) true == handle_ptr->start_control)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002912:	2b00      	cmp	r3, #0
 8002914:	d002      	beq.n	800291c <PWM_lCCU4_Init+0xa4>
      {
        PWM_Start(handle_ptr);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 f9ba 	bl	8002c90 <PWM_Start>
      }
      status = PWM_STATUS_SUCCESS;
 800291c:	2300      	movs	r3, #0
 800291e:	73fb      	strb	r3, [r7, #15]
 8002920:	e003      	b.n	800292a <PWM_lCCU4_Init+0xb2>
    }
    else
    {
      handle_ptr->state = PWM_STATUS_UNINITIALIZED;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2202      	movs	r2, #2
 8002926:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    }

  }
  return (status);
 800292a:	7bfb      	ldrb	r3, [r7, #15]
} /* end of PWM_lCCU4_Init() api */
 800292c:	4618      	mov	r0, r3
 800292e:	3710      	adds	r7, #16
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <PWM_lCCU4_ConfigInterrupts>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialize interrupts */
void PWM_lCCU4_ConfigInterrupts(PWM_t *const handle_ptr)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  if ((bool) true == handle_ptr->period_match_enable)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00f      	beq.n	8002966 <PWM_lCCU4_ConfigInterrupts+0x32>
  {
    XMC_DEBUG("PWM_lCCU4_ConfigInterrupts:period match enable")
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	4618      	mov	r0, r3
 800294c:	2100      	movs	r1, #0
 800294e:	f7ff ff3d 	bl	80027cc <XMC_CCU4_SLICE_EnableEvent>

    /* Bind event to Service Request Node to period match event*/
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689a      	ldr	r2, [r3, #8]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800295c:	4610      	mov	r0, r2
 800295e:	2100      	movs	r1, #0
 8002960:	461a      	mov	r2, r3
 8002962:	f7fe fb2b 	bl	8000fbc <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_slice_period_match_node);
  }

  if ((bool) true == handle_ptr->compare_match_enable)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00f      	beq.n	8002990 <PWM_lCCU4_ConfigInterrupts+0x5c>
  {
    XMC_DEBUG("PWM_lCCU4_ConfigInterrupts:compare match enable")
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	4618      	mov	r0, r3
 8002976:	2102      	movs	r1, #2
 8002978:	f7ff ff28 	bl	80027cc <XMC_CCU4_SLICE_EnableEvent>

    /* Bind event to Service Request Node to compare match event */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP,
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002986:	4610      	mov	r0, r2
 8002988:	2102      	movs	r1, #2
 800298a:	461a      	mov	r2, r3
 800298c:	f7fe fb16 	bl	8000fbc <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_slice_compare_match_node);
  }
}
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop

08002998 <PWM_lCCU4_Start>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*Starts the CCU4 slice. */
void PWM_lCCU4_Start(PWM_t *const handle_ptr)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  if ((PWM_STATUS_SUCCESS == handle_ptr->state) || (PWM_STATUS_STOPPED == handle_ptr->state))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d004      	beq.n	80029b4 <PWM_lCCU4_Start+0x1c>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80029b0:	2b04      	cmp	r3, #4
 80029b2:	d111      	bne.n	80029d8 <PWM_lCCU4_Start+0x40>
  {
    /* Clears the IDLE mode for the slice */
    XMC_CCU4_EnableClock(handle_ptr->ccu4_kernel_ptr,handle_ptr->slice_number);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80029be:	4610      	mov	r0, r2
 80029c0:	4619      	mov	r1, r3
 80029c2:	f7ff febd 	bl	8002740 <XMC_CCU4_EnableClock>
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff fec8 	bl	8002760 <XMC_CCU4_SLICE_StartTimer>

    handle_ptr->state = PWM_STATUS_RUNNING;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2203      	movs	r2, #3
 80029d4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    XMC_DEBUG("PWM_lCCU4_Start:start PWM")
  }
} /* end of PWM_lCCU4_Start() api */
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop

080029e0 <PWM_lCCU4_SetDutyCycle>:
} /* end of PWM_lCCU4_Stop() api */

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*Sets the duty cycle for CCU4 slice. */
PWM_STATUS_t PWM_lCCU4_SetDutyCycle(PWM_t *const handle_ptr, uint32_t duty_cycle)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  uint32_t compare;
  PWM_STATUS_t status;

  XMC_ASSERT("PWM_lCCU4_SetDutyCycle:Invalid duty_cycle " , ((duty_cycle >= 0) && (duty_cycle <= PWM_MAX_DUTY_CYCLE)))

  status = PWM_STATUS_FAILURE;
 80029ea:	2301      	movs	r3, #1
 80029ec:	75fb      	strb	r3, [r7, #23]
  if (PWM_STATUS_UNINITIALIZED != handle_ptr->state)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d02c      	beq.n	8002a52 <PWM_lCCU4_SetDutyCycle+0x72>
  {
    /* Duty cycle needs between 0 and 10000 */
    if (duty_cycle <= PWM_MAX_DUTY_CYCLE)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d827      	bhi.n	8002a52 <PWM_lCCU4_SetDutyCycle+0x72>
    {
      /* period = (PR + 1) */
      period = (uint32_t)handle_ptr->period_value + 1U;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	3301      	adds	r3, #1
 8002a08:	613b      	str	r3, [r7, #16]

      /* Duty Cycle(symmetric) = (PR-CR1)+1 / period */
      compare = ((period * (PWM_MAX_DUTY_CYCLE - duty_cycle)) / ((uint32_t) 100 * PWM_DUTY_CYCLE_SCALE));
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8002a10:	3310      	adds	r3, #16
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	fb02 f303 	mul.w	r3, r2, r3
 8002a18:	4a10      	ldr	r2, [pc, #64]	; (8002a5c <PWM_lCCU4_SetDutyCycle+0x7c>)
 8002a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1e:	0b5b      	lsrs	r3, r3, #13
 8002a20:	60fb      	str	r3, [r7, #12]

      handle_ptr->compare_value = compare;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	619a      	str	r2, [r3, #24]
      handle_ptr->duty_cycle = duty_cycle;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	621a      	str	r2, [r3, #32]

      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, (uint16_t)compare);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	689a      	ldr	r2, [r3, #8]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	4610      	mov	r0, r2
 8002a38:	4619      	mov	r1, r3
 8002a3a:	f7ff feab 	bl	8002794 <XMC_CCU4_SLICE_SetTimerCompareMatch>
      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_kernel_ptr, handle_ptr->shadow_mask);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a46:	4610      	mov	r0, r2
 8002a48:	4619      	mov	r1, r3
 8002a4a:	f7ff feb1 	bl	80027b0 <XMC_CCU4_EnableShadowTransfer>
      status = PWM_STATUS_SUCCESS;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	75fb      	strb	r3, [r7, #23]
    }
  }

  XMC_DEBUG("PWM_lCCU4_SetDutyCycle:dutycycle set")
  return (status);
 8002a52:	7dfb      	ldrb	r3, [r7, #23]
} /* end of PWM_lCCU4_SetDutyCycle() api */
 8002a54:	4618      	mov	r0, r3
 8002a56:	3718      	adds	r7, #24
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	d1b71759 	.word	0xd1b71759

08002a60 <PWM_lCCU8_Init>:

#ifdef PWM_SLICE_USED_CCU8

/*Initialize the APP and CCU8 slice. */
PWM_STATUS_t PWM_lCCU8_Init(PWM_t *const handle_ptr)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  PWM_STATUS_t status = PWM_STATUS_FAILURE;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	73fb      	strb	r3, [r7, #15]

  if (PWM_STATUS_UNINITIALIZED == handle_ptr->state)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d14e      	bne.n	8002b14 <PWM_lCCU8_Init+0xb4>
  {
    /* Initialize consumed Apps */
    status = (PWM_STATUS_t)GLOBAL_CCU8_Init(handle_ptr->global_ccu8_handle);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f000 fa44 	bl	8002f08 <GLOBAL_CCU8_Init>
 8002a80:	4603      	mov	r3, r0
 8002a82:	73fb      	strb	r3, [r7, #15]

    /*Initialize CCU8 slice */
    if (PWM_STATUS_SUCCESS == status)
 8002a84:	7bfb      	ldrb	r3, [r7, #15]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d140      	bne.n	8002b0c <PWM_lCCU8_Init+0xac>
    {
      XMC_DEBUG("PWM_lCCU8_Init:Initilizing Slice")
      XMC_CCU8_SLICE_CompareInit(handle_ptr->ccu8_slice_ptr, handle_ptr->ccu8_slice_config_ptr);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	689a      	ldr	r2, [r3, #8]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	4610      	mov	r0, r2
 8002a94:	4619      	mov	r1, r3
 8002a96:	f7fe fb51 	bl	800113c <XMC_CCU8_SLICE_CompareInit>

      /* Set the period and compare register values */
      XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr,
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689a      	ldr	r2, [r3, #8]
    		                            (uint16_t)handle_ptr->period_value);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69db      	ldr	r3, [r3, #28]
    {
      XMC_DEBUG("PWM_lCCU8_Init:Initilizing Slice")
      XMC_CCU8_SLICE_CompareInit(handle_ptr->ccu8_slice_ptr, handle_ptr->ccu8_slice_config_ptr);

      /* Set the period and compare register values */
      XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr,
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	4610      	mov	r0, r2
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	f7fe fb82 	bl	80011b0 <XMC_CCU8_SLICE_SetTimerPeriodMatch>
    		                            (uint16_t)handle_ptr->period_value);

      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689a      	ldr	r2, [r3, #8]
    		                              (uint16_t)handle_ptr->compare_value);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	699b      	ldr	r3, [r3, #24]

      /* Set the period and compare register values */
      XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr,
    		                            (uint16_t)handle_ptr->period_value);

      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	4610      	mov	r0, r2
 8002ab8:	2100      	movs	r1, #0
 8002aba:	461a      	mov	r2, r3
 8002abc:	f7fe fb86 	bl	80011cc <XMC_CCU8_SLICE_SetTimerCompareMatch>
    		                              (uint16_t)handle_ptr->compare_value);

      XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_kernel_ptr, handle_ptr->shadow_mask);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac8:	4610      	mov	r0, r2
 8002aca:	4619      	mov	r1, r3
 8002acc:	f7ff feb0 	bl	8002830 <XMC_CCU8_EnableShadowTransfer>

      /* Initialize interrupts */
      PWM_lCCU8_ConfigInterrupts(handle_ptr);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 f825 	bl	8002b20 <PWM_lCCU8_ConfigInterrupts>

      XMC_GPIO_Init(handle_ptr->gpio_out_port,handle_ptr->gpio_out_pin,
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6919      	ldr	r1, [r3, #16]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	4608      	mov	r0, r1
 8002ae6:	4611      	mov	r1, r2
 8002ae8:	461a      	mov	r2, r3
 8002aea:	f7fd fca5 	bl	8000438 <XMC_GPIO_Init>
    		        handle_ptr->gpio_out_config);

      handle_ptr->state = PWM_STATUS_SUCCESS;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

      /* Start the PWM generation if start at initialization is enabled */
      if ((bool) true == handle_ptr->start_control)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d002      	beq.n	8002b06 <PWM_lCCU8_Init+0xa6>
      {
        PWM_Start(handle_ptr);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 f8c5 	bl	8002c90 <PWM_Start>
      }
      status = PWM_STATUS_SUCCESS;
 8002b06:	2300      	movs	r3, #0
 8002b08:	73fb      	strb	r3, [r7, #15]
 8002b0a:	e003      	b.n	8002b14 <PWM_lCCU8_Init+0xb4>
    }
    else
    {
      handle_ptr->state = PWM_STATUS_UNINITIALIZED;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2202      	movs	r2, #2
 8002b10:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    }

  }
  return(status);
 8002b14:	7bfb      	ldrb	r3, [r7, #15]
} /* end of PWM_lCCU8_Init() api */
 8002b16:	4618      	mov	r0, r3
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop

08002b20 <PWM_lCCU8_ConfigInterrupts>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialize interrupts */
void PWM_lCCU8_ConfigInterrupts(PWM_t *const handle_ptr)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  if ((bool) true == handle_ptr->period_match_enable)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00f      	beq.n	8002b52 <PWM_lCCU8_ConfigInterrupts+0x32>
  {
    XMC_DEBUG("PWM_lCCU8_ConfigInterrupts:period match event enable")

    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	4618      	mov	r0, r3
 8002b38:	2100      	movs	r1, #0
 8002b3a:	f7ff fe87 	bl	800284c <XMC_CCU8_SLICE_EnableEvent>

    /* Bind event to Service Request Node for period match event */
    XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH,
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689a      	ldr	r2, [r3, #8]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002b48:	4610      	mov	r0, r2
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	f7fe fb55 	bl	80011fc <XMC_CCU8_SLICE_SetInterruptNode>
                                    handle_ptr->ccu8_slice_period_match_node);
  }

  if ((bool) true == handle_ptr->compare_match_enable)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00f      	beq.n	8002b7c <PWM_lCCU8_ConfigInterrupts+0x5c>
  {
    XMC_DEBUG("PWM_lCCU8_ConfigInterrupts:compare match event enable ")

    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	4618      	mov	r0, r3
 8002b62:	2102      	movs	r1, #2
 8002b64:	f7ff fe72 	bl	800284c <XMC_CCU8_SLICE_EnableEvent>
    /* Bind event to Service Request Node for compare match event */
    XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1,
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689a      	ldr	r2, [r3, #8]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002b72:	4610      	mov	r0, r2
 8002b74:	2102      	movs	r1, #2
 8002b76:	461a      	mov	r2, r3
 8002b78:	f7fe fb40 	bl	80011fc <XMC_CCU8_SLICE_SetInterruptNode>
                                    handle_ptr->ccu8_slice_compare_match_node);
  }
}
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop

08002b84 <PWM_lCCU8_Start>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*Starts the CCU8 slice. */
void PWM_lCCU8_Start(PWM_t *const handle_ptr)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PWM_lCCU8_Start:Invalid handle_ptr" , (handle_ptr != NULL))

  if ((PWM_STATUS_SUCCESS == handle_ptr->state) || (PWM_STATUS_STOPPED == handle_ptr->state))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d004      	beq.n	8002ba0 <PWM_lCCU8_Start+0x1c>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002b9c:	2b04      	cmp	r3, #4
 8002b9e:	d111      	bne.n	8002bc4 <PWM_lCCU8_Start+0x40>
  {
    /* Clears IDLE mode for the slice */
    XMC_CCU8_EnableClock(handle_ptr->ccu8_kernel_ptr,handle_ptr->slice_number);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002baa:	4610      	mov	r0, r2
 8002bac:	4619      	mov	r1, r3
 8002bae:	f7ff fe23 	bl	80027f8 <XMC_CCU8_EnableClock>
    XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff fe2e 	bl	8002818 <XMC_CCU8_SLICE_StartTimer>

    handle_ptr->state = PWM_STATUS_RUNNING;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2203      	movs	r2, #3
 8002bc0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    XMC_DEBUG("PWM_lCCU8_Start:start PWM")
  }
} /* end of PWM_lCCU8_Start() api */
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop

08002bcc <PWM_lCCU8_SetDutyCycle>:
} /* end of PWM_lCCU8_Stop() api */

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*Sets the duty cycle for CCU8 slice. */
PWM_STATUS_t PWM_lCCU8_SetDutyCycle(PWM_t *const handle_ptr, uint32_t duty_cycle)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]

  XMC_ASSERT("PWM_lCCU8_SetDutyCycle:Invalid handle_ptr" , (handle_ptr != NULL))
  XMC_ASSERT("PWM_lCCU8_SetDutyCycle:Invalid duty_cycle",((duty_cycle >= 0) &&
                                                          (duty_cycle <= PWM_MAX_DUTY_CYCLE)))

  status = PWM_STATUS_FAILURE;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	75fb      	strb	r3, [r7, #23]
  if (handle_ptr->state != PWM_STATUS_UNINITIALIZED)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d02d      	beq.n	8002c40 <PWM_lCCU8_SetDutyCycle+0x74>
  {
    /* Duty cycle needs between 0 and 10000 */
    if (duty_cycle <= PWM_MAX_DUTY_CYCLE)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	f242 7210 	movw	r2, #10000	; 0x2710
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d828      	bhi.n	8002c40 <PWM_lCCU8_SetDutyCycle+0x74>
    {
      period = (uint32_t)handle_ptr->period_value + 1U;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	613b      	str	r3, [r7, #16]

      /* Duty Cycle(symmetric) = (PR-CR1)+1 / period */
      compare = ((period * ((uint32_t) PWM_MAX_DUTY_CYCLE - duty_cycle)) / ((uint32_t) 100 * PWM_DUTY_CYCLE_SCALE));
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8002bfc:	3310      	adds	r3, #16
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	fb02 f303 	mul.w	r3, r2, r3
 8002c04:	4a11      	ldr	r2, [pc, #68]	; (8002c4c <PWM_lCCU8_SetDutyCycle+0x80>)
 8002c06:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0a:	0b5b      	lsrs	r3, r3, #13
 8002c0c:	60fb      	str	r3, [r7, #12]

      handle_ptr->compare_value = compare;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	619a      	str	r2, [r3, #24]
      handle_ptr->duty_cycle = duty_cycle;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	621a      	str	r2, [r3, #32]

      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689a      	ldr	r2, [r3, #8]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	4610      	mov	r0, r2
 8002c24:	2100      	movs	r1, #0
 8002c26:	461a      	mov	r2, r3
 8002c28:	f7fe fad0 	bl	80011cc <XMC_CCU8_SLICE_SetTimerCompareMatch>
    		                             (uint16_t)compare);

      XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_kernel_ptr, handle_ptr->shadow_mask);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685a      	ldr	r2, [r3, #4]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	4610      	mov	r0, r2
 8002c36:	4619      	mov	r1, r3
 8002c38:	f7ff fdfa 	bl	8002830 <XMC_CCU8_EnableShadowTransfer>
      status = PWM_STATUS_SUCCESS;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	75fb      	strb	r3, [r7, #23]
    }
  }

  XMC_DEBUG("PWM_lCCU8_SetDutyCycle:dutycycle set")
  return (status);
 8002c40:	7dfb      	ldrb	r3, [r7, #23]
} /* end of PWM_lCCU8_SetDutyCycle() api */
 8002c42:	4618      	mov	r0, r3
 8002c44:	3718      	adds	r7, #24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	d1b71759 	.word	0xd1b71759

08002c50 <PWM_Init>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* This function initializes the app */
PWM_STATUS_t PWM_Init(PWM_t *const handle_ptr)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  PWM_STATUS_t status;
  status = PWM_STATUS_FAILURE;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("PWM_Init:Invalid handle_ptr" , (handle_ptr != NULL))

#ifdef PWM_SLICE_USED_CCU4
  if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d104      	bne.n	8002c70 <PWM_Init+0x20>
  {
    status = PWM_lCCU4_Init(handle_ptr);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7ff fe06 	bl	8002878 <PWM_lCCU4_Init>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	73fb      	strb	r3, [r7, #15]
  }
#endif

#ifdef PWM_SLICE_USED_CCU8
  if (PWM_TIMER_SLICE_CCU8 == handle_ptr->timer_type)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d104      	bne.n	8002c84 <PWM_Init+0x34>
  {
    status = PWM_lCCU8_Init(handle_ptr);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7ff fef0 	bl	8002a60 <PWM_lCCU8_Init>
 8002c80:	4603      	mov	r3, r0
 8002c82:	73fb      	strb	r3, [r7, #15]
  }
#endif

  return (status);
 8002c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop

08002c90 <PWM_Start>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* This function starts the PWM generation. This needs to be called even if external start is configured.*/
void PWM_Start(PWM_t *const handle_ptr)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PWM_Start:Invalid handle_ptr" , (handle_ptr != NULL))

#ifdef PWM_SLICE_USED_CCU4
  if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d102      	bne.n	8002ca8 <PWM_Start+0x18>
  {
    PWM_lCCU4_Start(handle_ptr);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7ff fe78 	bl	8002998 <PWM_lCCU4_Start>
  }
#endif

#ifdef PWM_SLICE_USED_CCU8
  if (PWM_TIMER_SLICE_CCU8 == handle_ptr->timer_type)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d102      	bne.n	8002cb8 <PWM_Start+0x28>
  {
    PWM_lCCU8_Start(handle_ptr);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7ff ff66 	bl	8002b84 <PWM_lCCU8_Start>
  }
#endif
}
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop

08002cc0 <PWM_SetDutyCycle>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*This function is used to set the duty cycle (uint32_t) of the PWM waveform  */
PWM_STATUS_t PWM_SetDutyCycle(PWM_t *const handle_ptr, uint32_t duty_cycle)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  PWM_STATUS_t status;
  status = PWM_STATUS_FAILURE;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("PWM_SetDutyCycle:Invalid handle_ptr" , (handle_ptr != NULL))

#ifdef PWM_SLICE_USED_CCU4
  if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d105      	bne.n	8002ce4 <PWM_SetDutyCycle+0x24>
  {
    status = PWM_lCCU4_SetDutyCycle(handle_ptr, duty_cycle);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	6839      	ldr	r1, [r7, #0]
 8002cdc:	f7ff fe80 	bl	80029e0 <PWM_lCCU4_SetDutyCycle>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	73fb      	strb	r3, [r7, #15]
  }
#endif

#ifdef PWM_SLICE_USED_CCU8
  if (PWM_TIMER_SLICE_CCU8 == handle_ptr->timer_type)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d105      	bne.n	8002cfa <PWM_SetDutyCycle+0x3a>
  {
    status = PWM_lCCU8_SetDutyCycle(handle_ptr, duty_cycle);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	6839      	ldr	r1, [r7, #0]
 8002cf2:	f7ff ff6b 	bl	8002bcc <PWM_lCCU8_SetDutyCycle>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	73fb      	strb	r3, [r7, #15]
  }
#endif
  return (status);
 8002cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d08:	4b04      	ldr	r3, [pc, #16]	; (8002d1c <__NVIC_GetPriorityGrouping+0x18>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d10:	0a1b      	lsrs	r3, r3, #8
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	e000ed00 	.word	0xe000ed00

08002d20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	4603      	mov	r3, r0
 8002d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	db0b      	blt.n	8002d4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d32:	4908      	ldr	r1, [pc, #32]	; (8002d54 <__NVIC_EnableIRQ+0x34>)
 8002d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d38:	095b      	lsrs	r3, r3, #5
 8002d3a:	79fa      	ldrb	r2, [r7, #7]
 8002d3c:	f002 021f 	and.w	r2, r2, #31
 8002d40:	2001      	movs	r0, #1
 8002d42:	fa00 f202 	lsl.w	r2, r0, r2
 8002d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr
 8002d54:	e000e100 	.word	0xe000e100

08002d58 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	db0c      	blt.n	8002d84 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d6a:	4909      	ldr	r1, [pc, #36]	; (8002d90 <__NVIC_ClearPendingIRQ+0x38>)
 8002d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d70:	095b      	lsrs	r3, r3, #5
 8002d72:	79fa      	ldrb	r2, [r7, #7]
 8002d74:	f002 021f 	and.w	r2, r2, #31
 8002d78:	2001      	movs	r0, #1
 8002d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d7e:	3360      	adds	r3, #96	; 0x60
 8002d80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	e000e100 	.word	0xe000e100

08002d94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	6039      	str	r1, [r7, #0]
 8002d9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	db0a      	blt.n	8002dbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002da8:	490d      	ldr	r1, [pc, #52]	; (8002de0 <__NVIC_SetPriority+0x4c>)
 8002daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	b2d2      	uxtb	r2, r2
 8002db2:	0092      	lsls	r2, r2, #2
 8002db4:	b2d2      	uxtb	r2, r2
 8002db6:	440b      	add	r3, r1
 8002db8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002dbc:	e00a      	b.n	8002dd4 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dbe:	4909      	ldr	r1, [pc, #36]	; (8002de4 <__NVIC_SetPriority+0x50>)
 8002dc0:	79fb      	ldrb	r3, [r7, #7]
 8002dc2:	f003 030f 	and.w	r3, r3, #15
 8002dc6:	3b04      	subs	r3, #4
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	b2d2      	uxtb	r2, r2
 8002dcc:	0092      	lsls	r2, r2, #2
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	440b      	add	r3, r1
 8002dd2:	761a      	strb	r2, [r3, #24]
  }
}
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	e000e100 	.word	0xe000e100
 8002de4:	e000ed00 	.word	0xe000ed00

08002de8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b089      	sub	sp, #36	; 0x24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f003 0307 	and.w	r3, r3, #7
 8002dfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	f1c3 0307 	rsb	r3, r3, #7
 8002e02:	2b06      	cmp	r3, #6
 8002e04:	bf28      	it	cs
 8002e06:	2306      	movcs	r3, #6
 8002e08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	3306      	adds	r3, #6
 8002e0e:	2b06      	cmp	r3, #6
 8002e10:	d902      	bls.n	8002e18 <NVIC_EncodePriority+0x30>
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	3b01      	subs	r3, #1
 8002e16:	e000      	b.n	8002e1a <NVIC_EncodePriority+0x32>
 8002e18:	2300      	movs	r3, #0
 8002e1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	1e5a      	subs	r2, r3, #1
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	401a      	ands	r2, r3
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	2101      	movs	r1, #1
 8002e32:	fa01 f303 	lsl.w	r3, r1, r3
 8002e36:	1e59      	subs	r1, r3, #1
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8002e3c:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3724      	adds	r7, #36	; 0x24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop

08002e4c <PIN_INTERRUPT_Init>:
/*
 * API to initialize the PIN_INTERRUPT APP ERU Event Trigger Logic, Output Gating Unit Hardware initialization
 * and NVIC node configuration.
 */
PIN_INTERRUPT_STATUS_t PIN_INTERRUPT_Init(const PIN_INTERRUPT_t *const handle)
{
 8002e4c:	b590      	push	{r4, r7, lr}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PIN_INTERRUPT_Init: PIN_INTERRUPT APP handle function pointer uninitialized", (handle != NULL));

  /* Initializes input pin characteristics */
  XMC_GPIO_Init(handle->port, handle->pin, &handle->gpio_config);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6859      	ldr	r1, [r3, #4]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	3308      	adds	r3, #8
 8002e62:	4608      	mov	r0, r1
 8002e64:	4611      	mov	r1, r2
 8002e66:	461a      	mov	r2, r3
 8002e68:	f7fd fae6 	bl	8000438 <XMC_GPIO_Init>
  /* ERU Event Trigger Logic Hardware initialization based on UI */
  XMC_ERU_ETL_Init(handle->eru, handle->etl, &handle->etl_config);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6819      	ldr	r1, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	7fda      	ldrb	r2, [r3, #31]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3314      	adds	r3, #20
 8002e78:	4608      	mov	r0, r1
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	f7fe fa19 	bl	80012b4 <XMC_ERU_ETL_Init>
  /* OGU is configured to generate event on configured trigger edge */
  XMC_ERU_OGU_SetServiceRequestMode(handle->eru, handle->ogu, XMC_ERU_OGU_SERVICE_REQUEST_ON_TRIGGER);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e8c:	4610      	mov	r0, r2
 8002e8e:	4619      	mov	r1, r3
 8002e90:	2201      	movs	r2, #1
 8002e92:	f7fe fa35 	bl	8001300 <XMC_ERU_OGU_SetServiceRequestMode>
#if (UC_FAMILY == XMC1)
  /* Configure NVIC node and priority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, handle->irq_priority);
#else
  /* Configure NVIC node, priority and subpriority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	7f1c      	ldrb	r4, [r3, #28]
 8002e9a:	f7ff ff33 	bl	8002d04 <__NVIC_GetPriorityGrouping>
 8002e9e:	4601      	mov	r1, r0
                    handle->irq_priority, handle->irq_subpriority));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	7f5b      	ldrb	r3, [r3, #29]
#if (UC_FAMILY == XMC1)
  /* Configure NVIC node and priority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, handle->irq_priority);
#else
  /* Configure NVIC node, priority and subpriority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8002ea4:	461a      	mov	r2, r3
                    handle->irq_priority, handle->irq_subpriority));
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	7f9b      	ldrb	r3, [r3, #30]
#if (UC_FAMILY == XMC1)
  /* Configure NVIC node and priority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, handle->irq_priority);
#else
  /* Configure NVIC node, priority and subpriority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8002eaa:	4608      	mov	r0, r1
 8002eac:	4611      	mov	r1, r2
 8002eae:	461a      	mov	r2, r3
 8002eb0:	f7ff ff9a 	bl	8002de8 <NVIC_EncodePriority>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	b263      	sxtb	r3, r4
 8002eb8:	4618      	mov	r0, r3
 8002eba:	4611      	mov	r1, r2
 8002ebc:	f7ff ff6a 	bl	8002d94 <__NVIC_SetPriority>
                    handle->irq_priority, handle->irq_subpriority));
#endif
#if (UC_SERIES == XMC14)
  XMC_SCU_SetInterruptControl((IRQn_Type)handle->IRQn, (XMC_SCU_IRQCTRL_t)handle->irqctrl);
#endif
  if (true == handle->enable_at_init)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00b      	beq.n	8002ee2 <PIN_INTERRUPT_Init+0x96>
  {
    /* Clear pending interrupt before enabling it */
    NVIC_ClearPendingIRQ((IRQn_Type)handle->IRQn);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	7f1b      	ldrb	r3, [r3, #28]
 8002ece:	b25b      	sxtb	r3, r3
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff ff41 	bl	8002d58 <__NVIC_ClearPendingIRQ>
    /* Enable NVIC node */
    NVIC_EnableIRQ((IRQn_Type)handle->IRQn);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	7f1b      	ldrb	r3, [r3, #28]
 8002eda:	b25b      	sxtb	r3, r3
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff ff1f 	bl	8002d20 <__NVIC_EnableIRQ>
  }
  return (PIN_INTERRUPT_STATUS_SUCCESS);
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd90      	pop	{r4, r7, pc}

08002eec <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR> 
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU8_GIDLC_SPRB_Msk;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002efa:	60da      	str	r2, [r3, #12]
}
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop

08002f08 <GLOBAL_CCU8_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU8_STATUS_t GLOBAL_CCU8_Init(GLOBAL_CCU8_t* handle)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU8_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	7b5b      	ldrb	r3, [r3, #13]
 8002f14:	f083 0301 	eor.w	r3, r3, #1
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00f      	beq.n	8002f3e <GLOBAL_CCU8_Init+0x36>
  {
    /* Enable CCU8 module */
    XMC_CCU8_Init(handle->module_ptr,handle->mcs_action);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689a      	ldr	r2, [r3, #8]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	7b1b      	ldrb	r3, [r3, #12]
 8002f26:	4610      	mov	r0, r2
 8002f28:	4619      	mov	r1, r3
 8002f2a:	f7fe f8e9 	bl	8001100 <XMC_CCU8_Init>
    /* Start the prescaler */
    XMC_CCU8_StartPrescaler(handle->module_ptr);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7ff ffda 	bl	8002eec <XMC_CCU8_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU8_STATUS_SUCCESS);
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3708      	adds	r7, #8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f56:	60da      	str	r2, [r3, #12]
}
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop

08002f64 <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	7b5b      	ldrb	r3, [r3, #13]
 8002f70:	f083 0301 	eor.w	r3, r3, #1
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00f      	beq.n	8002f9a <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	689a      	ldr	r2, [r3, #8]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	7b1b      	ldrb	r3, [r3, #12]
 8002f82:	4610      	mov	r0, r2
 8002f84:	4619      	mov	r1, r3
 8002f86:	f7fd ffc5 	bl	8000f14 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff ffda 	bl	8002f48 <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	3b04      	subs	r3, #4
 8002fb4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002fbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	3b04      	subs	r3, #4
 8002fc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	f023 0201 	bic.w	r2, r3, #1
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	3b04      	subs	r3, #4
 8002fd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002fd4:	4a0c      	ldr	r2, [pc, #48]	; (8003008 <pxPortInitialiseStack+0x64>)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	3b14      	subs	r3, #20
 8002fde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	3b04      	subs	r3, #4
 8002fea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f06f 0202 	mvn.w	r2, #2
 8002ff2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	3b20      	subs	r3, #32
 8002ff8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3714      	adds	r7, #20
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr
 8003008:	0800300d 	.word	0x0800300d

0800300c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003012:	2300      	movs	r3, #0
 8003014:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003016:	4b10      	ldr	r3, [pc, #64]	; (8003058 <prvTaskExitError+0x4c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800301e:	d009      	beq.n	8003034 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003020:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003024:	f383 8811 	msr	BASEPRI, r3
 8003028:	f3bf 8f6f 	isb	sy
 800302c:	f3bf 8f4f 	dsb	sy
 8003030:	60fb      	str	r3, [r7, #12]
 8003032:	e7fe      	b.n	8003032 <prvTaskExitError+0x26>
 8003034:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003038:	f383 8811 	msr	BASEPRI, r3
 800303c:	f3bf 8f6f 	isb	sy
 8003040:	f3bf 8f4f 	dsb	sy
 8003044:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003046:	bf00      	nop
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d0fc      	beq.n	8003048 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800304e:	3714      	adds	r7, #20
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	1fffc91c 	.word	0x1fffc91c
 800305c:	00000000 	.word	0x00000000

08003060 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003060:	4b07      	ldr	r3, [pc, #28]	; (8003080 <pxCurrentTCBConst2>)
 8003062:	6819      	ldr	r1, [r3, #0]
 8003064:	6808      	ldr	r0, [r1, #0]
 8003066:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800306a:	f380 8809 	msr	PSP, r0
 800306e:	f3bf 8f6f 	isb	sy
 8003072:	f04f 0000 	mov.w	r0, #0
 8003076:	f380 8811 	msr	BASEPRI, r0
 800307a:	4770      	bx	lr
 800307c:	f3af 8000 	nop.w

08003080 <pxCurrentTCBConst2>:
 8003080:	1fffc9e0 	.word	0x1fffc9e0
 8003084:	f3af 8000 	nop.w
 8003088:	f3af 8000 	nop.w
 800308c:	f3af 8000 	nop.w

08003090 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003090:	4808      	ldr	r0, [pc, #32]	; (80030b4 <prvPortStartFirstTask+0x24>)
 8003092:	6800      	ldr	r0, [r0, #0]
 8003094:	6800      	ldr	r0, [r0, #0]
 8003096:	f380 8808 	msr	MSP, r0
 800309a:	f04f 0000 	mov.w	r0, #0
 800309e:	f380 8814 	msr	CONTROL, r0
 80030a2:	b662      	cpsie	i
 80030a4:	b661      	cpsie	f
 80030a6:	f3bf 8f4f 	dsb	sy
 80030aa:	f3bf 8f6f 	isb	sy
 80030ae:	df00      	svc	0
 80030b0:	bf00      	nop
 80030b2:	0000      	.short	0x0000
 80030b4:	e000ed08 	.word	0xe000ed08

080030b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80030be:	4b44      	ldr	r3, [pc, #272]	; (80031d0 <xPortStartScheduler+0x118>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a44      	ldr	r2, [pc, #272]	; (80031d4 <xPortStartScheduler+0x11c>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d109      	bne.n	80030dc <xPortStartScheduler+0x24>
 80030c8:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80030cc:	f383 8811 	msr	BASEPRI, r3
 80030d0:	f3bf 8f6f 	isb	sy
 80030d4:	f3bf 8f4f 	dsb	sy
 80030d8:	613b      	str	r3, [r7, #16]
 80030da:	e7fe      	b.n	80030da <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80030dc:	4b3c      	ldr	r3, [pc, #240]	; (80031d0 <xPortStartScheduler+0x118>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a3d      	ldr	r2, [pc, #244]	; (80031d8 <xPortStartScheduler+0x120>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d109      	bne.n	80030fa <xPortStartScheduler+0x42>
 80030e6:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80030ea:	f383 8811 	msr	BASEPRI, r3
 80030ee:	f3bf 8f6f 	isb	sy
 80030f2:	f3bf 8f4f 	dsb	sy
 80030f6:	60fb      	str	r3, [r7, #12]
 80030f8:	e7fe      	b.n	80030f8 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80030fa:	4b38      	ldr	r3, [pc, #224]	; (80031dc <xPortStartScheduler+0x124>)
 80030fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	b2db      	uxtb	r3, r3
 8003104:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	22ff      	movs	r2, #255	; 0xff
 800310a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	b2db      	uxtb	r3, r3
 8003112:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003114:	78fb      	ldrb	r3, [r7, #3]
 8003116:	b2db      	uxtb	r3, r3
 8003118:	f023 0303 	bic.w	r3, r3, #3
 800311c:	b2da      	uxtb	r2, r3
 800311e:	4b30      	ldr	r3, [pc, #192]	; (80031e0 <xPortStartScheduler+0x128>)
 8003120:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003122:	4b30      	ldr	r3, [pc, #192]	; (80031e4 <xPortStartScheduler+0x12c>)
 8003124:	2207      	movs	r2, #7
 8003126:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003128:	e009      	b.n	800313e <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800312a:	4b2e      	ldr	r3, [pc, #184]	; (80031e4 <xPortStartScheduler+0x12c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	3b01      	subs	r3, #1
 8003130:	4a2c      	ldr	r2, [pc, #176]	; (80031e4 <xPortStartScheduler+0x12c>)
 8003132:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003134:	78fb      	ldrb	r3, [r7, #3]
 8003136:	b2db      	uxtb	r3, r3
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	b2db      	uxtb	r3, r3
 800313c:	70fb      	strb	r3, [r7, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800313e:	78fb      	ldrb	r3, [r7, #3]
 8003140:	b2db      	uxtb	r3, r3
 8003142:	b2db      	uxtb	r3, r3
 8003144:	b25b      	sxtb	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	dbef      	blt.n	800312a <xPortStartScheduler+0x72>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 800314a:	4b26      	ldr	r3, [pc, #152]	; (80031e4 <xPortStartScheduler+0x12c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f1c3 0307 	rsb	r3, r3, #7
 8003152:	2b06      	cmp	r3, #6
 8003154:	d009      	beq.n	800316a <xPortStartScheduler+0xb2>
 8003156:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800315a:	f383 8811 	msr	BASEPRI, r3
 800315e:	f3bf 8f6f 	isb	sy
 8003162:	f3bf 8f4f 	dsb	sy
 8003166:	60bb      	str	r3, [r7, #8]
 8003168:	e7fe      	b.n	8003168 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800316a:	4b1e      	ldr	r3, [pc, #120]	; (80031e4 <xPortStartScheduler+0x12c>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	021b      	lsls	r3, r3, #8
 8003170:	4a1c      	ldr	r2, [pc, #112]	; (80031e4 <xPortStartScheduler+0x12c>)
 8003172:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003174:	4b1b      	ldr	r3, [pc, #108]	; (80031e4 <xPortStartScheduler+0x12c>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800317c:	4a19      	ldr	r2, [pc, #100]	; (80031e4 <xPortStartScheduler+0x12c>)
 800317e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	b2da      	uxtb	r2, r3
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003188:	4a17      	ldr	r2, [pc, #92]	; (80031e8 <xPortStartScheduler+0x130>)
 800318a:	4b17      	ldr	r3, [pc, #92]	; (80031e8 <xPortStartScheduler+0x130>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f443 037c 	orr.w	r3, r3, #16515072	; 0xfc0000
 8003192:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003194:	4a14      	ldr	r2, [pc, #80]	; (80031e8 <xPortStartScheduler+0x130>)
 8003196:	4b14      	ldr	r3, [pc, #80]	; (80031e8 <xPortStartScheduler+0x130>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f043 437c 	orr.w	r3, r3, #4227858432	; 0xfc000000
 800319e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80031a0:	f000 f8d6 	bl	8003350 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80031a4:	4b11      	ldr	r3, [pc, #68]	; (80031ec <xPortStartScheduler+0x134>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80031aa:	f000 f8f3 	bl	8003394 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80031ae:	4a10      	ldr	r2, [pc, #64]	; (80031f0 <xPortStartScheduler+0x138>)
 80031b0:	4b0f      	ldr	r3, [pc, #60]	; (80031f0 <xPortStartScheduler+0x138>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80031b8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80031ba:	f7ff ff69 	bl	8003090 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80031be:	f001 fc4f 	bl	8004a60 <vTaskSwitchContext>
	prvTaskExitError();
 80031c2:	f7ff ff23 	bl	800300c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3718      	adds	r7, #24
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	e000ed00 	.word	0xe000ed00
 80031d4:	410fc271 	.word	0x410fc271
 80031d8:	410fc270 	.word	0x410fc270
 80031dc:	e000e400 	.word	0xe000e400
 80031e0:	1fffc9d8 	.word	0x1fffc9d8
 80031e4:	1fffc9dc 	.word	0x1fffc9dc
 80031e8:	e000ed20 	.word	0xe000ed20
 80031ec:	1fffc91c 	.word	0x1fffc91c
 80031f0:	e000ef34 	.word	0xe000ef34

080031f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80031fe:	f383 8811 	msr	BASEPRI, r3
 8003202:	f3bf 8f6f 	isb	sy
 8003206:	f3bf 8f4f 	dsb	sy
 800320a:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800320c:	4b0e      	ldr	r3, [pc, #56]	; (8003248 <vPortEnterCritical+0x54>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	3301      	adds	r3, #1
 8003212:	4a0d      	ldr	r2, [pc, #52]	; (8003248 <vPortEnterCritical+0x54>)
 8003214:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003216:	4b0c      	ldr	r3, [pc, #48]	; (8003248 <vPortEnterCritical+0x54>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d10e      	bne.n	800323c <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800321e:	4b0b      	ldr	r3, [pc, #44]	; (800324c <vPortEnterCritical+0x58>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b00      	cmp	r3, #0
 8003226:	d009      	beq.n	800323c <vPortEnterCritical+0x48>
 8003228:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800322c:	f383 8811 	msr	BASEPRI, r3
 8003230:	f3bf 8f6f 	isb	sy
 8003234:	f3bf 8f4f 	dsb	sy
 8003238:	603b      	str	r3, [r7, #0]
 800323a:	e7fe      	b.n	800323a <vPortEnterCritical+0x46>
	}
}
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	1fffc91c 	.word	0x1fffc91c
 800324c:	e000ed04 	.word	0xe000ed04

08003250 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003256:	4b10      	ldr	r3, [pc, #64]	; (8003298 <vPortExitCritical+0x48>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d109      	bne.n	8003272 <vPortExitCritical+0x22>
 800325e:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003262:	f383 8811 	msr	BASEPRI, r3
 8003266:	f3bf 8f6f 	isb	sy
 800326a:	f3bf 8f4f 	dsb	sy
 800326e:	607b      	str	r3, [r7, #4]
 8003270:	e7fe      	b.n	8003270 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003272:	4b09      	ldr	r3, [pc, #36]	; (8003298 <vPortExitCritical+0x48>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	3b01      	subs	r3, #1
 8003278:	4a07      	ldr	r2, [pc, #28]	; (8003298 <vPortExitCritical+0x48>)
 800327a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800327c:	4b06      	ldr	r3, [pc, #24]	; (8003298 <vPortExitCritical+0x48>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d104      	bne.n	800328e <vPortExitCritical+0x3e>
 8003284:	2300      	movs	r3, #0
 8003286:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr
 8003298:	1fffc91c 	.word	0x1fffc91c
 800329c:	00000000 	.word	0x00000000

080032a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80032a0:	f3ef 8009 	mrs	r0, PSP
 80032a4:	f3bf 8f6f 	isb	sy
 80032a8:	4b15      	ldr	r3, [pc, #84]	; (8003300 <pxCurrentTCBConst>)
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	f01e 0f10 	tst.w	lr, #16
 80032b0:	bf08      	it	eq
 80032b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80032b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032ba:	6010      	str	r0, [r2, #0]
 80032bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80032c0:	f04f 00fc 	mov.w	r0, #252	; 0xfc
 80032c4:	f380 8811 	msr	BASEPRI, r0
 80032c8:	f3bf 8f4f 	dsb	sy
 80032cc:	f3bf 8f6f 	isb	sy
 80032d0:	f001 fbc6 	bl	8004a60 <vTaskSwitchContext>
 80032d4:	f04f 0000 	mov.w	r0, #0
 80032d8:	f380 8811 	msr	BASEPRI, r0
 80032dc:	bc09      	pop	{r0, r3}
 80032de:	6819      	ldr	r1, [r3, #0]
 80032e0:	6808      	ldr	r0, [r1, #0]
 80032e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032e6:	f01e 0f10 	tst.w	lr, #16
 80032ea:	bf08      	it	eq
 80032ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80032f0:	f380 8809 	msr	PSP, r0
 80032f4:	f3bf 8f6f 	isb	sy
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	f3af 8000 	nop.w

08003300 <pxCurrentTCBConst>:
 8003300:	1fffc9e0 	.word	0x1fffc9e0
 8003304:	f3af 8000 	nop.w
 8003308:	f3af 8000 	nop.w
 800330c:	f3af 8000 	nop.w

08003310 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003316:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800331a:	f383 8811 	msr	BASEPRI, r3
 800331e:	f3bf 8f6f 	isb	sy
 8003322:	f3bf 8f4f 	dsb	sy
 8003326:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003328:	f001 fae0 	bl	80048ec <xTaskIncrementTick>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d003      	beq.n	800333a <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003332:	4b06      	ldr	r3, [pc, #24]	; (800334c <SysTick_Handler+0x3c>)
 8003334:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	2300      	movs	r3, #0
 800333c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	e000ed04 	.word	0xe000ed04

08003350 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003354:	4b0a      	ldr	r3, [pc, #40]	; (8003380 <vPortSetupTimerInterrupt+0x30>)
 8003356:	2200      	movs	r2, #0
 8003358:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800335a:	4b0a      	ldr	r3, [pc, #40]	; (8003384 <vPortSetupTimerInterrupt+0x34>)
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003360:	4a09      	ldr	r2, [pc, #36]	; (8003388 <vPortSetupTimerInterrupt+0x38>)
 8003362:	4b0a      	ldr	r3, [pc, #40]	; (800338c <vPortSetupTimerInterrupt+0x3c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	490a      	ldr	r1, [pc, #40]	; (8003390 <vPortSetupTimerInterrupt+0x40>)
 8003368:	fba1 1303 	umull	r1, r3, r1, r3
 800336c:	099b      	lsrs	r3, r3, #6
 800336e:	3b01      	subs	r3, #1
 8003370:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003372:	4b03      	ldr	r3, [pc, #12]	; (8003380 <vPortSetupTimerInterrupt+0x30>)
 8003374:	2207      	movs	r2, #7
 8003376:	601a      	str	r2, [r3, #0]
}
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	e000e010 	.word	0xe000e010
 8003384:	e000e018 	.word	0xe000e018
 8003388:	e000e014 	.word	0xe000e014
 800338c:	20005fc0 	.word	0x20005fc0
 8003390:	10624dd3 	.word	0x10624dd3

08003394 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003394:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80033a4 <vPortEnableVFP+0x10>
 8003398:	6801      	ldr	r1, [r0, #0]
 800339a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800339e:	6001      	str	r1, [r0, #0]
 80033a0:	4770      	bx	lr
 80033a2:	0000      	.short	0x0000
 80033a4:	e000ed88 	.word	0xe000ed88

080033a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80033ae:	f3ef 8305 	mrs	r3, IPSR
 80033b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2b0f      	cmp	r3, #15
 80033b8:	d913      	bls.n	80033e2 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80033ba:	4a15      	ldr	r2, [pc, #84]	; (8003410 <vPortValidateInterruptPriority+0x68>)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4413      	add	r3, r2
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80033c4:	4b13      	ldr	r3, [pc, #76]	; (8003414 <vPortValidateInterruptPriority+0x6c>)
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	7afa      	ldrb	r2, [r7, #11]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d209      	bcs.n	80033e2 <vPortValidateInterruptPriority+0x3a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80033ce:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80033d2:	f383 8811 	msr	BASEPRI, r3
 80033d6:	f3bf 8f6f 	isb	sy
 80033da:	f3bf 8f4f 	dsb	sy
 80033de:	607b      	str	r3, [r7, #4]
 80033e0:	e7fe      	b.n	80033e0 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80033e2:	4b0d      	ldr	r3, [pc, #52]	; (8003418 <vPortValidateInterruptPriority+0x70>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80033ea:	4b0c      	ldr	r3, [pc, #48]	; (800341c <vPortValidateInterruptPriority+0x74>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d909      	bls.n	8003406 <vPortValidateInterruptPriority+0x5e>
 80033f2:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80033f6:	f383 8811 	msr	BASEPRI, r3
 80033fa:	f3bf 8f6f 	isb	sy
 80033fe:	f3bf 8f4f 	dsb	sy
 8003402:	603b      	str	r3, [r7, #0]
 8003404:	e7fe      	b.n	8003404 <vPortValidateInterruptPriority+0x5c>
	}
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	e000e3f0 	.word	0xe000e3f0
 8003414:	1fffc9d8 	.word	0x1fffc9d8
 8003418:	e000ed0c 	.word	0xe000ed0c
 800341c:	1fffc9dc 	.word	0x1fffc9dc

08003420 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 8003428:	f001 f9a4 	bl	8004774 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f003 fbb3 	bl	8006b98 <malloc>
 8003432:	4603      	mov	r3, r0
 8003434:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003436:	f001 f9ab 	bl	8004790 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 800343a:	68fb      	ldr	r3, [r7, #12]
}
 800343c:	4618      	mov	r0, r3
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
	if( pv )
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d006      	beq.n	8003460 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 8003452:	f001 f98f 	bl	8004774 <vTaskSuspendAll>
		{
			free( pv );
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f003 fba6 	bl	8006ba8 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 800345c:	f001 f998 	bl	8004790 <xTaskResumeAll>
	}
}
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop

08003468 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f103 0208 	add.w	r2, r3, #8
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f04f 32ff 	mov.w	r2, #4294967295
 8003480:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f103 0208 	add.w	r2, r3, #8
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f103 0208 	add.w	r2, r3, #8
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop

080034a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80034c0:	b480      	push	{r7}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	689a      	ldr	r2, [r3, #8]
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	1c5a      	adds	r2, r3, #1
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	601a      	str	r2, [r3, #0]
}
 80034fc:	3714      	adds	r7, #20
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop

08003508 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351e:	d103      	bne.n	8003528 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	60fb      	str	r3, [r7, #12]
 8003526:	e00c      	b.n	8003542 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	3308      	adds	r3, #8
 800352c:	60fb      	str	r3, [r7, #12]
 800352e:	e002      	b.n	8003536 <vListInsert+0x2e>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	60fb      	str	r3, [r7, #12]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	429a      	cmp	r2, r3
 8003540:	d9f6      	bls.n	8003530 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	685a      	ldr	r2, [r3, #4]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	1c5a      	adds	r2, r3, #1
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	601a      	str	r2, [r3, #0]
}
 800356e:	3714      	adds	r7, #20
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	6892      	ldr	r2, [r2, #8]
 800358e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6852      	ldr	r2, [r2, #4]
 8003598:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d103      	bne.n	80035ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	1e5a      	subs	r2, r3, #1
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3714      	adds	r7, #20
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d109      	bne.n	80035f4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80035e0:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80035e4:	f383 8811 	msr	BASEPRI, r3
 80035e8:	f3bf 8f6f 	isb	sy
 80035ec:	f3bf 8f4f 	dsb	sy
 80035f0:	60bb      	str	r3, [r7, #8]
 80035f2:	e7fe      	b.n	80035f2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80035f4:	f7ff fdfe 	bl	80031f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003600:	68f9      	ldr	r1, [r7, #12]
 8003602:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003604:	fb01 f303 	mul.w	r3, r1, r3
 8003608:	441a      	add	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003624:	3b01      	subs	r3, #1
 8003626:	68f9      	ldr	r1, [r7, #12]
 8003628:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800362a:	fb01 f303 	mul.w	r3, r1, r3
 800362e:	441a      	add	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	22ff      	movs	r2, #255	; 0xff
 8003638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	22ff      	movs	r2, #255	; 0xff
 8003640:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d114      	bne.n	8003674 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d01a      	beq.n	8003688 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	3310      	adds	r3, #16
 8003656:	4618      	mov	r0, r3
 8003658:	f001 faa8 	bl	8004bac <xTaskRemoveFromEventList>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d012      	beq.n	8003688 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003662:	4b0d      	ldr	r3, [pc, #52]	; (8003698 <xQueueGenericReset+0xcc>)
 8003664:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	f3bf 8f4f 	dsb	sy
 800366e:	f3bf 8f6f 	isb	sy
 8003672:	e009      	b.n	8003688 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	3310      	adds	r3, #16
 8003678:	4618      	mov	r0, r3
 800367a:	f7ff fef5 	bl	8003468 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	3324      	adds	r3, #36	; 0x24
 8003682:	4618      	mov	r0, r3
 8003684:	f7ff fef0 	bl	8003468 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003688:	f7ff fde2 	bl	8003250 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800368c:	2301      	movs	r3, #1
}
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	e000ed04 	.word	0xe000ed04

0800369c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800369c:	b590      	push	{r4, r7, lr}
 800369e:	b08b      	sub	sp, #44	; 0x2c
 80036a0:	af02      	add	r7, sp, #8
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	4613      	mov	r3, r2
 80036a8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d109      	bne.n	80036c4 <xQueueGenericCreate+0x28>
 80036b0:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80036b4:	f383 8811 	msr	BASEPRI, r3
 80036b8:	f3bf 8f6f 	isb	sy
 80036bc:	f3bf 8f4f 	dsb	sy
 80036c0:	613b      	str	r3, [r7, #16]
 80036c2:	e7fe      	b.n	80036c2 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d102      	bne.n	80036d0 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80036ca:	2300      	movs	r3, #0
 80036cc:	61fb      	str	r3, [r7, #28]
 80036ce:	e004      	b.n	80036da <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	fb02 f303 	mul.w	r3, r2, r3
 80036d8:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	3354      	adds	r3, #84	; 0x54
 80036de:	4618      	mov	r0, r3
 80036e0:	f7ff fe9e 	bl	8003420 <pvPortMalloc>
 80036e4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00d      	beq.n	8003708 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	3354      	adds	r3, #84	; 0x54
 80036f4:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80036f6:	79fc      	ldrb	r4, [r7, #7]
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	68b9      	ldr	r1, [r7, #8]
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	4623      	mov	r3, r4
 8003704:	f000 f806 	bl	8003714 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003708:	69bb      	ldr	r3, [r7, #24]
	}
 800370a:	4618      	mov	r0, r3
 800370c:	3724      	adds	r7, #36	; 0x24
 800370e:	46bd      	mov	sp, r7
 8003710:	bd90      	pop	{r4, r7, pc}
 8003712:	bf00      	nop

08003714 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
 8003720:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d103      	bne.n	8003730 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	e002      	b.n	8003736 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	68ba      	ldr	r2, [r7, #8]
 8003740:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003742:	69b8      	ldr	r0, [r7, #24]
 8003744:	2101      	movs	r1, #1
 8003746:	f7ff ff41 	bl	80035cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	78fa      	ldrb	r2, [r7, #3]
 800374e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	2200      	movs	r2, #0
 8003756:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop

08003760 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b08e      	sub	sp, #56	; 0x38
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
 800376c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800376e:	2300      	movs	r3, #0
 8003770:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003778:	2b00      	cmp	r3, #0
 800377a:	d109      	bne.n	8003790 <xQueueGenericSend+0x30>
 800377c:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003780:	f383 8811 	msr	BASEPRI, r3
 8003784:	f3bf 8f6f 	isb	sy
 8003788:	f3bf 8f4f 	dsb	sy
 800378c:	627b      	str	r3, [r7, #36]	; 0x24
 800378e:	e7fe      	b.n	800378e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d103      	bne.n	800379e <xQueueGenericSend+0x3e>
 8003796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <xQueueGenericSend+0x42>
 800379e:	2301      	movs	r3, #1
 80037a0:	e000      	b.n	80037a4 <xQueueGenericSend+0x44>
 80037a2:	2300      	movs	r3, #0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d109      	bne.n	80037bc <xQueueGenericSend+0x5c>
 80037a8:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80037ac:	f383 8811 	msr	BASEPRI, r3
 80037b0:	f3bf 8f6f 	isb	sy
 80037b4:	f3bf 8f4f 	dsb	sy
 80037b8:	623b      	str	r3, [r7, #32]
 80037ba:	e7fe      	b.n	80037ba <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d103      	bne.n	80037ca <xQueueGenericSend+0x6a>
 80037c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d101      	bne.n	80037ce <xQueueGenericSend+0x6e>
 80037ca:	2301      	movs	r3, #1
 80037cc:	e000      	b.n	80037d0 <xQueueGenericSend+0x70>
 80037ce:	2300      	movs	r3, #0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d109      	bne.n	80037e8 <xQueueGenericSend+0x88>
 80037d4:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80037d8:	f383 8811 	msr	BASEPRI, r3
 80037dc:	f3bf 8f6f 	isb	sy
 80037e0:	f3bf 8f4f 	dsb	sy
 80037e4:	61fb      	str	r3, [r7, #28]
 80037e6:	e7fe      	b.n	80037e6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80037e8:	f001 fb88 	bl	8004efc <xTaskGetSchedulerState>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d102      	bne.n	80037f8 <xQueueGenericSend+0x98>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <xQueueGenericSend+0x9c>
 80037f8:	2301      	movs	r3, #1
 80037fa:	e000      	b.n	80037fe <xQueueGenericSend+0x9e>
 80037fc:	2300      	movs	r3, #0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d109      	bne.n	8003816 <xQueueGenericSend+0xb6>
 8003802:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003806:	f383 8811 	msr	BASEPRI, r3
 800380a:	f3bf 8f6f 	isb	sy
 800380e:	f3bf 8f4f 	dsb	sy
 8003812:	61bb      	str	r3, [r7, #24]
 8003814:	e7fe      	b.n	8003814 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003816:	f7ff fced 	bl	80031f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800381a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800381e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003822:	429a      	cmp	r2, r3
 8003824:	d302      	bcc.n	800382c <xQueueGenericSend+0xcc>
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	2b02      	cmp	r3, #2
 800382a:	d148      	bne.n	80038be <xQueueGenericSend+0x15e>
			{
				traceQUEUE_SEND( pxQueue );

				#if ( configUSE_QUEUE_SETS == 1 )
				{
				UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800382c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003830:	62fb      	str	r3, [r7, #44]	; 0x2c

					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003832:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003834:	68b9      	ldr	r1, [r7, #8]
 8003836:	683a      	ldr	r2, [r7, #0]
 8003838:	f000 fbf4 	bl	8004024 <prvCopyDataToQueue>
 800383c:	62b8      	str	r0, [r7, #40]	; 0x28

					if( pxQueue->pxQueueSetContainer != NULL )
 800383e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003842:	2b00      	cmp	r3, #0
 8003844:	d017      	beq.n	8003876 <xQueueGenericSend+0x116>
					{
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	2b02      	cmp	r3, #2
 800384a:	d104      	bne.n	8003856 <xQueueGenericSend+0xf6>
 800384c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <xQueueGenericSend+0xf6>
 8003852:	bf00      	nop
 8003854:	e02f      	b.n	80038b6 <xQueueGenericSend+0x156>
							/* Do not notify the queue set as an existing item
							was overwritten in the queue so the number of items
							in the queue has not changed. */
							mtCOVERAGE_TEST_MARKER();
						}
						else if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 8003856:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003858:	6839      	ldr	r1, [r7, #0]
 800385a:	f000 fd61 	bl	8004320 <prvNotifyQueueSetContainer>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d028      	beq.n	80038b6 <xQueueGenericSend+0x156>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
 8003864:	4b4c      	ldr	r3, [pc, #304]	; (8003998 <xQueueGenericSend+0x238>)
 8003866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	f3bf 8f4f 	dsb	sy
 8003870:	f3bf 8f6f 	isb	sy
 8003874:	e01f      	b.n	80038b6 <xQueueGenericSend+0x156>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387a:	2b00      	cmp	r3, #0
 800387c:	d010      	beq.n	80038a0 <xQueueGenericSend+0x140>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800387e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003880:	3324      	adds	r3, #36	; 0x24
 8003882:	4618      	mov	r0, r3
 8003884:	f001 f992 	bl	8004bac <xTaskRemoveFromEventList>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d013      	beq.n	80038b6 <xQueueGenericSend+0x156>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
 800388e:	4b42      	ldr	r3, [pc, #264]	; (8003998 <xQueueGenericSend+0x238>)
 8003890:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003894:	601a      	str	r2, [r3, #0]
 8003896:	f3bf 8f4f 	dsb	sy
 800389a:	f3bf 8f6f 	isb	sy
 800389e:	e00a      	b.n	80038b6 <xQueueGenericSend+0x156>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
 80038a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d007      	beq.n	80038b6 <xQueueGenericSend+0x156>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
 80038a6:	4b3c      	ldr	r3, [pc, #240]	; (8003998 <xQueueGenericSend+0x238>)
 80038a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	f3bf 8f4f 	dsb	sy
 80038b2:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80038b6:	f7ff fccb 	bl	8003250 <vPortExitCritical>
				return pdPASS;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e067      	b.n	800398e <xQueueGenericSend+0x22e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d103      	bne.n	80038cc <xQueueGenericSend+0x16c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80038c4:	f7ff fcc4 	bl	8003250 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80038c8:	2300      	movs	r3, #0
 80038ca:	e060      	b.n	800398e <xQueueGenericSend+0x22e>
				}
				else if( xEntryTimeSet == pdFALSE )
 80038cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d106      	bne.n	80038e0 <xQueueGenericSend+0x180>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80038d2:	f107 0310 	add.w	r3, r7, #16
 80038d6:	4618      	mov	r0, r3
 80038d8:	f001 f9cc 	bl	8004c74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80038dc:	2301      	movs	r3, #1
 80038de:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80038e0:	f7ff fcb6 	bl	8003250 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80038e4:	f000 ff46 	bl	8004774 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80038e8:	f7ff fc84 	bl	80031f4 <vPortEnterCritical>
 80038ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	b25b      	sxtb	r3, r3
 80038f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038fa:	d103      	bne.n	8003904 <xQueueGenericSend+0x1a4>
 80038fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003906:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800390a:	b2db      	uxtb	r3, r3
 800390c:	b25b      	sxtb	r3, r3
 800390e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003912:	d103      	bne.n	800391c <xQueueGenericSend+0x1bc>
 8003914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003916:	2200      	movs	r2, #0
 8003918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800391c:	f7ff fc98 	bl	8003250 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003920:	f107 0210 	add.w	r2, r7, #16
 8003924:	1d3b      	adds	r3, r7, #4
 8003926:	4610      	mov	r0, r2
 8003928:	4619      	mov	r1, r3
 800392a:	f001 f9b9 	bl	8004ca0 <xTaskCheckForTimeOut>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d124      	bne.n	800397e <xQueueGenericSend+0x21e>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003934:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003936:	f000 fc7d 	bl	8004234 <prvIsQueueFull>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d018      	beq.n	8003972 <xQueueGenericSend+0x212>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003942:	f103 0210 	add.w	r2, r3, #16
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4610      	mov	r0, r2
 800394a:	4619      	mov	r1, r3
 800394c:	f001 f8e2 	bl	8004b14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003950:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003952:	f000 fbf9 	bl	8004148 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003956:	f000 ff1b 	bl	8004790 <xTaskResumeAll>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d115      	bne.n	800398c <xQueueGenericSend+0x22c>
				{
					portYIELD_WITHIN_API();
 8003960:	4b0d      	ldr	r3, [pc, #52]	; (8003998 <xQueueGenericSend+0x238>)
 8003962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	f3bf 8f4f 	dsb	sy
 800396c:	f3bf 8f6f 	isb	sy
 8003970:	e00c      	b.n	800398c <xQueueGenericSend+0x22c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003972:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003974:	f000 fbe8 	bl	8004148 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003978:	f000 ff0a 	bl	8004790 <xTaskResumeAll>
 800397c:	e74b      	b.n	8003816 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800397e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003980:	f000 fbe2 	bl	8004148 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003984:	f000 ff04 	bl	8004790 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003988:	2300      	movs	r3, #0
 800398a:	e000      	b.n	800398e <xQueueGenericSend+0x22e>
		}
	} /*lint -restore */
 800398c:	e743      	b.n	8003816 <xQueueGenericSend+0xb6>
}
 800398e:	4618      	mov	r0, r3
 8003990:	3738      	adds	r7, #56	; 0x38
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	e000ed04 	.word	0xe000ed04

0800399c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b08e      	sub	sp, #56	; 0x38
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
 80039a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80039ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d109      	bne.n	80039c8 <xQueueGenericSendFromISR+0x2c>
 80039b4:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80039b8:	f383 8811 	msr	BASEPRI, r3
 80039bc:	f3bf 8f6f 	isb	sy
 80039c0:	f3bf 8f4f 	dsb	sy
 80039c4:	627b      	str	r3, [r7, #36]	; 0x24
 80039c6:	e7fe      	b.n	80039c6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d103      	bne.n	80039d6 <xQueueGenericSendFromISR+0x3a>
 80039ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <xQueueGenericSendFromISR+0x3e>
 80039d6:	2301      	movs	r3, #1
 80039d8:	e000      	b.n	80039dc <xQueueGenericSendFromISR+0x40>
 80039da:	2300      	movs	r3, #0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d109      	bne.n	80039f4 <xQueueGenericSendFromISR+0x58>
 80039e0:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80039e4:	f383 8811 	msr	BASEPRI, r3
 80039e8:	f3bf 8f6f 	isb	sy
 80039ec:	f3bf 8f4f 	dsb	sy
 80039f0:	623b      	str	r3, [r7, #32]
 80039f2:	e7fe      	b.n	80039f2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d103      	bne.n	8003a02 <xQueueGenericSendFromISR+0x66>
 80039fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d101      	bne.n	8003a06 <xQueueGenericSendFromISR+0x6a>
 8003a02:	2301      	movs	r3, #1
 8003a04:	e000      	b.n	8003a08 <xQueueGenericSendFromISR+0x6c>
 8003a06:	2300      	movs	r3, #0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d109      	bne.n	8003a20 <xQueueGenericSendFromISR+0x84>
 8003a0c:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003a10:	f383 8811 	msr	BASEPRI, r3
 8003a14:	f3bf 8f6f 	isb	sy
 8003a18:	f3bf 8f4f 	dsb	sy
 8003a1c:	61fb      	str	r3, [r7, #28]
 8003a1e:	e7fe      	b.n	8003a1e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003a20:	f7ff fcc2 	bl	80033a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003a24:	f3ef 8211 	mrs	r2, BASEPRI
 8003a28:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003a2c:	f383 8811 	msr	BASEPRI, r3
 8003a30:	f3bf 8f6f 	isb	sy
 8003a34:	f3bf 8f4f 	dsb	sy
 8003a38:	61ba      	str	r2, [r7, #24]
 8003a3a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003a3c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d302      	bcc.n	8003a52 <xQueueGenericSendFromISR+0xb6>
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d13e      	bne.n	8003ad0 <xQueueGenericSendFromISR+0x134>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a5e:	68b9      	ldr	r1, [r7, #8]
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	f000 fadf 	bl	8004024 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003a66:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a6e:	d124      	bne.n	8003aba <xQueueGenericSendFromISR+0x11e>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 8003a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00d      	beq.n	8003a94 <xQueueGenericSendFromISR+0xf8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 8003a78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a7a:	6839      	ldr	r1, [r7, #0]
 8003a7c:	f000 fc50 	bl	8004320 <prvNotifyQueueSetContainer>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d021      	beq.n	8003aca <xQueueGenericSendFromISR+0x12e>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d01e      	beq.n	8003aca <xQueueGenericSendFromISR+0x12e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	e01a      	b.n	8003aca <xQueueGenericSendFromISR+0x12e>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d016      	beq.n	8003aca <xQueueGenericSendFromISR+0x12e>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9e:	3324      	adds	r3, #36	; 0x24
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f001 f883 	bl	8004bac <xTaskRemoveFromEventList>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00e      	beq.n	8003aca <xQueueGenericSendFromISR+0x12e>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00b      	beq.n	8003aca <xQueueGenericSendFromISR+0x12e>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	601a      	str	r2, [r3, #0]
 8003ab8:	e007      	b.n	8003aca <xQueueGenericSendFromISR+0x12e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003aba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003abe:	3301      	adds	r3, #1
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003aca:	2301      	movs	r3, #1
 8003acc:	637b      	str	r3, [r7, #52]	; 0x34
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
 8003ace:	e001      	b.n	8003ad4 <xQueueGenericSendFromISR+0x138>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3738      	adds	r7, #56	; 0x38
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b08e      	sub	sp, #56	; 0x38
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d109      	bne.n	8003b10 <xQueueGiveFromISR+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003afc:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003b00:	f383 8811 	msr	BASEPRI, r3
 8003b04:	f3bf 8f6f 	isb	sy
 8003b08:	f3bf 8f4f 	dsb	sy
 8003b0c:	623b      	str	r3, [r7, #32]
 8003b0e:	e7fe      	b.n	8003b0e <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d009      	beq.n	8003b2c <xQueueGiveFromISR+0x44>
 8003b18:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003b1c:	f383 8811 	msr	BASEPRI, r3
 8003b20:	f3bf 8f6f 	isb	sy
 8003b24:	f3bf 8f4f 	dsb	sy
 8003b28:	61fb      	str	r3, [r7, #28]
 8003b2a:	e7fe      	b.n	8003b2a <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d103      	bne.n	8003b3c <xQueueGiveFromISR+0x54>
 8003b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d101      	bne.n	8003b40 <xQueueGiveFromISR+0x58>
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e000      	b.n	8003b42 <xQueueGiveFromISR+0x5a>
 8003b40:	2300      	movs	r3, #0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d109      	bne.n	8003b5a <xQueueGiveFromISR+0x72>
 8003b46:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003b4a:	f383 8811 	msr	BASEPRI, r3
 8003b4e:	f3bf 8f6f 	isb	sy
 8003b52:	f3bf 8f4f 	dsb	sy
 8003b56:	61bb      	str	r3, [r7, #24]
 8003b58:	e7fe      	b.n	8003b58 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b5a:	f7ff fc25 	bl	80033a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003b5e:	f3ef 8211 	mrs	r2, BASEPRI
 8003b62:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003b66:	f383 8811 	msr	BASEPRI, r3
 8003b6a:	f3bf 8f6f 	isb	sy
 8003b6e:	f3bf 8f4f 	dsb	sy
 8003b72:	617a      	str	r2, [r7, #20]
 8003b74:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003b76:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b78:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d93d      	bls.n	8003c06 <xQueueGiveFromISR+0x11e>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b96:	1c5a      	adds	r2, r3, #1
 8003b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003b9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba4:	d124      	bne.n	8003bf0 <xQueueGiveFromISR+0x108>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 8003ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00d      	beq.n	8003bca <xQueueGiveFromISR+0xe2>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
 8003bae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	f000 fbb5 	bl	8004320 <prvNotifyQueueSetContainer>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d021      	beq.n	8003c00 <xQueueGiveFromISR+0x118>
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d01e      	beq.n	8003c00 <xQueueGiveFromISR+0x118>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	e01a      	b.n	8003c00 <xQueueGiveFromISR+0x118>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d016      	beq.n	8003c00 <xQueueGiveFromISR+0x118>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd4:	3324      	adds	r3, #36	; 0x24
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 ffe8 	bl	8004bac <xTaskRemoveFromEventList>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00e      	beq.n	8003c00 <xQueueGiveFromISR+0x118>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00b      	beq.n	8003c00 <xQueueGiveFromISR+0x118>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	2201      	movs	r2, #1
 8003bec:	601a      	str	r2, [r3, #0]
 8003bee:	e007      	b.n	8003c00 <xQueueGiveFromISR+0x118>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003bf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	b2da      	uxtb	r2, r3
 8003bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003c00:	2301      	movs	r3, #1
 8003c02:	637b      	str	r3, [r7, #52]	; 0x34
 8003c04:	e001      	b.n	8003c0a <xQueueGiveFromISR+0x122>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003c06:	2300      	movs	r3, #0
 8003c08:	637b      	str	r3, [r7, #52]	; 0x34
 8003c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c0c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3738      	adds	r7, #56	; 0x38
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop

08003c20 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b08c      	sub	sp, #48	; 0x30
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d109      	bne.n	8003c4e <xQueueReceive+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003c3a:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003c3e:	f383 8811 	msr	BASEPRI, r3
 8003c42:	f3bf 8f6f 	isb	sy
 8003c46:	f3bf 8f4f 	dsb	sy
 8003c4a:	623b      	str	r3, [r7, #32]
 8003c4c:	e7fe      	b.n	8003c4c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d103      	bne.n	8003c5c <xQueueReceive+0x3c>
 8003c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d101      	bne.n	8003c60 <xQueueReceive+0x40>
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e000      	b.n	8003c62 <xQueueReceive+0x42>
 8003c60:	2300      	movs	r3, #0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d109      	bne.n	8003c7a <xQueueReceive+0x5a>
 8003c66:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003c6a:	f383 8811 	msr	BASEPRI, r3
 8003c6e:	f3bf 8f6f 	isb	sy
 8003c72:	f3bf 8f4f 	dsb	sy
 8003c76:	61fb      	str	r3, [r7, #28]
 8003c78:	e7fe      	b.n	8003c78 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c7a:	f001 f93f 	bl	8004efc <xTaskGetSchedulerState>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d102      	bne.n	8003c8a <xQueueReceive+0x6a>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <xQueueReceive+0x6e>
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e000      	b.n	8003c90 <xQueueReceive+0x70>
 8003c8e:	2300      	movs	r3, #0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d109      	bne.n	8003ca8 <xQueueReceive+0x88>
 8003c94:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003c98:	f383 8811 	msr	BASEPRI, r3
 8003c9c:	f3bf 8f6f 	isb	sy
 8003ca0:	f3bf 8f4f 	dsb	sy
 8003ca4:	61bb      	str	r3, [r7, #24]
 8003ca6:	e7fe      	b.n	8003ca6 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ca8:	f7ff faa4 	bl	80031f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d01f      	beq.n	8003cf8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003cb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cba:	68b9      	ldr	r1, [r7, #8]
 8003cbc:	f000 fa1e 	bl	80040fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc2:	1e5a      	subs	r2, r3, #1
 8003cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00f      	beq.n	8003cf0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd2:	3310      	adds	r3, #16
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f000 ff69 	bl	8004bac <xTaskRemoveFromEventList>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d007      	beq.n	8003cf0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003ce0:	4b3e      	ldr	r3, [pc, #248]	; (8003ddc <xQueueReceive+0x1bc>)
 8003ce2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ce6:	601a      	str	r2, [r3, #0]
 8003ce8:	f3bf 8f4f 	dsb	sy
 8003cec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003cf0:	f7ff faae 	bl	8003250 <vPortExitCritical>
				return pdPASS;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e06d      	b.n	8003dd4 <xQueueReceive+0x1b4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d103      	bne.n	8003d06 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003cfe:	f7ff faa7 	bl	8003250 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003d02:	2300      	movs	r3, #0
 8003d04:	e066      	b.n	8003dd4 <xQueueReceive+0x1b4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d106      	bne.n	8003d1a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d0c:	f107 0310 	add.w	r3, r7, #16
 8003d10:	4618      	mov	r0, r3
 8003d12:	f000 ffaf 	bl	8004c74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d16:	2301      	movs	r3, #1
 8003d18:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d1a:	f7ff fa99 	bl	8003250 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d1e:	f000 fd29 	bl	8004774 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d22:	f7ff fa67 	bl	80031f4 <vPortEnterCritical>
 8003d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	b25b      	sxtb	r3, r3
 8003d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d34:	d103      	bne.n	8003d3e <xQueueReceive+0x11e>
 8003d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	b25b      	sxtb	r3, r3
 8003d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d4c:	d103      	bne.n	8003d56 <xQueueReceive+0x136>
 8003d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d56:	f7ff fa7b 	bl	8003250 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d5a:	f107 0210 	add.w	r2, r7, #16
 8003d5e:	1d3b      	adds	r3, r7, #4
 8003d60:	4610      	mov	r0, r2
 8003d62:	4619      	mov	r1, r3
 8003d64:	f000 ff9c 	bl	8004ca0 <xTaskCheckForTimeOut>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d124      	bne.n	8003db8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d70:	f000 fa4a 	bl	8004208 <prvIsQueueEmpty>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d018      	beq.n	8003dac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7c:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4610      	mov	r0, r2
 8003d84:	4619      	mov	r1, r3
 8003d86:	f000 fec5 	bl	8004b14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d8c:	f000 f9dc 	bl	8004148 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d90:	f000 fcfe 	bl	8004790 <xTaskResumeAll>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d11b      	bne.n	8003dd2 <xQueueReceive+0x1b2>
				{
					portYIELD_WITHIN_API();
 8003d9a:	4b10      	ldr	r3, [pc, #64]	; (8003ddc <xQueueReceive+0x1bc>)
 8003d9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003da0:	601a      	str	r2, [r3, #0]
 8003da2:	f3bf 8f4f 	dsb	sy
 8003da6:	f3bf 8f6f 	isb	sy
 8003daa:	e012      	b.n	8003dd2 <xQueueReceive+0x1b2>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003dac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dae:	f000 f9cb 	bl	8004148 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003db2:	f000 fced 	bl	8004790 <xTaskResumeAll>
 8003db6:	e777      	b.n	8003ca8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003db8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dba:	f000 f9c5 	bl	8004148 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003dbe:	f000 fce7 	bl	8004790 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003dc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dc4:	f000 fa20 	bl	8004208 <prvIsQueueEmpty>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <xQueueReceive+0x1b2>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	e000      	b.n	8003dd4 <xQueueReceive+0x1b4>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
 8003dd2:	e769      	b.n	8003ca8 <xQueueReceive+0x88>
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3730      	adds	r7, #48	; 0x30
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	e000ed04 	.word	0xe000ed04

08003de0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b08e      	sub	sp, #56	; 0x38
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003dea:	2300      	movs	r3, #0
 8003dec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003df2:	2300      	movs	r3, #0
 8003df4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d109      	bne.n	8003e10 <xQueueSemaphoreTake+0x30>
 8003dfc:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003e00:	f383 8811 	msr	BASEPRI, r3
 8003e04:	f3bf 8f6f 	isb	sy
 8003e08:	f3bf 8f4f 	dsb	sy
 8003e0c:	623b      	str	r3, [r7, #32]
 8003e0e:	e7fe      	b.n	8003e0e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d009      	beq.n	8003e2c <xQueueSemaphoreTake+0x4c>
 8003e18:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003e1c:	f383 8811 	msr	BASEPRI, r3
 8003e20:	f3bf 8f6f 	isb	sy
 8003e24:	f3bf 8f4f 	dsb	sy
 8003e28:	61fb      	str	r3, [r7, #28]
 8003e2a:	e7fe      	b.n	8003e2a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e2c:	f001 f866 	bl	8004efc <xTaskGetSchedulerState>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d102      	bne.n	8003e3c <xQueueSemaphoreTake+0x5c>
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d101      	bne.n	8003e40 <xQueueSemaphoreTake+0x60>
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e000      	b.n	8003e42 <xQueueSemaphoreTake+0x62>
 8003e40:	2300      	movs	r3, #0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d109      	bne.n	8003e5a <xQueueSemaphoreTake+0x7a>
 8003e46:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003e4a:	f383 8811 	msr	BASEPRI, r3
 8003e4e:	f3bf 8f6f 	isb	sy
 8003e52:	f3bf 8f4f 	dsb	sy
 8003e56:	61bb      	str	r3, [r7, #24]
 8003e58:	e7fe      	b.n	8003e58 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e5a:	f7ff f9cb 	bl	80031f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e62:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d024      	beq.n	8003eb4 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6c:	1e5a      	subs	r2, r3, #1
 8003e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e70:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d104      	bne.n	8003e84 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003e7a:	f001 f9ff 	bl	800527c <pvTaskIncrementMutexHeldCount>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e82:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d00f      	beq.n	8003eac <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8e:	3310      	adds	r3, #16
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 fe8b 	bl	8004bac <xTaskRemoveFromEventList>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d007      	beq.n	8003eac <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e9c:	4b54      	ldr	r3, [pc, #336]	; (8003ff0 <xQueueSemaphoreTake+0x210>)
 8003e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ea2:	601a      	str	r2, [r3, #0]
 8003ea4:	f3bf 8f4f 	dsb	sy
 8003ea8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003eac:	f7ff f9d0 	bl	8003250 <vPortExitCritical>
				return pdPASS;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e099      	b.n	8003fe8 <xQueueSemaphoreTake+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d110      	bne.n	8003edc <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d009      	beq.n	8003ed4 <xQueueSemaphoreTake+0xf4>
 8003ec0:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003ec4:	f383 8811 	msr	BASEPRI, r3
 8003ec8:	f3bf 8f6f 	isb	sy
 8003ecc:	f3bf 8f4f 	dsb	sy
 8003ed0:	617b      	str	r3, [r7, #20]
 8003ed2:	e7fe      	b.n	8003ed2 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003ed4:	f7ff f9bc 	bl	8003250 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	e085      	b.n	8003fe8 <xQueueSemaphoreTake+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d106      	bne.n	8003ef0 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ee2:	f107 030c 	add.w	r3, r7, #12
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 fec4 	bl	8004c74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003eec:	2301      	movs	r3, #1
 8003eee:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ef0:	f7ff f9ae 	bl	8003250 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ef4:	f000 fc3e 	bl	8004774 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ef8:	f7ff f97c 	bl	80031f4 <vPortEnterCritical>
 8003efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003efe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	b25b      	sxtb	r3, r3
 8003f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f0a:	d103      	bne.n	8003f14 <xQueueSemaphoreTake+0x134>
 8003f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	b25b      	sxtb	r3, r3
 8003f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f22:	d103      	bne.n	8003f2c <xQueueSemaphoreTake+0x14c>
 8003f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f2c:	f7ff f990 	bl	8003250 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f30:	f107 020c 	add.w	r2, r7, #12
 8003f34:	463b      	mov	r3, r7
 8003f36:	4610      	mov	r0, r2
 8003f38:	4619      	mov	r1, r3
 8003f3a:	f000 feb1 	bl	8004ca0 <xTaskCheckForTimeOut>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d132      	bne.n	8003faa <xQueueSemaphoreTake+0x1ca>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f46:	f000 f95f 	bl	8004208 <prvIsQueueEmpty>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d026      	beq.n	8003f9e <xQueueSemaphoreTake+0x1be>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d109      	bne.n	8003f6c <xQueueSemaphoreTake+0x18c>
					{
						taskENTER_CRITICAL();
 8003f58:	f7ff f94c 	bl	80031f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f000 ffe9 	bl	8004f38 <xTaskPriorityInherit>
 8003f66:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003f68:	f7ff f972 	bl	8003250 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f6e:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	4610      	mov	r0, r2
 8003f76:	4619      	mov	r1, r3
 8003f78:	f000 fdcc 	bl	8004b14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003f7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f7e:	f000 f8e3 	bl	8004148 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f82:	f000 fc05 	bl	8004790 <xTaskResumeAll>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d12c      	bne.n	8003fe6 <xQueueSemaphoreTake+0x206>
				{
					portYIELD_WITHIN_API();
 8003f8c:	4b18      	ldr	r3, [pc, #96]	; (8003ff0 <xQueueSemaphoreTake+0x210>)
 8003f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	f3bf 8f6f 	isb	sy
 8003f9c:	e023      	b.n	8003fe6 <xQueueSemaphoreTake+0x206>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003f9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003fa0:	f000 f8d2 	bl	8004148 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003fa4:	f000 fbf4 	bl	8004790 <xTaskResumeAll>
 8003fa8:	e757      	b.n	8003e5a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003faa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003fac:	f000 f8cc 	bl	8004148 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003fb0:	f000 fbee 	bl	8004790 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003fb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003fb6:	f000 f927 	bl	8004208 <prvIsQueueEmpty>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d012      	beq.n	8003fe6 <xQueueSemaphoreTake+0x206>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00d      	beq.n	8003fe2 <xQueueSemaphoreTake+0x202>
					{
						taskENTER_CRITICAL();
 8003fc6:	f7ff f915 	bl	80031f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003fca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003fcc:	f000 f812 	bl	8003ff4 <prvGetDisinheritPriorityAfterTimeout>
 8003fd0:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003fda:	f001 f8b5 	bl	8005148 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003fde:	f7ff f937 	bl	8003250 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	e000      	b.n	8003fe8 <xQueueSemaphoreTake+0x208>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
 8003fe6:	e738      	b.n	8003e5a <xQueueSemaphoreTake+0x7a>
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3738      	adds	r7, #56	; 0x38
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	e000ed04 	.word	0xe000ed04

08003ff4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004000:	2b00      	cmp	r3, #0
 8004002:	d006      	beq.n	8004012 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f1c3 0305 	rsb	r3, r3, #5
 800400e:	60fb      	str	r3, [r7, #12]
 8004010:	e001      	b.n	8004016 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004012:	2300      	movs	r3, #0
 8004014:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004016:	68fb      	ldr	r3, [r7, #12]
	}
 8004018:	4618      	mov	r0, r3
 800401a:	3714      	adds	r7, #20
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b086      	sub	sp, #24
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004030:	2300      	movs	r3, #0
 8004032:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004038:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10d      	bne.n	800405e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d14f      	bne.n	80040ea <prvCopyDataToQueue+0xc6>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	4618      	mov	r0, r3
 8004050:	f000 fff4 	bl	800503c <xTaskPriorityDisinherit>
 8004054:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	609a      	str	r2, [r3, #8]
 800405c:	e045      	b.n	80040ea <prvCopyDataToQueue+0xc6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d11a      	bne.n	800409a <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406c:	4610      	mov	r0, r2
 800406e:	68b9      	ldr	r1, [r7, #8]
 8004070:	461a      	mov	r2, r3
 8004072:	f002 fda1 	bl	8006bb8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407e:	441a      	add	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	429a      	cmp	r2, r3
 800408e:	d32c      	bcc.n	80040ea <prvCopyDataToQueue+0xc6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	605a      	str	r2, [r3, #4]
 8004098:	e027      	b.n	80040ea <prvCopyDataToQueue+0xc6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	68da      	ldr	r2, [r3, #12]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a2:	4610      	mov	r0, r2
 80040a4:	68b9      	ldr	r1, [r7, #8]
 80040a6:	461a      	mov	r2, r3
 80040a8:	f002 fd86 	bl	8006bb8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	68da      	ldr	r2, [r3, #12]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b4:	425b      	negs	r3, r3
 80040b6:	441a      	add	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	68da      	ldr	r2, [r3, #12]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d207      	bcs.n	80040d8 <prvCopyDataToQueue+0xb4>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	689a      	ldr	r2, [r3, #8]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d0:	425b      	negs	r3, r3
 80040d2:	441a      	add	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d105      	bne.n	80040ea <prvCopyDataToQueue+0xc6>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d002      	beq.n	80040ea <prvCopyDataToQueue+0xc6>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	3b01      	subs	r3, #1
 80040e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	1c5a      	adds	r2, r3, #1
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80040f2:	697b      	ldr	r3, [r7, #20]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3718      	adds	r7, #24
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410a:	2b00      	cmp	r3, #0
 800410c:	d019      	beq.n	8004142 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68da      	ldr	r2, [r3, #12]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004116:	441a      	add	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68da      	ldr	r2, [r3, #12]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	429a      	cmp	r2, r3
 8004126:	d303      	bcc.n	8004130 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	68da      	ldr	r2, [r3, #12]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004138:	6838      	ldr	r0, [r7, #0]
 800413a:	4611      	mov	r1, r2
 800413c:	461a      	mov	r2, r3
 800413e:	f002 fd3b 	bl	8006bb8 <memcpy>
	}
}
 8004142:	3708      	adds	r7, #8
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004150:	f7ff f850 	bl	80031f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800415a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800415c:	e021      	b.n	80041a2 <prvUnlockQueue+0x5a>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004162:	2b00      	cmp	r3, #0
 8004164:	d009      	beq.n	800417a <prvUnlockQueue+0x32>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	2100      	movs	r1, #0
 800416a:	f000 f8d9 	bl	8004320 <prvNotifyQueueSetContainer>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d012      	beq.n	800419a <prvUnlockQueue+0x52>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
 8004174:	f000 fe04 	bl	8004d80 <vTaskMissedYield>
 8004178:	e00f      	b.n	800419a <prvUnlockQueue+0x52>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00a      	beq.n	8004198 <prvUnlockQueue+0x50>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	3324      	adds	r3, #36	; 0x24
 8004186:	4618      	mov	r0, r3
 8004188:	f000 fd10 	bl	8004bac <xTaskRemoveFromEventList>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <prvUnlockQueue+0x52>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
 8004192:	f000 fdf5 	bl	8004d80 <vTaskMissedYield>
 8004196:	e000      	b.n	800419a <prvUnlockQueue+0x52>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						break;
 8004198:	e007      	b.n	80041aa <prvUnlockQueue+0x62>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800419a:	7bfb      	ldrb	r3, [r7, #15]
 800419c:	3b01      	subs	r3, #1
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	73fb      	strb	r3, [r7, #15]
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80041a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	dcd9      	bgt.n	800415e <prvUnlockQueue+0x16>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	22ff      	movs	r2, #255	; 0xff
 80041ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80041b2:	f7ff f84d 	bl	8003250 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80041b6:	f7ff f81d 	bl	80031f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80041c2:	e013      	b.n	80041ec <prvUnlockQueue+0xa4>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00e      	beq.n	80041ea <prvUnlockQueue+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	3310      	adds	r3, #16
 80041d0:	4618      	mov	r0, r3
 80041d2:	f000 fceb 	bl	8004bac <xTaskRemoveFromEventList>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d001      	beq.n	80041e0 <prvUnlockQueue+0x98>
				{
					vTaskMissedYield();
 80041dc:	f000 fdd0 	bl	8004d80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80041e0:	7bbb      	ldrb	r3, [r7, #14]
 80041e2:	3b01      	subs	r3, #1
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	73bb      	strb	r3, [r7, #14]
 80041e8:	e000      	b.n	80041ec <prvUnlockQueue+0xa4>
			}
			else
			{
				break;
 80041ea:	e003      	b.n	80041f4 <prvUnlockQueue+0xac>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80041ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	dce7      	bgt.n	80041c4 <prvUnlockQueue+0x7c>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	22ff      	movs	r2, #255	; 0xff
 80041f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80041fc:	f7ff f828 	bl	8003250 <vPortExitCritical>
}
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop

08004208 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004210:	f7fe fff0 	bl	80031f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004218:	2b00      	cmp	r3, #0
 800421a:	d102      	bne.n	8004222 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800421c:	2301      	movs	r3, #1
 800421e:	60fb      	str	r3, [r7, #12]
 8004220:	e001      	b.n	8004226 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004222:	2300      	movs	r3, #0
 8004224:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004226:	f7ff f813 	bl	8003250 <vPortExitCritical>

	return xReturn;
 800422a:	68fb      	ldr	r3, [r7, #12]
}
 800422c:	4618      	mov	r0, r3
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800423c:	f7fe ffda 	bl	80031f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004248:	429a      	cmp	r2, r3
 800424a:	d102      	bne.n	8004252 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800424c:	2301      	movs	r3, #1
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	e001      	b.n	8004256 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004252:	2300      	movs	r3, #0
 8004254:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004256:	f7fe fffb 	bl	8003250 <vPortExitCritical>

	return xReturn;
 800425a:	68fb      	ldr	r3, [r7, #12]
}
 800425c:	4618      	mov	r0, r3
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800426e:	2300      	movs	r3, #0
 8004270:	60fb      	str	r3, [r7, #12]
 8004272:	e014      	b.n	800429e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004274:	4a0e      	ldr	r2, [pc, #56]	; (80042b0 <vQueueAddToRegistry+0x4c>)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d10b      	bne.n	8004298 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004280:	490b      	ldr	r1, [pc, #44]	; (80042b0 <vQueueAddToRegistry+0x4c>)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	683a      	ldr	r2, [r7, #0]
 8004286:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800428a:	4a09      	ldr	r2, [pc, #36]	; (80042b0 <vQueueAddToRegistry+0x4c>)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	00db      	lsls	r3, r3, #3
 8004290:	4413      	add	r3, r2
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004296:	e005      	b.n	80042a4 <vQueueAddToRegistry+0x40>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	3301      	adds	r3, #1
 800429c:	60fb      	str	r3, [r7, #12]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2b07      	cmp	r3, #7
 80042a2:	d9e7      	bls.n	8004274 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80042a4:	3714      	adds	r7, #20
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	1fffcb5c 	.word	0x1fffcb5c

080042b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80042c4:	f7fe ff96 	bl	80031f4 <vPortEnterCritical>
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	b25b      	sxtb	r3, r3
 80042d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d6:	d103      	bne.n	80042e0 <vQueueWaitForMessageRestricted+0x2c>
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	b25b      	sxtb	r3, r3
 80042ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ee:	d103      	bne.n	80042f8 <vQueueWaitForMessageRestricted+0x44>
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042f8:	f7fe ffaa 	bl	8003250 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004300:	2b00      	cmp	r3, #0
 8004302:	d106      	bne.n	8004312 <vQueueWaitForMessageRestricted+0x5e>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	3324      	adds	r3, #36	; 0x24
 8004308:	4618      	mov	r0, r3
 800430a:	68b9      	ldr	r1, [r7, #8]
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	f000 fc23 	bl	8004b58 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004312:	6978      	ldr	r0, [r7, #20]
 8004314:	f7ff ff18 	bl	8004148 <prvUnlockQueue>
	}
 8004318:	3718      	adds	r7, #24
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop

08004320 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
 8004320:	b580      	push	{r7, lr}
 8004322:	b088      	sub	sp, #32
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800432e:	61bb      	str	r3, [r7, #24]
	BaseType_t xReturn = pdFALSE;
 8004330:	2300      	movs	r3, #0
 8004332:	61fb      	str	r3, [r7, #28]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d109      	bne.n	800434e <prvNotifyQueueSetContainer+0x2e>
 800433a:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800433e:	f383 8811 	msr	BASEPRI, r3
 8004342:	f3bf 8f6f 	isb	sy
 8004346:	f3bf 8f4f 	dsb	sy
 800434a:	613b      	str	r3, [r7, #16]
 800434c:	e7fe      	b.n	800434c <prvNotifyQueueSetContainer+0x2c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004356:	429a      	cmp	r2, r3
 8004358:	d309      	bcc.n	800436e <prvNotifyQueueSetContainer+0x4e>
 800435a:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800435e:	f383 8811 	msr	BASEPRI, r3
 8004362:	f3bf 8f6f 	isb	sy
 8004366:	f3bf 8f4f 	dsb	sy
 800436a:	60fb      	str	r3, [r7, #12]
 800436c:	e7fe      	b.n	800436c <prvNotifyQueueSetContainer+0x4c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004376:	429a      	cmp	r2, r3
 8004378:	d226      	bcs.n	80043c8 <prvNotifyQueueSetContainer+0xa8>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004380:	75fb      	strb	r3, [r7, #23]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
 8004382:	1d3b      	adds	r3, r7, #4
 8004384:	69b8      	ldr	r0, [r7, #24]
 8004386:	4619      	mov	r1, r3
 8004388:	683a      	ldr	r2, [r7, #0]
 800438a:	f7ff fe4b 	bl	8004024 <prvCopyDataToQueue>
 800438e:	61f8      	str	r0, [r7, #28]

			if( cTxLock == queueUNLOCKED )
 8004390:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004398:	d10e      	bne.n	80043b8 <prvNotifyQueueSetContainer+0x98>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d012      	beq.n	80043c8 <prvNotifyQueueSetContainer+0xa8>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	3324      	adds	r3, #36	; 0x24
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 fc00 	bl	8004bac <xTaskRemoveFromEventList>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00a      	beq.n	80043c8 <prvNotifyQueueSetContainer+0xa8>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
 80043b2:	2301      	movs	r3, #1
 80043b4:	61fb      	str	r3, [r7, #28]
 80043b6:	e007      	b.n	80043c8 <prvNotifyQueueSetContainer+0xa8>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80043b8:	7dfb      	ldrb	r3, [r7, #23]
 80043ba:	3301      	adds	r3, #1
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	b2da      	uxtb	r2, r3
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043c6:	e7ff      	b.n	80043c8 <prvNotifyQueueSetContainer+0xa8>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80043c8:	69fb      	ldr	r3, [r7, #28]
	}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3720      	adds	r7, #32
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop

080043d4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b08c      	sub	sp, #48	; 0x30
 80043d8:	af04      	add	r7, sp, #16
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	603b      	str	r3, [r7, #0]
 80043e0:	4613      	mov	r3, r2
 80043e2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80043e4:	88fb      	ldrh	r3, [r7, #6]
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7ff f819 	bl	8003420 <pvPortMalloc>
 80043ee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00e      	beq.n	8004414 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80043f6:	2070      	movs	r0, #112	; 0x70
 80043f8:	f7ff f812 	bl	8003420 <pvPortMalloc>
 80043fc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d003      	beq.n	800440c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	631a      	str	r2, [r3, #48]	; 0x30
 800440a:	e005      	b.n	8004418 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800440c:	6978      	ldr	r0, [r7, #20]
 800440e:	f7ff f819 	bl	8003444 <vPortFree>
 8004412:	e001      	b.n	8004418 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004414:	2300      	movs	r3, #0
 8004416:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d013      	beq.n	8004446 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800441e:	88fa      	ldrh	r2, [r7, #6]
 8004420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004422:	9300      	str	r3, [sp, #0]
 8004424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004426:	9301      	str	r3, [sp, #4]
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	9302      	str	r3, [sp, #8]
 800442c:	2300      	movs	r3, #0
 800442e:	9303      	str	r3, [sp, #12]
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	68b9      	ldr	r1, [r7, #8]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	f000 f80f 	bl	8004458 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800443a:	69f8      	ldr	r0, [r7, #28]
 800443c:	f000 f8ae 	bl	800459c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004440:	2301      	movs	r3, #1
 8004442:	61bb      	str	r3, [r7, #24]
 8004444:	e002      	b.n	800444c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004446:	f04f 33ff 	mov.w	r3, #4294967295
 800444a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800444c:	69bb      	ldr	r3, [r7, #24]
	}
 800444e:	4618      	mov	r0, r3
 8004450:	3720      	adds	r7, #32
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop

08004458 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b088      	sub	sp, #32
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
 8004464:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004468:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	4610      	mov	r0, r2
 8004470:	21a5      	movs	r1, #165	; 0xa5
 8004472:	461a      	mov	r2, r3
 8004474:	f002 fbab 	bl	8006bce <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004482:	3b01      	subs	r3, #1
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4413      	add	r3, r2
 8004488:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	f023 0307 	bic.w	r3, r3, #7
 8004490:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	f003 0307 	and.w	r3, r3, #7
 8004498:	2b00      	cmp	r3, #0
 800449a:	d009      	beq.n	80044b0 <prvInitialiseNewTask+0x58>
 800449c:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80044a0:	f383 8811 	msr	BASEPRI, r3
 80044a4:	f3bf 8f6f 	isb	sy
 80044a8:	f3bf 8f4f 	dsb	sy
 80044ac:	617b      	str	r3, [r7, #20]
 80044ae:	e7fe      	b.n	80044ae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d01e      	beq.n	80044f4 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044b6:	2300      	movs	r3, #0
 80044b8:	61fb      	str	r3, [r7, #28]
 80044ba:	e013      	b.n	80044e4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	4413      	add	r3, r2
 80044c2:	7819      	ldrb	r1, [r3, #0]
 80044c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	4413      	add	r3, r2
 80044ca:	3330      	adds	r3, #48	; 0x30
 80044cc:	460a      	mov	r2, r1
 80044ce:	711a      	strb	r2, [r3, #4]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80044d0:	68ba      	ldr	r2, [r7, #8]
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	4413      	add	r3, r2
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d100      	bne.n	80044de <prvInitialiseNewTask+0x86>
			{
				break;
 80044dc:	e005      	b.n	80044ea <prvInitialiseNewTask+0x92>
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	3301      	adds	r3, #1
 80044e2:	61fb      	str	r3, [r7, #28]
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	2b0f      	cmp	r3, #15
 80044e8:	d9e8      	bls.n	80044bc <prvInitialiseNewTask+0x64>
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80044ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044f2:	e003      	b.n	80044fc <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80044f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80044fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fe:	2b04      	cmp	r3, #4
 8004500:	d901      	bls.n	8004506 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004502:	2304      	movs	r3, #4
 8004504:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004508:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800450a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800450c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800450e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004510:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004514:	2200      	movs	r2, #0
 8004516:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451a:	3304      	adds	r3, #4
 800451c:	4618      	mov	r0, r3
 800451e:	f7fe ffc3 	bl	80034a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004524:	3318      	adds	r3, #24
 8004526:	4618      	mov	r0, r3
 8004528:	f7fe ffbe 	bl	80034a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800452c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004530:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004534:	f1c3 0205 	rsb	r2, r3, #5
 8004538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800453c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004540:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
	{
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 8004542:	2300      	movs	r3, #0
 8004544:	61fb      	str	r3, [r7, #28]
 8004546:	e009      	b.n	800455c <prvInitialiseNewTask+0x104>
		{
			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 8004548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	3314      	adds	r3, #20
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	4413      	add	r3, r2
 8004552:	2200      	movs	r2, #0
 8004554:	605a      	str	r2, [r3, #4]
	}
	#endif

	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
	{
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	3301      	adds	r3, #1
 800455a:	61fb      	str	r3, [r7, #28]
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	2b04      	cmp	r3, #4
 8004560:	d9f2      	bls.n	8004548 <prvInitialiseNewTask+0xf0>
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004564:	2200      	movs	r2, #0
 8004566:	669a      	str	r2, [r3, #104]	; 0x68
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456a:	2200      	movs	r2, #0
 800456c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 8004570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004572:	2200      	movs	r2, #0
 8004574:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004578:	69b8      	ldr	r0, [r7, #24]
 800457a:	68f9      	ldr	r1, [r7, #12]
 800457c:	683a      	ldr	r2, [r7, #0]
 800457e:	f7fe fd11 	bl	8002fa4 <pxPortInitialiseStack>
 8004582:	4602      	mov	r2, r0
 8004584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004586:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800458a:	2b00      	cmp	r3, #0
 800458c:	d002      	beq.n	8004594 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800458e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004592:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004594:	3720      	adds	r7, #32
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop

0800459c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80045a4:	f7fe fe26 	bl	80031f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80045a8:	4b2d      	ldr	r3, [pc, #180]	; (8004660 <prvAddNewTaskToReadyList+0xc4>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	3301      	adds	r3, #1
 80045ae:	4a2c      	ldr	r2, [pc, #176]	; (8004660 <prvAddNewTaskToReadyList+0xc4>)
 80045b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80045b2:	4b2c      	ldr	r3, [pc, #176]	; (8004664 <prvAddNewTaskToReadyList+0xc8>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d109      	bne.n	80045ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80045ba:	4a2a      	ldr	r2, [pc, #168]	; (8004664 <prvAddNewTaskToReadyList+0xc8>)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80045c0:	4b27      	ldr	r3, [pc, #156]	; (8004660 <prvAddNewTaskToReadyList+0xc4>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d110      	bne.n	80045ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80045c8:	f000 fbfe 	bl	8004dc8 <prvInitialiseTaskLists>
 80045cc:	e00d      	b.n	80045ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80045ce:	4b26      	ldr	r3, [pc, #152]	; (8004668 <prvAddNewTaskToReadyList+0xcc>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d109      	bne.n	80045ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80045d6:	4b23      	ldr	r3, [pc, #140]	; (8004664 <prvAddNewTaskToReadyList+0xc8>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d802      	bhi.n	80045ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80045e4:	4a1f      	ldr	r2, [pc, #124]	; (8004664 <prvAddNewTaskToReadyList+0xc8>)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80045ea:	4b20      	ldr	r3, [pc, #128]	; (800466c <prvAddNewTaskToReadyList+0xd0>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	3301      	adds	r3, #1
 80045f0:	4a1e      	ldr	r2, [pc, #120]	; (800466c <prvAddNewTaskToReadyList+0xd0>)
 80045f2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80045f4:	4b1d      	ldr	r3, [pc, #116]	; (800466c <prvAddNewTaskToReadyList+0xd0>)
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004600:	461a      	mov	r2, r3
 8004602:	2301      	movs	r3, #1
 8004604:	fa03 f202 	lsl.w	r2, r3, r2
 8004608:	4b19      	ldr	r3, [pc, #100]	; (8004670 <prvAddNewTaskToReadyList+0xd4>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4313      	orrs	r3, r2
 800460e:	4a18      	ldr	r2, [pc, #96]	; (8004670 <prvAddNewTaskToReadyList+0xd4>)
 8004610:	6013      	str	r3, [r2, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004616:	4613      	mov	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	4413      	add	r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	4a15      	ldr	r2, [pc, #84]	; (8004674 <prvAddNewTaskToReadyList+0xd8>)
 8004620:	441a      	add	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	3304      	adds	r3, #4
 8004626:	4610      	mov	r0, r2
 8004628:	4619      	mov	r1, r3
 800462a:	f7fe ff49 	bl	80034c0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800462e:	f7fe fe0f 	bl	8003250 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004632:	4b0d      	ldr	r3, [pc, #52]	; (8004668 <prvAddNewTaskToReadyList+0xcc>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00e      	beq.n	8004658 <prvAddNewTaskToReadyList+0xbc>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800463a:	4b0a      	ldr	r3, [pc, #40]	; (8004664 <prvAddNewTaskToReadyList+0xc8>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004644:	429a      	cmp	r2, r3
 8004646:	d207      	bcs.n	8004658 <prvAddNewTaskToReadyList+0xbc>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004648:	4b0b      	ldr	r3, [pc, #44]	; (8004678 <prvAddNewTaskToReadyList+0xdc>)
 800464a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800464e:	601a      	str	r2, [r3, #0]
 8004650:	f3bf 8f4f 	dsb	sy
 8004654:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004658:	3708      	adds	r7, #8
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	1fffcab8 	.word	0x1fffcab8
 8004664:	1fffc9e0 	.word	0x1fffc9e0
 8004668:	1fffcac4 	.word	0x1fffcac4
 800466c:	1fffcad4 	.word	0x1fffcad4
 8004670:	1fffcac0 	.word	0x1fffcac0
 8004674:	1fffc9e4 	.word	0x1fffc9e4
 8004678:	e000ed04 	.word	0xe000ed04

0800467c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004684:	2300      	movs	r3, #0
 8004686:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d016      	beq.n	80046bc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800468e:	4b12      	ldr	r3, [pc, #72]	; (80046d8 <vTaskDelay+0x5c>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d009      	beq.n	80046aa <vTaskDelay+0x2e>
 8004696:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800469a:	f383 8811 	msr	BASEPRI, r3
 800469e:	f3bf 8f6f 	isb	sy
 80046a2:	f3bf 8f4f 	dsb	sy
 80046a6:	60bb      	str	r3, [r7, #8]
 80046a8:	e7fe      	b.n	80046a8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80046aa:	f000 f863 	bl	8004774 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	2100      	movs	r1, #0
 80046b2:	f000 fdf7 	bl	80052a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80046b6:	f000 f86b 	bl	8004790 <xTaskResumeAll>
 80046ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d107      	bne.n	80046d2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80046c2:	4b06      	ldr	r3, [pc, #24]	; (80046dc <vTaskDelay+0x60>)
 80046c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046c8:	601a      	str	r2, [r3, #0]
 80046ca:	f3bf 8f4f 	dsb	sy
 80046ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	1fffcae0 	.word	0x1fffcae0
 80046dc:	e000ed04 	.word	0xe000ed04

080046e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80046e6:	2300      	movs	r3, #0
 80046e8:	9300      	str	r3, [sp, #0]
 80046ea:	4b1c      	ldr	r3, [pc, #112]	; (800475c <vTaskStartScheduler+0x7c>)
 80046ec:	9301      	str	r3, [sp, #4]
 80046ee:	481c      	ldr	r0, [pc, #112]	; (8004760 <vTaskStartScheduler+0x80>)
 80046f0:	491c      	ldr	r1, [pc, #112]	; (8004764 <vTaskStartScheduler+0x84>)
 80046f2:	2282      	movs	r2, #130	; 0x82
 80046f4:	2300      	movs	r3, #0
 80046f6:	f7ff fe6d 	bl	80043d4 <xTaskCreate>
 80046fa:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d102      	bne.n	8004708 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8004702:	f000 fe39 	bl	8005378 <xTimerCreateTimerTask>
 8004706:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d115      	bne.n	800473a <vTaskStartScheduler+0x5a>
 800470e:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8004712:	f383 8811 	msr	BASEPRI, r3
 8004716:	f3bf 8f6f 	isb	sy
 800471a:	f3bf 8f4f 	dsb	sy
 800471e:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004720:	4b11      	ldr	r3, [pc, #68]	; (8004768 <vTaskStartScheduler+0x88>)
 8004722:	f04f 32ff 	mov.w	r2, #4294967295
 8004726:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004728:	4b10      	ldr	r3, [pc, #64]	; (800476c <vTaskStartScheduler+0x8c>)
 800472a:	2201      	movs	r2, #1
 800472c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800472e:	4b10      	ldr	r3, [pc, #64]	; (8004770 <vTaskStartScheduler+0x90>)
 8004730:	2200      	movs	r2, #0
 8004732:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004734:	f7fe fcc0 	bl	80030b8 <xPortStartScheduler>
 8004738:	e00d      	b.n	8004756 <vTaskStartScheduler+0x76>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004740:	d109      	bne.n	8004756 <vTaskStartScheduler+0x76>
 8004742:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8004746:	f383 8811 	msr	BASEPRI, r3
 800474a:	f3bf 8f6f 	isb	sy
 800474e:	f3bf 8f4f 	dsb	sy
 8004752:	607b      	str	r3, [r7, #4]
 8004754:	e7fe      	b.n	8004754 <vTaskStartScheduler+0x74>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004756:	3710      	adds	r7, #16
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	1fffcadc 	.word	0x1fffcadc
 8004760:	08004d99 	.word	0x08004d99
 8004764:	08006edc 	.word	0x08006edc
 8004768:	1fffcad8 	.word	0x1fffcad8
 800476c:	1fffcac4 	.word	0x1fffcac4
 8004770:	1fffcabc 	.word	0x1fffcabc

08004774 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004774:	b480      	push	{r7}
 8004776:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004778:	4b04      	ldr	r3, [pc, #16]	; (800478c <vTaskSuspendAll+0x18>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	3301      	adds	r3, #1
 800477e:	4a03      	ldr	r2, [pc, #12]	; (800478c <vTaskSuspendAll+0x18>)
 8004780:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	1fffcae0 	.word	0x1fffcae0

08004790 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004796:	2300      	movs	r3, #0
 8004798:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800479a:	2300      	movs	r3, #0
 800479c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800479e:	4b42      	ldr	r3, [pc, #264]	; (80048a8 <xTaskResumeAll+0x118>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d109      	bne.n	80047ba <xTaskResumeAll+0x2a>
 80047a6:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80047aa:	f383 8811 	msr	BASEPRI, r3
 80047ae:	f3bf 8f6f 	isb	sy
 80047b2:	f3bf 8f4f 	dsb	sy
 80047b6:	603b      	str	r3, [r7, #0]
 80047b8:	e7fe      	b.n	80047b8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80047ba:	f7fe fd1b 	bl	80031f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80047be:	4b3a      	ldr	r3, [pc, #232]	; (80048a8 <xTaskResumeAll+0x118>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	3b01      	subs	r3, #1
 80047c4:	4a38      	ldr	r2, [pc, #224]	; (80048a8 <xTaskResumeAll+0x118>)
 80047c6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047c8:	4b37      	ldr	r3, [pc, #220]	; (80048a8 <xTaskResumeAll+0x118>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d163      	bne.n	8004898 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80047d0:	4b36      	ldr	r3, [pc, #216]	; (80048ac <xTaskResumeAll+0x11c>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d05f      	beq.n	8004898 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047d8:	e030      	b.n	800483c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047da:	4b35      	ldr	r3, [pc, #212]	; (80048b0 <xTaskResumeAll+0x120>)
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	3318      	adds	r3, #24
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7fe fec6 	bl	8003578 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	3304      	adds	r3, #4
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7fe fec1 	bl	8003578 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fa:	461a      	mov	r2, r3
 80047fc:	2301      	movs	r3, #1
 80047fe:	fa03 f202 	lsl.w	r2, r3, r2
 8004802:	4b2c      	ldr	r3, [pc, #176]	; (80048b4 <xTaskResumeAll+0x124>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4313      	orrs	r3, r2
 8004808:	4a2a      	ldr	r2, [pc, #168]	; (80048b4 <xTaskResumeAll+0x124>)
 800480a:	6013      	str	r3, [r2, #0]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004810:	4613      	mov	r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4413      	add	r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	4a27      	ldr	r2, [pc, #156]	; (80048b8 <xTaskResumeAll+0x128>)
 800481a:	441a      	add	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	3304      	adds	r3, #4
 8004820:	4610      	mov	r0, r2
 8004822:	4619      	mov	r1, r3
 8004824:	f7fe fe4c 	bl	80034c0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800482c:	4b23      	ldr	r3, [pc, #140]	; (80048bc <xTaskResumeAll+0x12c>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004832:	429a      	cmp	r2, r3
 8004834:	d302      	bcc.n	800483c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004836:	4b22      	ldr	r3, [pc, #136]	; (80048c0 <xTaskResumeAll+0x130>)
 8004838:	2201      	movs	r2, #1
 800483a:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800483c:	4b1c      	ldr	r3, [pc, #112]	; (80048b0 <xTaskResumeAll+0x120>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1ca      	bne.n	80047da <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800484a:	f000 fb37 	bl	8004ebc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800484e:	4b1d      	ldr	r3, [pc, #116]	; (80048c4 <xTaskResumeAll+0x134>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d010      	beq.n	800487c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800485a:	f000 f847 	bl	80048ec <xTaskIncrementTick>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d002      	beq.n	800486a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004864:	4b16      	ldr	r3, [pc, #88]	; (80048c0 <xTaskResumeAll+0x130>)
 8004866:	2201      	movs	r2, #1
 8004868:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	3b01      	subs	r3, #1
 800486e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1f1      	bne.n	800485a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8004876:	4b13      	ldr	r3, [pc, #76]	; (80048c4 <xTaskResumeAll+0x134>)
 8004878:	2200      	movs	r2, #0
 800487a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800487c:	4b10      	ldr	r3, [pc, #64]	; (80048c0 <xTaskResumeAll+0x130>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d009      	beq.n	8004898 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004884:	2301      	movs	r3, #1
 8004886:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004888:	4b0f      	ldr	r3, [pc, #60]	; (80048c8 <xTaskResumeAll+0x138>)
 800488a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800488e:	601a      	str	r2, [r3, #0]
 8004890:	f3bf 8f4f 	dsb	sy
 8004894:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004898:	f7fe fcda 	bl	8003250 <vPortExitCritical>

	return xAlreadyYielded;
 800489c:	68bb      	ldr	r3, [r7, #8]
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	1fffcae0 	.word	0x1fffcae0
 80048ac:	1fffcab8 	.word	0x1fffcab8
 80048b0:	1fffca78 	.word	0x1fffca78
 80048b4:	1fffcac0 	.word	0x1fffcac0
 80048b8:	1fffc9e4 	.word	0x1fffc9e4
 80048bc:	1fffc9e0 	.word	0x1fffc9e0
 80048c0:	1fffcacc 	.word	0x1fffcacc
 80048c4:	1fffcac8 	.word	0x1fffcac8
 80048c8:	e000ed04 	.word	0xe000ed04

080048cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80048d2:	4b05      	ldr	r3, [pc, #20]	; (80048e8 <xTaskGetTickCount+0x1c>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80048d8:	687b      	ldr	r3, [r7, #4]
}
 80048da:	4618      	mov	r0, r3
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	1fffcabc 	.word	0x1fffcabc

080048ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b086      	sub	sp, #24
 80048f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80048f2:	2300      	movs	r3, #0
 80048f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048f6:	4b4f      	ldr	r3, [pc, #316]	; (8004a34 <xTaskIncrementTick+0x148>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	f040 8089 	bne.w	8004a12 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004900:	4b4d      	ldr	r3, [pc, #308]	; (8004a38 <xTaskIncrementTick+0x14c>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	3301      	adds	r3, #1
 8004906:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004908:	4a4b      	ldr	r2, [pc, #300]	; (8004a38 <xTaskIncrementTick+0x14c>)
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d11f      	bne.n	8004954 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004914:	4b49      	ldr	r3, [pc, #292]	; (8004a3c <xTaskIncrementTick+0x150>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d009      	beq.n	8004932 <xTaskIncrementTick+0x46>
 800491e:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8004922:	f383 8811 	msr	BASEPRI, r3
 8004926:	f3bf 8f6f 	isb	sy
 800492a:	f3bf 8f4f 	dsb	sy
 800492e:	603b      	str	r3, [r7, #0]
 8004930:	e7fe      	b.n	8004930 <xTaskIncrementTick+0x44>
 8004932:	4b42      	ldr	r3, [pc, #264]	; (8004a3c <xTaskIncrementTick+0x150>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	60fb      	str	r3, [r7, #12]
 8004938:	4b41      	ldr	r3, [pc, #260]	; (8004a40 <xTaskIncrementTick+0x154>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a3f      	ldr	r2, [pc, #252]	; (8004a3c <xTaskIncrementTick+0x150>)
 800493e:	6013      	str	r3, [r2, #0]
 8004940:	4a3f      	ldr	r2, [pc, #252]	; (8004a40 <xTaskIncrementTick+0x154>)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6013      	str	r3, [r2, #0]
 8004946:	4b3f      	ldr	r3, [pc, #252]	; (8004a44 <xTaskIncrementTick+0x158>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	3301      	adds	r3, #1
 800494c:	4a3d      	ldr	r2, [pc, #244]	; (8004a44 <xTaskIncrementTick+0x158>)
 800494e:	6013      	str	r3, [r2, #0]
 8004950:	f000 fab4 	bl	8004ebc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004954:	4b3c      	ldr	r3, [pc, #240]	; (8004a48 <xTaskIncrementTick+0x15c>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	429a      	cmp	r2, r3
 800495c:	d34a      	bcc.n	80049f4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800495e:	4b37      	ldr	r3, [pc, #220]	; (8004a3c <xTaskIncrementTick+0x150>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d104      	bne.n	8004972 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004968:	4b37      	ldr	r3, [pc, #220]	; (8004a48 <xTaskIncrementTick+0x15c>)
 800496a:	f04f 32ff 	mov.w	r2, #4294967295
 800496e:	601a      	str	r2, [r3, #0]
					break;
 8004970:	e040      	b.n	80049f4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004972:	4b32      	ldr	r3, [pc, #200]	; (8004a3c <xTaskIncrementTick+0x150>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	429a      	cmp	r2, r3
 8004988:	d203      	bcs.n	8004992 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800498a:	4a2f      	ldr	r2, [pc, #188]	; (8004a48 <xTaskIncrementTick+0x15c>)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004990:	e030      	b.n	80049f4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	3304      	adds	r3, #4
 8004996:	4618      	mov	r0, r3
 8004998:	f7fe fdee 	bl	8003578 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d004      	beq.n	80049ae <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	3318      	adds	r3, #24
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7fe fde5 	bl	8003578 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b2:	461a      	mov	r2, r3
 80049b4:	2301      	movs	r3, #1
 80049b6:	fa03 f202 	lsl.w	r2, r3, r2
 80049ba:	4b24      	ldr	r3, [pc, #144]	; (8004a4c <xTaskIncrementTick+0x160>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4313      	orrs	r3, r2
 80049c0:	4a22      	ldr	r2, [pc, #136]	; (8004a4c <xTaskIncrementTick+0x160>)
 80049c2:	6013      	str	r3, [r2, #0]
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049c8:	4613      	mov	r3, r2
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	4413      	add	r3, r2
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	4a1f      	ldr	r2, [pc, #124]	; (8004a50 <xTaskIncrementTick+0x164>)
 80049d2:	441a      	add	r2, r3
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	3304      	adds	r3, #4
 80049d8:	4610      	mov	r0, r2
 80049da:	4619      	mov	r1, r3
 80049dc:	f7fe fd70 	bl	80034c0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049e4:	4b1b      	ldr	r3, [pc, #108]	; (8004a54 <xTaskIncrementTick+0x168>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d301      	bcc.n	80049f2 <xTaskIncrementTick+0x106>
						{
							xSwitchRequired = pdTRUE;
 80049ee:	2301      	movs	r3, #1
 80049f0:	617b      	str	r3, [r7, #20]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
 80049f2:	e7b4      	b.n	800495e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80049f4:	4b17      	ldr	r3, [pc, #92]	; (8004a54 <xTaskIncrementTick+0x168>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049fa:	4915      	ldr	r1, [pc, #84]	; (8004a50 <xTaskIncrementTick+0x164>)
 80049fc:	4613      	mov	r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4413      	add	r3, r2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	440b      	add	r3, r1
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d901      	bls.n	8004a10 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	617b      	str	r3, [r7, #20]
 8004a10:	e004      	b.n	8004a1c <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004a12:	4b11      	ldr	r3, [pc, #68]	; (8004a58 <xTaskIncrementTick+0x16c>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	3301      	adds	r3, #1
 8004a18:	4a0f      	ldr	r2, [pc, #60]	; (8004a58 <xTaskIncrementTick+0x16c>)
 8004a1a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004a1c:	4b0f      	ldr	r3, [pc, #60]	; (8004a5c <xTaskIncrementTick+0x170>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d001      	beq.n	8004a28 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8004a24:	2301      	movs	r3, #1
 8004a26:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004a28:	697b      	ldr	r3, [r7, #20]
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3718      	adds	r7, #24
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	1fffcae0 	.word	0x1fffcae0
 8004a38:	1fffcabc 	.word	0x1fffcabc
 8004a3c:	1fffca70 	.word	0x1fffca70
 8004a40:	1fffca74 	.word	0x1fffca74
 8004a44:	1fffcad0 	.word	0x1fffcad0
 8004a48:	1fffcad8 	.word	0x1fffcad8
 8004a4c:	1fffcac0 	.word	0x1fffcac0
 8004a50:	1fffc9e4 	.word	0x1fffc9e4
 8004a54:	1fffc9e0 	.word	0x1fffc9e0
 8004a58:	1fffcac8 	.word	0x1fffcac8
 8004a5c:	1fffcacc 	.word	0x1fffcacc

08004a60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a60:	b480      	push	{r7}
 8004a62:	b087      	sub	sp, #28
 8004a64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a66:	4b26      	ldr	r3, [pc, #152]	; (8004b00 <vTaskSwitchContext+0xa0>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d003      	beq.n	8004a76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a6e:	4b25      	ldr	r3, [pc, #148]	; (8004b04 <vTaskSwitchContext+0xa4>)
 8004a70:	2201      	movs	r2, #1
 8004a72:	601a      	str	r2, [r3, #0]
 8004a74:	e03e      	b.n	8004af4 <vTaskSwitchContext+0x94>
	}
	else
	{
		xYieldPending = pdFALSE;
 8004a76:	4b23      	ldr	r3, [pc, #140]	; (8004b04 <vTaskSwitchContext+0xa4>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	601a      	str	r2, [r3, #0]
		}
		#endif

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a7c:	4b22      	ldr	r3, [pc, #136]	; (8004b08 <vTaskSwitchContext+0xa8>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	60fb      	str	r3, [r7, #12]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	fab3 f383 	clz	r3, r3
 8004a88:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004a8a:	7afb      	ldrb	r3, [r7, #11]
 8004a8c:	f1c3 031f 	rsb	r3, r3, #31
 8004a90:	617b      	str	r3, [r7, #20]
 8004a92:	491e      	ldr	r1, [pc, #120]	; (8004b0c <vTaskSwitchContext+0xac>)
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	4613      	mov	r3, r2
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	4413      	add	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	440b      	add	r3, r1
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d109      	bne.n	8004aba <vTaskSwitchContext+0x5a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004aa6:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8004aaa:	f383 8811 	msr	BASEPRI, r3
 8004aae:	f3bf 8f6f 	isb	sy
 8004ab2:	f3bf 8f4f 	dsb	sy
 8004ab6:	607b      	str	r3, [r7, #4]
 8004ab8:	e7fe      	b.n	8004ab8 <vTaskSwitchContext+0x58>
 8004aba:	697a      	ldr	r2, [r7, #20]
 8004abc:	4613      	mov	r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4413      	add	r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	4a11      	ldr	r2, [pc, #68]	; (8004b0c <vTaskSwitchContext+0xac>)
 8004ac6:	4413      	add	r3, r2
 8004ac8:	613b      	str	r3, [r7, #16]
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	685a      	ldr	r2, [r3, #4]
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	605a      	str	r2, [r3, #4]
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	685a      	ldr	r2, [r3, #4]
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	3308      	adds	r3, #8
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d104      	bne.n	8004aea <vTaskSwitchContext+0x8a>
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	685a      	ldr	r2, [r3, #4]
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	605a      	str	r2, [r3, #4]
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	4a07      	ldr	r2, [pc, #28]	; (8004b10 <vTaskSwitchContext+0xb0>)
 8004af2:	6013      	str	r3, [r2, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004af4:	371c      	adds	r7, #28
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	1fffcae0 	.word	0x1fffcae0
 8004b04:	1fffcacc 	.word	0x1fffcacc
 8004b08:	1fffcac0 	.word	0x1fffcac0
 8004b0c:	1fffc9e4 	.word	0x1fffc9e4
 8004b10:	1fffc9e0 	.word	0x1fffc9e0

08004b14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d109      	bne.n	8004b38 <vTaskPlaceOnEventList+0x24>
 8004b24:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8004b28:	f383 8811 	msr	BASEPRI, r3
 8004b2c:	f3bf 8f6f 	isb	sy
 8004b30:	f3bf 8f4f 	dsb	sy
 8004b34:	60fb      	str	r3, [r7, #12]
 8004b36:	e7fe      	b.n	8004b36 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b38:	4b06      	ldr	r3, [pc, #24]	; (8004b54 <vTaskPlaceOnEventList+0x40>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	3318      	adds	r3, #24
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	4619      	mov	r1, r3
 8004b42:	f7fe fce1 	bl	8003508 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004b46:	6838      	ldr	r0, [r7, #0]
 8004b48:	2101      	movs	r1, #1
 8004b4a:	f000 fbab 	bl	80052a4 <prvAddCurrentTaskToDelayedList>
}
 8004b4e:	3710      	adds	r7, #16
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	1fffc9e0 	.word	0x1fffc9e0

08004b58 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b086      	sub	sp, #24
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d109      	bne.n	8004b7e <vTaskPlaceOnEventListRestricted+0x26>
 8004b6a:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8004b6e:	f383 8811 	msr	BASEPRI, r3
 8004b72:	f3bf 8f6f 	isb	sy
 8004b76:	f3bf 8f4f 	dsb	sy
 8004b7a:	617b      	str	r3, [r7, #20]
 8004b7c:	e7fe      	b.n	8004b7c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b7e:	4b0a      	ldr	r3, [pc, #40]	; (8004ba8 <vTaskPlaceOnEventListRestricted+0x50>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	3318      	adds	r3, #24
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	4619      	mov	r1, r3
 8004b88:	f7fe fc9a 	bl	80034c0 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d002      	beq.n	8004b98 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004b92:	f04f 33ff 	mov.w	r3, #4294967295
 8004b96:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004b98:	68b8      	ldr	r0, [r7, #8]
 8004b9a:	6879      	ldr	r1, [r7, #4]
 8004b9c:	f000 fb82 	bl	80052a4 <prvAddCurrentTaskToDelayedList>
	}
 8004ba0:	3718      	adds	r7, #24
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	1fffc9e0 	.word	0x1fffc9e0

08004bac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d109      	bne.n	8004bd6 <xTaskRemoveFromEventList+0x2a>
 8004bc2:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8004bc6:	f383 8811 	msr	BASEPRI, r3
 8004bca:	f3bf 8f6f 	isb	sy
 8004bce:	f3bf 8f4f 	dsb	sy
 8004bd2:	60fb      	str	r3, [r7, #12]
 8004bd4:	e7fe      	b.n	8004bd4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	3318      	adds	r3, #24
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7fe fccc 	bl	8003578 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004be0:	4b1e      	ldr	r3, [pc, #120]	; (8004c5c <xTaskRemoveFromEventList+0xb0>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d11e      	bne.n	8004c26 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	3304      	adds	r3, #4
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7fe fcc3 	bl	8003578 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	fa03 f202 	lsl.w	r2, r3, r2
 8004bfe:	4b18      	ldr	r3, [pc, #96]	; (8004c60 <xTaskRemoveFromEventList+0xb4>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	4a16      	ldr	r2, [pc, #88]	; (8004c60 <xTaskRemoveFromEventList+0xb4>)
 8004c06:	6013      	str	r3, [r2, #0]
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	4413      	add	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4a13      	ldr	r2, [pc, #76]	; (8004c64 <xTaskRemoveFromEventList+0xb8>)
 8004c16:	441a      	add	r2, r3
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	3304      	adds	r3, #4
 8004c1c:	4610      	mov	r0, r2
 8004c1e:	4619      	mov	r1, r3
 8004c20:	f7fe fc4e 	bl	80034c0 <vListInsertEnd>
 8004c24:	e005      	b.n	8004c32 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	3318      	adds	r3, #24
 8004c2a:	480f      	ldr	r0, [pc, #60]	; (8004c68 <xTaskRemoveFromEventList+0xbc>)
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	f7fe fc47 	bl	80034c0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c36:	4b0d      	ldr	r3, [pc, #52]	; (8004c6c <xTaskRemoveFromEventList+0xc0>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d905      	bls.n	8004c4c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004c40:	2301      	movs	r3, #1
 8004c42:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004c44:	4b0a      	ldr	r3, [pc, #40]	; (8004c70 <xTaskRemoveFromEventList+0xc4>)
 8004c46:	2201      	movs	r2, #1
 8004c48:	601a      	str	r2, [r3, #0]
 8004c4a:	e001      	b.n	8004c50 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004c50:	697b      	ldr	r3, [r7, #20]
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3718      	adds	r7, #24
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	1fffcae0 	.word	0x1fffcae0
 8004c60:	1fffcac0 	.word	0x1fffcac0
 8004c64:	1fffc9e4 	.word	0x1fffc9e4
 8004c68:	1fffca78 	.word	0x1fffca78
 8004c6c:	1fffc9e0 	.word	0x1fffc9e0
 8004c70:	1fffcacc 	.word	0x1fffcacc

08004c74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004c7c:	4b06      	ldr	r3, [pc, #24]	; (8004c98 <vTaskInternalSetTimeOutState+0x24>)
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004c84:	4b05      	ldr	r3, [pc, #20]	; (8004c9c <vTaskInternalSetTimeOutState+0x28>)
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	605a      	str	r2, [r3, #4]
}
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	1fffcad0 	.word	0x1fffcad0
 8004c9c:	1fffcabc 	.word	0x1fffcabc

08004ca0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b088      	sub	sp, #32
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d109      	bne.n	8004cc4 <xTaskCheckForTimeOut+0x24>
 8004cb0:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8004cb4:	f383 8811 	msr	BASEPRI, r3
 8004cb8:	f3bf 8f6f 	isb	sy
 8004cbc:	f3bf 8f4f 	dsb	sy
 8004cc0:	613b      	str	r3, [r7, #16]
 8004cc2:	e7fe      	b.n	8004cc2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d109      	bne.n	8004cde <xTaskCheckForTimeOut+0x3e>
 8004cca:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8004cce:	f383 8811 	msr	BASEPRI, r3
 8004cd2:	f3bf 8f6f 	isb	sy
 8004cd6:	f3bf 8f4f 	dsb	sy
 8004cda:	60fb      	str	r3, [r7, #12]
 8004cdc:	e7fe      	b.n	8004cdc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004cde:	f7fe fa89 	bl	80031f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004ce2:	4b24      	ldr	r3, [pc, #144]	; (8004d74 <xTaskCheckForTimeOut+0xd4>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	69ba      	ldr	r2, [r7, #24]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 8004cf2:	4b21      	ldr	r3, [pc, #132]	; (8004d78 <xTaskCheckForTimeOut+0xd8>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d007      	beq.n	8004d0e <xTaskCheckForTimeOut+0x6e>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 8004cfe:	4b1e      	ldr	r3, [pc, #120]	; (8004d78 <xTaskCheckForTimeOut+0xd8>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
				xReturn = pdTRUE;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	61fb      	str	r3, [r7, #28]
 8004d0c:	e02b      	b.n	8004d66 <xTaskCheckForTimeOut+0xc6>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d16:	d102      	bne.n	8004d1e <xTaskCheckForTimeOut+0x7e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	61fb      	str	r3, [r7, #28]
 8004d1c:	e023      	b.n	8004d66 <xTaskCheckForTimeOut+0xc6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	4b16      	ldr	r3, [pc, #88]	; (8004d7c <xTaskCheckForTimeOut+0xdc>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d007      	beq.n	8004d3a <xTaskCheckForTimeOut+0x9a>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685a      	ldr	r2, [r3, #4]
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d802      	bhi.n	8004d3a <xTaskCheckForTimeOut+0x9a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004d34:	2301      	movs	r3, #1
 8004d36:	61fb      	str	r3, [r7, #28]
 8004d38:	e015      	b.n	8004d66 <xTaskCheckForTimeOut+0xc6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d90b      	bls.n	8004d5c <xTaskCheckForTimeOut+0xbc>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	1ad2      	subs	r2, r2, r3
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f7ff ff8f 	bl	8004c74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004d56:	2300      	movs	r3, #0
 8004d58:	61fb      	str	r3, [r7, #28]
 8004d5a:	e004      	b.n	8004d66 <xTaskCheckForTimeOut+0xc6>
		}
		else
		{
			*pxTicksToWait = 0;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004d62:	2301      	movs	r3, #1
 8004d64:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004d66:	f7fe fa73 	bl	8003250 <vPortExitCritical>

	return xReturn;
 8004d6a:	69fb      	ldr	r3, [r7, #28]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3720      	adds	r7, #32
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	1fffcabc 	.word	0x1fffcabc
 8004d78:	1fffc9e0 	.word	0x1fffc9e0
 8004d7c:	1fffcad0 	.word	0x1fffcad0

08004d80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004d80:	b480      	push	{r7}
 8004d82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004d84:	4b03      	ldr	r3, [pc, #12]	; (8004d94 <vTaskMissedYield+0x14>)
 8004d86:	2201      	movs	r2, #1
 8004d88:	601a      	str	r2, [r3, #0]
}
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	1fffcacc 	.word	0x1fffcacc

08004d98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004da0:	f000 f850 	bl	8004e44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004da4:	4b06      	ldr	r3, [pc, #24]	; (8004dc0 <prvIdleTask+0x28>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d907      	bls.n	8004dbc <prvIdleTask+0x24>
			{
				taskYIELD();
 8004dac:	4b05      	ldr	r3, [pc, #20]	; (8004dc4 <prvIdleTask+0x2c>)
 8004dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004db2:	601a      	str	r2, [r3, #0]
 8004db4:	f3bf 8f4f 	dsb	sy
 8004db8:	f3bf 8f6f 	isb	sy
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 8004dbc:	e7f0      	b.n	8004da0 <prvIdleTask+0x8>
 8004dbe:	bf00      	nop
 8004dc0:	1fffc9e4 	.word	0x1fffc9e4
 8004dc4:	e000ed04 	.word	0xe000ed04

08004dc8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004dce:	2300      	movs	r3, #0
 8004dd0:	607b      	str	r3, [r7, #4]
 8004dd2:	e00c      	b.n	8004dee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	4413      	add	r3, r2
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	4a11      	ldr	r2, [pc, #68]	; (8004e24 <prvInitialiseTaskLists+0x5c>)
 8004de0:	4413      	add	r3, r2
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7fe fb40 	bl	8003468 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	3301      	adds	r3, #1
 8004dec:	607b      	str	r3, [r7, #4]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2b04      	cmp	r3, #4
 8004df2:	d9ef      	bls.n	8004dd4 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8004df4:	480c      	ldr	r0, [pc, #48]	; (8004e28 <prvInitialiseTaskLists+0x60>)
 8004df6:	f7fe fb37 	bl	8003468 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004dfa:	480c      	ldr	r0, [pc, #48]	; (8004e2c <prvInitialiseTaskLists+0x64>)
 8004dfc:	f7fe fb34 	bl	8003468 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e00:	480b      	ldr	r0, [pc, #44]	; (8004e30 <prvInitialiseTaskLists+0x68>)
 8004e02:	f7fe fb31 	bl	8003468 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e06:	480b      	ldr	r0, [pc, #44]	; (8004e34 <prvInitialiseTaskLists+0x6c>)
 8004e08:	f7fe fb2e 	bl	8003468 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e0c:	480a      	ldr	r0, [pc, #40]	; (8004e38 <prvInitialiseTaskLists+0x70>)
 8004e0e:	f7fe fb2b 	bl	8003468 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e12:	4b0a      	ldr	r3, [pc, #40]	; (8004e3c <prvInitialiseTaskLists+0x74>)
 8004e14:	4a04      	ldr	r2, [pc, #16]	; (8004e28 <prvInitialiseTaskLists+0x60>)
 8004e16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e18:	4b09      	ldr	r3, [pc, #36]	; (8004e40 <prvInitialiseTaskLists+0x78>)
 8004e1a:	4a04      	ldr	r2, [pc, #16]	; (8004e2c <prvInitialiseTaskLists+0x64>)
 8004e1c:	601a      	str	r2, [r3, #0]
}
 8004e1e:	3708      	adds	r7, #8
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	1fffc9e4 	.word	0x1fffc9e4
 8004e28:	1fffca48 	.word	0x1fffca48
 8004e2c:	1fffca5c 	.word	0x1fffca5c
 8004e30:	1fffca78 	.word	0x1fffca78
 8004e34:	1fffca8c 	.word	0x1fffca8c
 8004e38:	1fffcaa4 	.word	0x1fffcaa4
 8004e3c:	1fffca70 	.word	0x1fffca70
 8004e40:	1fffca74 	.word	0x1fffca74

08004e44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e4a:	e019      	b.n	8004e80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004e4c:	f7fe f9d2 	bl	80031f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e50:	4b0f      	ldr	r3, [pc, #60]	; (8004e90 <prvCheckTasksWaitingTermination+0x4c>)
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	3304      	adds	r3, #4
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7fe fb8b 	bl	8003578 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004e62:	4b0c      	ldr	r3, [pc, #48]	; (8004e94 <prvCheckTasksWaitingTermination+0x50>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	3b01      	subs	r3, #1
 8004e68:	4a0a      	ldr	r2, [pc, #40]	; (8004e94 <prvCheckTasksWaitingTermination+0x50>)
 8004e6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004e6c:	4b0a      	ldr	r3, [pc, #40]	; (8004e98 <prvCheckTasksWaitingTermination+0x54>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	3b01      	subs	r3, #1
 8004e72:	4a09      	ldr	r2, [pc, #36]	; (8004e98 <prvCheckTasksWaitingTermination+0x54>)
 8004e74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004e76:	f7fe f9eb 	bl	8003250 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 f80e 	bl	8004e9c <prvDeleteTCB>
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e80:	4b05      	ldr	r3, [pc, #20]	; (8004e98 <prvCheckTasksWaitingTermination+0x54>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1e1      	bne.n	8004e4c <prvCheckTasksWaitingTermination+0x8>

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	1fffca8c 	.word	0x1fffca8c
 8004e94:	1fffcab8 	.word	0x1fffcab8
 8004e98:	1fffcaa0 	.word	0x1fffcaa0

08004e9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f7fe facb 	bl	8003444 <vPortFree>
			vPortFree( pxTCB );
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f7fe fac8 	bl	8003444 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004eb4:	3708      	adds	r7, #8
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop

08004ebc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ec2:	4b0c      	ldr	r3, [pc, #48]	; (8004ef4 <prvResetNextTaskUnblockTime+0x38>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d104      	bne.n	8004ed6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004ecc:	4b0a      	ldr	r3, [pc, #40]	; (8004ef8 <prvResetNextTaskUnblockTime+0x3c>)
 8004ece:	f04f 32ff 	mov.w	r2, #4294967295
 8004ed2:	601a      	str	r2, [r3, #0]
 8004ed4:	e008      	b.n	8004ee8 <prvResetNextTaskUnblockTime+0x2c>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ed6:	4b07      	ldr	r3, [pc, #28]	; (8004ef4 <prvResetNextTaskUnblockTime+0x38>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	4a04      	ldr	r2, [pc, #16]	; (8004ef8 <prvResetNextTaskUnblockTime+0x3c>)
 8004ee6:	6013      	str	r3, [r2, #0]
	}
}
 8004ee8:	370c      	adds	r7, #12
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	1fffca70 	.word	0x1fffca70
 8004ef8:	1fffcad8 	.word	0x1fffcad8

08004efc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004f02:	4b0b      	ldr	r3, [pc, #44]	; (8004f30 <xTaskGetSchedulerState+0x34>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d102      	bne.n	8004f10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	607b      	str	r3, [r7, #4]
 8004f0e:	e008      	b.n	8004f22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f10:	4b08      	ldr	r3, [pc, #32]	; (8004f34 <xTaskGetSchedulerState+0x38>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d102      	bne.n	8004f1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004f18:	2302      	movs	r3, #2
 8004f1a:	607b      	str	r3, [r7, #4]
 8004f1c:	e001      	b.n	8004f22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004f22:	687b      	ldr	r3, [r7, #4]
	}
 8004f24:	4618      	mov	r0, r3
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr
 8004f30:	1fffcac4 	.word	0x1fffcac4
 8004f34:	1fffcae0 	.word	0x1fffcae0

08004f38 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004f44:	2300      	movs	r3, #0
 8004f46:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d06b      	beq.n	8005026 <xTaskPriorityInherit+0xee>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f52:	4b37      	ldr	r3, [pc, #220]	; (8005030 <xTaskPriorityInherit+0xf8>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d25b      	bcs.n	8005014 <xTaskPriorityInherit+0xdc>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	db06      	blt.n	8004f72 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f64:	4b32      	ldr	r3, [pc, #200]	; (8005030 <xTaskPriorityInherit+0xf8>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6a:	f1c3 0205 	rsb	r2, r3, #5
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	6959      	ldr	r1, [r3, #20]
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	4413      	add	r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4a2c      	ldr	r2, [pc, #176]	; (8005034 <xTaskPriorityInherit+0xfc>)
 8004f84:	4413      	add	r3, r2
 8004f86:	4299      	cmp	r1, r3
 8004f88:	d13c      	bne.n	8005004 <xTaskPriorityInherit+0xcc>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	3304      	adds	r3, #4
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7fe faf2 	bl	8003578 <uxListRemove>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d115      	bne.n	8004fc6 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f9e:	4925      	ldr	r1, [pc, #148]	; (8005034 <xTaskPriorityInherit+0xfc>)
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	4413      	add	r3, r2
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	440b      	add	r3, r1
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d10a      	bne.n	8004fc6 <xTaskPriorityInherit+0x8e>
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	4093      	lsls	r3, r2
 8004fba:	43da      	mvns	r2, r3
 8004fbc:	4b1e      	ldr	r3, [pc, #120]	; (8005038 <xTaskPriorityInherit+0x100>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	4a1d      	ldr	r2, [pc, #116]	; (8005038 <xTaskPriorityInherit+0x100>)
 8004fc4:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004fc6:	4b1a      	ldr	r3, [pc, #104]	; (8005030 <xTaskPriorityInherit+0xf8>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	fa03 f202 	lsl.w	r2, r3, r2
 8004fdc:	4b16      	ldr	r3, [pc, #88]	; (8005038 <xTaskPriorityInherit+0x100>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	4a15      	ldr	r2, [pc, #84]	; (8005038 <xTaskPriorityInherit+0x100>)
 8004fe4:	6013      	str	r3, [r2, #0]
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fea:	4613      	mov	r3, r2
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	4413      	add	r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4a10      	ldr	r2, [pc, #64]	; (8005034 <xTaskPriorityInherit+0xfc>)
 8004ff4:	441a      	add	r2, r3
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	3304      	adds	r3, #4
 8004ffa:	4610      	mov	r0, r2
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	f7fe fa5f 	bl	80034c0 <vListInsertEnd>
 8005002:	e004      	b.n	800500e <xTaskPriorityInherit+0xd6>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005004:	4b0a      	ldr	r3, [pc, #40]	; (8005030 <xTaskPriorityInherit+0xf8>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800500e:	2301      	movs	r3, #1
 8005010:	60fb      	str	r3, [r7, #12]
 8005012:	e008      	b.n	8005026 <xTaskPriorityInherit+0xee>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005018:	4b05      	ldr	r3, [pc, #20]	; (8005030 <xTaskPriorityInherit+0xf8>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501e:	429a      	cmp	r2, r3
 8005020:	d201      	bcs.n	8005026 <xTaskPriorityInherit+0xee>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005022:	2301      	movs	r3, #1
 8005024:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005026:	68fb      	ldr	r3, [r7, #12]
	}
 8005028:	4618      	mov	r0, r3
 800502a:	3710      	adds	r7, #16
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	1fffc9e0 	.word	0x1fffc9e0
 8005034:	1fffc9e4 	.word	0x1fffc9e4
 8005038:	1fffcac0 	.word	0x1fffcac0

0800503c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800503c:	b580      	push	{r7, lr}
 800503e:	b086      	sub	sp, #24
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005048:	2300      	movs	r3, #0
 800504a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d06e      	beq.n	8005130 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005052:	4b3a      	ldr	r3, [pc, #232]	; (800513c <xTaskPriorityDisinherit+0x100>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	429a      	cmp	r2, r3
 800505a:	d009      	beq.n	8005070 <xTaskPriorityDisinherit+0x34>
 800505c:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8005060:	f383 8811 	msr	BASEPRI, r3
 8005064:	f3bf 8f6f 	isb	sy
 8005068:	f3bf 8f4f 	dsb	sy
 800506c:	60fb      	str	r3, [r7, #12]
 800506e:	e7fe      	b.n	800506e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005074:	2b00      	cmp	r3, #0
 8005076:	d109      	bne.n	800508c <xTaskPriorityDisinherit+0x50>
 8005078:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800507c:	f383 8811 	msr	BASEPRI, r3
 8005080:	f3bf 8f6f 	isb	sy
 8005084:	f3bf 8f4f 	dsb	sy
 8005088:	60bb      	str	r3, [r7, #8]
 800508a:	e7fe      	b.n	800508a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005090:	1e5a      	subs	r2, r3, #1
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800509e:	429a      	cmp	r2, r3
 80050a0:	d046      	beq.n	8005130 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d142      	bne.n	8005130 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	3304      	adds	r3, #4
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7fe fa62 	bl	8003578 <uxListRemove>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d115      	bne.n	80050e6 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050be:	4920      	ldr	r1, [pc, #128]	; (8005140 <xTaskPriorityDisinherit+0x104>)
 80050c0:	4613      	mov	r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4413      	add	r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	440b      	add	r3, r1
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d10a      	bne.n	80050e6 <xTaskPriorityDisinherit+0xaa>
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d4:	461a      	mov	r2, r3
 80050d6:	2301      	movs	r3, #1
 80050d8:	4093      	lsls	r3, r2
 80050da:	43da      	mvns	r2, r3
 80050dc:	4b19      	ldr	r3, [pc, #100]	; (8005144 <xTaskPriorityDisinherit+0x108>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4013      	ands	r3, r2
 80050e2:	4a18      	ldr	r2, [pc, #96]	; (8005144 <xTaskPriorityDisinherit+0x108>)
 80050e4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f2:	f1c3 0205 	rsb	r2, r3, #5
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fe:	461a      	mov	r2, r3
 8005100:	2301      	movs	r3, #1
 8005102:	fa03 f202 	lsl.w	r2, r3, r2
 8005106:	4b0f      	ldr	r3, [pc, #60]	; (8005144 <xTaskPriorityDisinherit+0x108>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4313      	orrs	r3, r2
 800510c:	4a0d      	ldr	r2, [pc, #52]	; (8005144 <xTaskPriorityDisinherit+0x108>)
 800510e:	6013      	str	r3, [r2, #0]
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005114:	4613      	mov	r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	4413      	add	r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	4a08      	ldr	r2, [pc, #32]	; (8005140 <xTaskPriorityDisinherit+0x104>)
 800511e:	441a      	add	r2, r3
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	3304      	adds	r3, #4
 8005124:	4610      	mov	r0, r2
 8005126:	4619      	mov	r1, r3
 8005128:	f7fe f9ca 	bl	80034c0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800512c:	2301      	movs	r3, #1
 800512e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005130:	697b      	ldr	r3, [r7, #20]
	}
 8005132:	4618      	mov	r0, r3
 8005134:	3718      	adds	r7, #24
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	1fffc9e0 	.word	0x1fffc9e0
 8005140:	1fffc9e4 	.word	0x1fffc9e4
 8005144:	1fffcac0 	.word	0x1fffcac0

08005148 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005148:	b580      	push	{r7, lr}
 800514a:	b088      	sub	sp, #32
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005156:	2301      	movs	r3, #1
 8005158:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2b00      	cmp	r3, #0
 800515e:	f000 8083 	beq.w	8005268 <vTaskPriorityDisinheritAfterTimeout+0x120>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005166:	2b00      	cmp	r3, #0
 8005168:	d109      	bne.n	800517e <vTaskPriorityDisinheritAfterTimeout+0x36>
 800516a:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800516e:	f383 8811 	msr	BASEPRI, r3
 8005172:	f3bf 8f6f 	isb	sy
 8005176:	f3bf 8f4f 	dsb	sy
 800517a:	60fb      	str	r3, [r7, #12]
 800517c:	e7fe      	b.n	800517c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	429a      	cmp	r2, r3
 8005186:	d202      	bcs.n	800518e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	61fb      	str	r3, [r7, #28]
 800518c:	e002      	b.n	8005194 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005192:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	429a      	cmp	r2, r3
 800519c:	d064      	beq.n	8005268 <vTaskPriorityDisinheritAfterTimeout+0x120>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d15f      	bne.n	8005268 <vTaskPriorityDisinheritAfterTimeout+0x120>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80051a8:	4b31      	ldr	r3, [pc, #196]	; (8005270 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	69ba      	ldr	r2, [r7, #24]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d109      	bne.n	80051c6 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 80051b2:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80051b6:	f383 8811 	msr	BASEPRI, r3
 80051ba:	f3bf 8f6f 	isb	sy
 80051be:	f3bf 8f4f 	dsb	sy
 80051c2:	60bb      	str	r3, [r7, #8]
 80051c4:	e7fe      	b.n	80051c4 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ca:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	69fa      	ldr	r2, [r7, #28]
 80051d0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	db04      	blt.n	80051e4 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	f1c3 0205 	rsb	r2, r3, #5
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	6959      	ldr	r1, [r3, #20]
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	4613      	mov	r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	4413      	add	r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	4a20      	ldr	r2, [pc, #128]	; (8005274 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80051f4:	4413      	add	r3, r2
 80051f6:	4299      	cmp	r1, r3
 80051f8:	d136      	bne.n	8005268 <vTaskPriorityDisinheritAfterTimeout+0x120>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	3304      	adds	r3, #4
 80051fe:	4618      	mov	r0, r3
 8005200:	f7fe f9ba 	bl	8003578 <uxListRemove>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d115      	bne.n	8005236 <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800520e:	4919      	ldr	r1, [pc, #100]	; (8005274 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8005210:	4613      	mov	r3, r2
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	4413      	add	r3, r2
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	440b      	add	r3, r1
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10a      	bne.n	8005236 <vTaskPriorityDisinheritAfterTimeout+0xee>
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005224:	461a      	mov	r2, r3
 8005226:	2301      	movs	r3, #1
 8005228:	4093      	lsls	r3, r2
 800522a:	43da      	mvns	r2, r3
 800522c:	4b12      	ldr	r3, [pc, #72]	; (8005278 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4013      	ands	r3, r2
 8005232:	4a11      	ldr	r2, [pc, #68]	; (8005278 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8005234:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523a:	461a      	mov	r2, r3
 800523c:	2301      	movs	r3, #1
 800523e:	fa03 f202 	lsl.w	r2, r3, r2
 8005242:	4b0d      	ldr	r3, [pc, #52]	; (8005278 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4313      	orrs	r3, r2
 8005248:	4a0b      	ldr	r2, [pc, #44]	; (8005278 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800524a:	6013      	str	r3, [r2, #0]
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005250:	4613      	mov	r3, r2
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	4413      	add	r3, r2
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	4a06      	ldr	r2, [pc, #24]	; (8005274 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800525a:	441a      	add	r2, r3
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	3304      	adds	r3, #4
 8005260:	4610      	mov	r0, r2
 8005262:	4619      	mov	r1, r3
 8005264:	f7fe f92c 	bl	80034c0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005268:	3720      	adds	r7, #32
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	1fffc9e0 	.word	0x1fffc9e0
 8005274:	1fffc9e4 	.word	0x1fffc9e4
 8005278:	1fffcac0 	.word	0x1fffcac0

0800527c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800527c:	b480      	push	{r7}
 800527e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005280:	4b07      	ldr	r3, [pc, #28]	; (80052a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d004      	beq.n	8005292 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005288:	4b05      	ldr	r3, [pc, #20]	; (80052a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800528e:	3201      	adds	r2, #1
 8005290:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8005292:	4b03      	ldr	r3, [pc, #12]	; (80052a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8005294:	681b      	ldr	r3, [r3, #0]
	}
 8005296:	4618      	mov	r0, r3
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr
 80052a0:	1fffc9e0 	.word	0x1fffc9e0

080052a4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80052ae:	4b2b      	ldr	r3, [pc, #172]	; (800535c <prvAddCurrentTaskToDelayedList+0xb8>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 80052b4:	4b2a      	ldr	r3, [pc, #168]	; (8005360 <prvAddCurrentTaskToDelayedList+0xbc>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052be:	4b28      	ldr	r3, [pc, #160]	; (8005360 <prvAddCurrentTaskToDelayedList+0xbc>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	3304      	adds	r3, #4
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7fe f957 	bl	8003578 <uxListRemove>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d10b      	bne.n	80052e8 <prvAddCurrentTaskToDelayedList+0x44>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80052d0:	4b23      	ldr	r3, [pc, #140]	; (8005360 <prvAddCurrentTaskToDelayedList+0xbc>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d6:	461a      	mov	r2, r3
 80052d8:	2301      	movs	r3, #1
 80052da:	4093      	lsls	r3, r2
 80052dc:	43da      	mvns	r2, r3
 80052de:	4b21      	ldr	r3, [pc, #132]	; (8005364 <prvAddCurrentTaskToDelayedList+0xc0>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4013      	ands	r3, r2
 80052e4:	4a1f      	ldr	r2, [pc, #124]	; (8005364 <prvAddCurrentTaskToDelayedList+0xc0>)
 80052e6:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ee:	d10a      	bne.n	8005306 <prvAddCurrentTaskToDelayedList+0x62>
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d007      	beq.n	8005306 <prvAddCurrentTaskToDelayedList+0x62>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052f6:	4b1a      	ldr	r3, [pc, #104]	; (8005360 <prvAddCurrentTaskToDelayedList+0xbc>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	3304      	adds	r3, #4
 80052fc:	481a      	ldr	r0, [pc, #104]	; (8005368 <prvAddCurrentTaskToDelayedList+0xc4>)
 80052fe:	4619      	mov	r1, r3
 8005300:	f7fe f8de 	bl	80034c0 <vListInsertEnd>
 8005304:	e026      	b.n	8005354 <prvAddCurrentTaskToDelayedList+0xb0>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4413      	add	r3, r2
 800530c:	60bb      	str	r3, [r7, #8]

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800530e:	4b14      	ldr	r3, [pc, #80]	; (8005360 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68ba      	ldr	r2, [r7, #8]
 8005314:	605a      	str	r2, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8005316:	68ba      	ldr	r2, [r7, #8]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	429a      	cmp	r2, r3
 800531c:	d209      	bcs.n	8005332 <prvAddCurrentTaskToDelayedList+0x8e>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800531e:	4b13      	ldr	r3, [pc, #76]	; (800536c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	4b0f      	ldr	r3, [pc, #60]	; (8005360 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	3304      	adds	r3, #4
 8005328:	4610      	mov	r0, r2
 800532a:	4619      	mov	r1, r3
 800532c:	f7fe f8ec 	bl	8003508 <vListInsert>
 8005330:	e010      	b.n	8005354 <prvAddCurrentTaskToDelayedList+0xb0>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005332:	4b0f      	ldr	r3, [pc, #60]	; (8005370 <prvAddCurrentTaskToDelayedList+0xcc>)
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	4b0a      	ldr	r3, [pc, #40]	; (8005360 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	3304      	adds	r3, #4
 800533c:	4610      	mov	r0, r2
 800533e:	4619      	mov	r1, r3
 8005340:	f7fe f8e2 	bl	8003508 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8005344:	4b0b      	ldr	r3, [pc, #44]	; (8005374 <prvAddCurrentTaskToDelayedList+0xd0>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68ba      	ldr	r2, [r7, #8]
 800534a:	429a      	cmp	r2, r3
 800534c:	d202      	bcs.n	8005354 <prvAddCurrentTaskToDelayedList+0xb0>
				{
					xNextTaskUnblockTime = xTimeToWake;
 800534e:	4a09      	ldr	r2, [pc, #36]	; (8005374 <prvAddCurrentTaskToDelayedList+0xd0>)
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	6013      	str	r3, [r2, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	1fffcabc 	.word	0x1fffcabc
 8005360:	1fffc9e0 	.word	0x1fffc9e0
 8005364:	1fffcac0 	.word	0x1fffcac0
 8005368:	1fffcaa4 	.word	0x1fffcaa4
 800536c:	1fffca74 	.word	0x1fffca74
 8005370:	1fffca70 	.word	0x1fffca70
 8005374:	1fffcad8 	.word	0x1fffcad8

08005378 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800537e:	2300      	movs	r3, #0
 8005380:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005382:	f000 faf3 	bl	800596c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005386:	4b11      	ldr	r3, [pc, #68]	; (80053cc <xTimerCreateTimerTask+0x54>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00b      	beq.n	80053a6 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800538e:	2302      	movs	r3, #2
 8005390:	9300      	str	r3, [sp, #0]
 8005392:	4b0f      	ldr	r3, [pc, #60]	; (80053d0 <xTimerCreateTimerTask+0x58>)
 8005394:	9301      	str	r3, [sp, #4]
 8005396:	480f      	ldr	r0, [pc, #60]	; (80053d4 <xTimerCreateTimerTask+0x5c>)
 8005398:	490f      	ldr	r1, [pc, #60]	; (80053d8 <xTimerCreateTimerTask+0x60>)
 800539a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800539e:	2300      	movs	r3, #0
 80053a0:	f7ff f818 	bl	80043d4 <xTaskCreate>
 80053a4:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d109      	bne.n	80053c0 <xTimerCreateTimerTask+0x48>
 80053ac:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80053b0:	f383 8811 	msr	BASEPRI, r3
 80053b4:	f3bf 8f6f 	isb	sy
 80053b8:	f3bf 8f4f 	dsb	sy
 80053bc:	603b      	str	r3, [r7, #0]
 80053be:	e7fe      	b.n	80053be <xTimerCreateTimerTask+0x46>
	return xReturn;
 80053c0:	687b      	ldr	r3, [r7, #4]
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3708      	adds	r7, #8
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	1fffcb14 	.word	0x1fffcb14
 80053d0:	1fffcb18 	.word	0x1fffcb18
 80053d4:	08005519 	.word	0x08005519
 80053d8:	08006ef4 	.word	0x08006ef4

080053dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b08a      	sub	sp, #40	; 0x28
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
 80053e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80053ea:	2300      	movs	r3, #0
 80053ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d109      	bne.n	8005408 <xTimerGenericCommand+0x2c>
 80053f4:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80053f8:	f383 8811 	msr	BASEPRI, r3
 80053fc:	f3bf 8f6f 	isb	sy
 8005400:	f3bf 8f4f 	dsb	sy
 8005404:	623b      	str	r3, [r7, #32]
 8005406:	e7fe      	b.n	8005406 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005408:	4b1c      	ldr	r3, [pc, #112]	; (800547c <xTimerGenericCommand+0xa0>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d030      	beq.n	8005472 <xTimerGenericCommand+0x96>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	2b05      	cmp	r3, #5
 8005420:	dc1c      	bgt.n	800545c <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005422:	f7ff fd6b 	bl	8004efc <xTaskGetSchedulerState>
 8005426:	4603      	mov	r3, r0
 8005428:	2b02      	cmp	r3, #2
 800542a:	d10b      	bne.n	8005444 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800542c:	4b13      	ldr	r3, [pc, #76]	; (800547c <xTimerGenericCommand+0xa0>)
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	f107 0310 	add.w	r3, r7, #16
 8005434:	4610      	mov	r0, r2
 8005436:	4619      	mov	r1, r3
 8005438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800543a:	2300      	movs	r3, #0
 800543c:	f7fe f990 	bl	8003760 <xQueueGenericSend>
 8005440:	6278      	str	r0, [r7, #36]	; 0x24
 8005442:	e016      	b.n	8005472 <xTimerGenericCommand+0x96>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005444:	4b0d      	ldr	r3, [pc, #52]	; (800547c <xTimerGenericCommand+0xa0>)
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	f107 0310 	add.w	r3, r7, #16
 800544c:	4610      	mov	r0, r2
 800544e:	4619      	mov	r1, r3
 8005450:	2200      	movs	r2, #0
 8005452:	2300      	movs	r3, #0
 8005454:	f7fe f984 	bl	8003760 <xQueueGenericSend>
 8005458:	6278      	str	r0, [r7, #36]	; 0x24
 800545a:	e00a      	b.n	8005472 <xTimerGenericCommand+0x96>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800545c:	4b07      	ldr	r3, [pc, #28]	; (800547c <xTimerGenericCommand+0xa0>)
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	f107 0310 	add.w	r3, r7, #16
 8005464:	4610      	mov	r0, r2
 8005466:	4619      	mov	r1, r3
 8005468:	683a      	ldr	r2, [r7, #0]
 800546a:	2300      	movs	r3, #0
 800546c:	f7fe fa96 	bl	800399c <xQueueGenericSendFromISR>
 8005470:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005474:	4618      	mov	r0, r3
 8005476:	3728      	adds	r7, #40	; 0x28
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	1fffcb14 	.word	0x1fffcb14

08005480 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b088      	sub	sp, #32
 8005484:	af02      	add	r7, sp, #8
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800548a:	4b22      	ldr	r3, [pc, #136]	; (8005514 <prvProcessExpiredTimer+0x94>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	3304      	adds	r3, #4
 8005498:	4618      	mov	r0, r3
 800549a:	f7fe f86d 	bl	8003578 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054a4:	f003 0304 	and.w	r3, r3, #4
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d022      	beq.n	80054f2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	699a      	ldr	r2, [r3, #24]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4413      	add	r3, r2
 80054b4:	6978      	ldr	r0, [r7, #20]
 80054b6:	4619      	mov	r1, r3
 80054b8:	683a      	ldr	r2, [r7, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f000 f8d0 	bl	8005660 <prvInsertTimerInActiveList>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d01e      	beq.n	8005504 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80054c6:	2300      	movs	r3, #0
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	6978      	ldr	r0, [r7, #20]
 80054cc:	2100      	movs	r1, #0
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	2300      	movs	r3, #0
 80054d2:	f7ff ff83 	bl	80053dc <xTimerGenericCommand>
 80054d6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d112      	bne.n	8005504 <prvProcessExpiredTimer+0x84>
 80054de:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80054e2:	f383 8811 	msr	BASEPRI, r3
 80054e6:	f3bf 8f6f 	isb	sy
 80054ea:	f3bf 8f4f 	dsb	sy
 80054ee:	60fb      	str	r3, [r7, #12]
 80054f0:	e7fe      	b.n	80054f0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054f8:	f023 0301 	bic.w	r3, r3, #1
 80054fc:	b2da      	uxtb	r2, r3
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	6a1b      	ldr	r3, [r3, #32]
 8005508:	6978      	ldr	r0, [r7, #20]
 800550a:	4798      	blx	r3
}
 800550c:	3718      	adds	r7, #24
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	1fffcb0c 	.word	0x1fffcb0c

08005518 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005520:	f107 0308 	add.w	r3, r7, #8
 8005524:	4618      	mov	r0, r3
 8005526:	f000 f857 	bl	80055d8 <prvGetNextExpireTime>
 800552a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	4619      	mov	r1, r3
 8005532:	f000 f803 	bl	800553c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005536:	f000 f8d5 	bl	80056e4 <prvProcessReceivedCommands>
	}
 800553a:	e7f1      	b.n	8005520 <prvTimerTask+0x8>

0800553c <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005546:	f7ff f915 	bl	8004774 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800554a:	f107 0308 	add.w	r3, r7, #8
 800554e:	4618      	mov	r0, r3
 8005550:	f000 f866 	bl	8005620 <prvSampleTimeNow>
 8005554:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d131      	bne.n	80055c0 <prvProcessTimerOrBlockTask+0x84>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d10a      	bne.n	8005578 <prvProcessTimerOrBlockTask+0x3c>
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	429a      	cmp	r2, r3
 8005568:	d806      	bhi.n	8005578 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800556a:	f7ff f911 	bl	8004790 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	68f9      	ldr	r1, [r7, #12]
 8005572:	f7ff ff85 	bl	8005480 <prvProcessExpiredTimer>
 8005576:	e025      	b.n	80055c4 <prvProcessTimerOrBlockTask+0x88>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d008      	beq.n	8005590 <prvProcessTimerOrBlockTask+0x54>
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800557e:	4b13      	ldr	r3, [pc, #76]	; (80055cc <prvProcessTimerOrBlockTask+0x90>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d101      	bne.n	800558c <prvProcessTimerOrBlockTask+0x50>
 8005588:	2301      	movs	r3, #1
 800558a:	e000      	b.n	800558e <prvProcessTimerOrBlockTask+0x52>
 800558c:	2300      	movs	r3, #0
 800558e:	603b      	str	r3, [r7, #0]
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005590:	4b0f      	ldr	r3, [pc, #60]	; (80055d0 <prvProcessTimerOrBlockTask+0x94>)
 8005592:	6819      	ldr	r1, [r3, #0]
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	4608      	mov	r0, r1
 800559c:	4619      	mov	r1, r3
 800559e:	683a      	ldr	r2, [r7, #0]
 80055a0:	f7fe fe88 	bl	80042b4 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 80055a4:	f7ff f8f4 	bl	8004790 <xTaskResumeAll>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d10a      	bne.n	80055c4 <prvProcessTimerOrBlockTask+0x88>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
 80055ae:	4b09      	ldr	r3, [pc, #36]	; (80055d4 <prvProcessTimerOrBlockTask+0x98>)
 80055b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055b4:	601a      	str	r2, [r3, #0]
 80055b6:	f3bf 8f4f 	dsb	sy
 80055ba:	f3bf 8f6f 	isb	sy
 80055be:	e001      	b.n	80055c4 <prvProcessTimerOrBlockTask+0x88>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 80055c0:	f7ff f8e6 	bl	8004790 <xTaskResumeAll>
		}
	}
}
 80055c4:	3710      	adds	r7, #16
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	1fffcb10 	.word	0x1fffcb10
 80055d0:	1fffcb14 	.word	0x1fffcb14
 80055d4:	e000ed04 	.word	0xe000ed04

080055d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80055e0:	4b0e      	ldr	r3, [pc, #56]	; (800561c <prvGetNextExpireTime+0x44>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d101      	bne.n	80055ee <prvGetNextExpireTime+0x16>
 80055ea:	2201      	movs	r2, #1
 80055ec:	e000      	b.n	80055f0 <prvGetNextExpireTime+0x18>
 80055ee:	2200      	movs	r2, #0
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d105      	bne.n	8005608 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80055fc:	4b07      	ldr	r3, [pc, #28]	; (800561c <prvGetNextExpireTime+0x44>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	60fb      	str	r3, [r7, #12]
 8005606:	e001      	b.n	800560c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005608:	2300      	movs	r3, #0
 800560a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800560c:	68fb      	ldr	r3, [r7, #12]
}
 800560e:	4618      	mov	r0, r3
 8005610:	3714      	adds	r7, #20
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	1fffcb0c 	.word	0x1fffcb0c

08005620 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005628:	f7ff f950 	bl	80048cc <xTaskGetTickCount>
 800562c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800562e:	4b0b      	ldr	r3, [pc, #44]	; (800565c <prvSampleTimeNow+0x3c>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	429a      	cmp	r2, r3
 8005636:	d205      	bcs.n	8005644 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005638:	f000 f936 	bl	80058a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	601a      	str	r2, [r3, #0]
 8005642:	e002      	b.n	800564a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800564a:	4a04      	ldr	r2, [pc, #16]	; (800565c <prvSampleTimeNow+0x3c>)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005650:	68fb      	ldr	r3, [r7, #12]
}
 8005652:	4618      	mov	r0, r3
 8005654:	3710      	adds	r7, #16
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	1fffcb1c 	.word	0x1fffcb1c

08005660 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
 800566c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800566e:	2300      	movs	r3, #0
 8005670:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	68ba      	ldr	r2, [r7, #8]
 8005676:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800567e:	68ba      	ldr	r2, [r7, #8]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	429a      	cmp	r2, r3
 8005684:	d812      	bhi.n	80056ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	1ad2      	subs	r2, r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	429a      	cmp	r2, r3
 8005692:	d302      	bcc.n	800569a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005694:	2301      	movs	r3, #1
 8005696:	617b      	str	r3, [r7, #20]
 8005698:	e01b      	b.n	80056d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800569a:	4b10      	ldr	r3, [pc, #64]	; (80056dc <prvInsertTimerInActiveList+0x7c>)
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	3304      	adds	r3, #4
 80056a2:	4610      	mov	r0, r2
 80056a4:	4619      	mov	r1, r3
 80056a6:	f7fd ff2f 	bl	8003508 <vListInsert>
 80056aa:	e012      	b.n	80056d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d206      	bcs.n	80056c2 <prvInsertTimerInActiveList+0x62>
 80056b4:	68ba      	ldr	r2, [r7, #8]
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d302      	bcc.n	80056c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80056bc:	2301      	movs	r3, #1
 80056be:	617b      	str	r3, [r7, #20]
 80056c0:	e007      	b.n	80056d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80056c2:	4b07      	ldr	r3, [pc, #28]	; (80056e0 <prvInsertTimerInActiveList+0x80>)
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	3304      	adds	r3, #4
 80056ca:	4610      	mov	r0, r2
 80056cc:	4619      	mov	r1, r3
 80056ce:	f7fd ff1b 	bl	8003508 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80056d2:	697b      	ldr	r3, [r7, #20]
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3718      	adds	r7, #24
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	1fffcb10 	.word	0x1fffcb10
 80056e0:	1fffcb0c 	.word	0x1fffcb0c

080056e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b08e      	sub	sp, #56	; 0x38
 80056e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80056ea:	e0cb      	b.n	8005884 <prvProcessReceivedCommands+0x1a0>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	da18      	bge.n	8005724 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80056f2:	1d3b      	adds	r3, r7, #4
 80056f4:	3304      	adds	r3, #4
 80056f6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80056f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d109      	bne.n	8005712 <prvProcessReceivedCommands+0x2e>
 80056fe:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8005702:	f383 8811 	msr	BASEPRI, r3
 8005706:	f3bf 8f6f 	isb	sy
 800570a:	f3bf 8f4f 	dsb	sy
 800570e:	61fb      	str	r3, [r7, #28]
 8005710:	e7fe      	b.n	8005710 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005718:	6851      	ldr	r1, [r2, #4]
 800571a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800571c:	6892      	ldr	r2, [r2, #8]
 800571e:	4608      	mov	r0, r1
 8005720:	4611      	mov	r1, r2
 8005722:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	f2c0 80ac 	blt.w	8005884 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005732:	695b      	ldr	r3, [r3, #20]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d004      	beq.n	8005742 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573a:	3304      	adds	r3, #4
 800573c:	4618      	mov	r0, r3
 800573e:	f7fd ff1b 	bl	8003578 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005742:	463b      	mov	r3, r7
 8005744:	4618      	mov	r0, r3
 8005746:	f7ff ff6b 	bl	8005620 <prvSampleTimeNow>
 800574a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b09      	cmp	r3, #9
 8005750:	f200 8097 	bhi.w	8005882 <prvProcessReceivedCommands+0x19e>
 8005754:	a201      	add	r2, pc, #4	; (adr r2, 800575c <prvProcessReceivedCommands+0x78>)
 8005756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800575a:	bf00      	nop
 800575c:	08005785 	.word	0x08005785
 8005760:	08005785 	.word	0x08005785
 8005764:	08005785 	.word	0x08005785
 8005768:	080057fb 	.word	0x080057fb
 800576c:	0800580f 	.word	0x0800580f
 8005770:	08005859 	.word	0x08005859
 8005774:	08005785 	.word	0x08005785
 8005778:	08005785 	.word	0x08005785
 800577c:	080057fb 	.word	0x080057fb
 8005780:	0800580f 	.word	0x0800580f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005786:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800578a:	f043 0301 	orr.w	r3, r3, #1
 800578e:	b2da      	uxtb	r2, r3
 8005790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005792:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	441a      	add	r2, r3
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057a2:	4611      	mov	r1, r2
 80057a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057a6:	f7ff ff5b 	bl	8005660 <prvInsertTimerInActiveList>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d023      	beq.n	80057f8 <prvProcessReceivedCommands+0x114>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80057b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b2:	6a1b      	ldr	r3, [r3, #32]
 80057b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057b6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80057b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057be:	f003 0304 	and.w	r3, r3, #4
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d018      	beq.n	80057f8 <prvProcessReceivedCommands+0x114>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80057c6:	68ba      	ldr	r2, [r7, #8]
 80057c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	441a      	add	r2, r3
 80057ce:	2300      	movs	r3, #0
 80057d0:	9300      	str	r3, [sp, #0]
 80057d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057d4:	2100      	movs	r1, #0
 80057d6:	2300      	movs	r3, #0
 80057d8:	f7ff fe00 	bl	80053dc <xTimerGenericCommand>
 80057dc:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80057de:	6a3b      	ldr	r3, [r7, #32]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d109      	bne.n	80057f8 <prvProcessReceivedCommands+0x114>
 80057e4:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80057e8:	f383 8811 	msr	BASEPRI, r3
 80057ec:	f3bf 8f6f 	isb	sy
 80057f0:	f3bf 8f4f 	dsb	sy
 80057f4:	61bb      	str	r3, [r7, #24]
 80057f6:	e7fe      	b.n	80057f6 <prvProcessReceivedCommands+0x112>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 80057f8:	e044      	b.n	8005884 <prvProcessReceivedCommands+0x1a0>

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80057fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005800:	f023 0301 	bic.w	r3, r3, #1
 8005804:	b2da      	uxtb	r2, r3
 8005806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005808:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800580c:	e03a      	b.n	8005884 <prvProcessReceivedCommands+0x1a0>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800580e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005810:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005814:	f043 0301 	orr.w	r3, r3, #1
 8005818:	b2da      	uxtb	r2, r3
 800581a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005824:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d109      	bne.n	8005842 <prvProcessReceivedCommands+0x15e>
 800582e:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8005832:	f383 8811 	msr	BASEPRI, r3
 8005836:	f3bf 8f6f 	isb	sy
 800583a:	f3bf 8f4f 	dsb	sy
 800583e:	617b      	str	r3, [r7, #20]
 8005840:	e7fe      	b.n	8005840 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005844:	699a      	ldr	r2, [r3, #24]
 8005846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005848:	4413      	add	r3, r2
 800584a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800584c:	4619      	mov	r1, r3
 800584e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005852:	f7ff ff05 	bl	8005660 <prvInsertTimerInActiveList>
					break;
 8005856:	e015      	b.n	8005884 <prvProcessReceivedCommands+0x1a0>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800585e:	f003 0302 	and.w	r3, r3, #2
 8005862:	2b00      	cmp	r3, #0
 8005864:	d103      	bne.n	800586e <prvProcessReceivedCommands+0x18a>
						{
							vPortFree( pxTimer );
 8005866:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005868:	f7fd fdec 	bl	8003444 <vPortFree>
 800586c:	e008      	b.n	8005880 <prvProcessReceivedCommands+0x19c>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800586e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005870:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005874:	f023 0301 	bic.w	r3, r3, #1
 8005878:	b2da      	uxtb	r2, r3
 800587a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005880:	e000      	b.n	8005884 <prvProcessReceivedCommands+0x1a0>

				default	:
					/* Don't expect to get here. */
					break;
 8005882:	bf00      	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005884:	4b07      	ldr	r3, [pc, #28]	; (80058a4 <prvProcessReceivedCommands+0x1c0>)
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	1d3b      	adds	r3, r7, #4
 800588a:	4610      	mov	r0, r2
 800588c:	4619      	mov	r1, r3
 800588e:	2200      	movs	r2, #0
 8005890:	f7fe f9c6 	bl	8003c20 <xQueueReceive>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	f47f af28 	bne.w	80056ec <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
 800589c:	3730      	adds	r7, #48	; 0x30
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	1fffcb14 	.word	0x1fffcb14

080058a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b088      	sub	sp, #32
 80058ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80058ae:	e047      	b.n	8005940 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80058b0:	4b2c      	ldr	r3, [pc, #176]	; (8005964 <prvSwitchTimerLists+0xbc>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058ba:	4b2a      	ldr	r3, [pc, #168]	; (8005964 <prvSwitchTimerLists+0xbc>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	3304      	adds	r3, #4
 80058c8:	4618      	mov	r0, r3
 80058ca:	f7fd fe55 	bl	8003578 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	6a1b      	ldr	r3, [r3, #32]
 80058d2:	6938      	ldr	r0, [r7, #16]
 80058d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058dc:	f003 0304 	and.w	r3, r3, #4
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d02d      	beq.n	8005940 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	699a      	ldr	r2, [r3, #24]
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	4413      	add	r3, r2
 80058ec:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d90e      	bls.n	8005914 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005902:	4b18      	ldr	r3, [pc, #96]	; (8005964 <prvSwitchTimerLists+0xbc>)
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	3304      	adds	r3, #4
 800590a:	4610      	mov	r0, r2
 800590c:	4619      	mov	r1, r3
 800590e:	f7fd fdfb 	bl	8003508 <vListInsert>
 8005912:	e015      	b.n	8005940 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005914:	2300      	movs	r3, #0
 8005916:	9300      	str	r3, [sp, #0]
 8005918:	6938      	ldr	r0, [r7, #16]
 800591a:	2100      	movs	r1, #0
 800591c:	697a      	ldr	r2, [r7, #20]
 800591e:	2300      	movs	r3, #0
 8005920:	f7ff fd5c 	bl	80053dc <xTimerGenericCommand>
 8005924:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d109      	bne.n	8005940 <prvSwitchTimerLists+0x98>
 800592c:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8005930:	f383 8811 	msr	BASEPRI, r3
 8005934:	f3bf 8f6f 	isb	sy
 8005938:	f3bf 8f4f 	dsb	sy
 800593c:	603b      	str	r3, [r7, #0]
 800593e:	e7fe      	b.n	800593e <prvSwitchTimerLists+0x96>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005940:	4b08      	ldr	r3, [pc, #32]	; (8005964 <prvSwitchTimerLists+0xbc>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1b2      	bne.n	80058b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800594a:	4b06      	ldr	r3, [pc, #24]	; (8005964 <prvSwitchTimerLists+0xbc>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 8005950:	4b05      	ldr	r3, [pc, #20]	; (8005968 <prvSwitchTimerLists+0xc0>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a03      	ldr	r2, [pc, #12]	; (8005964 <prvSwitchTimerLists+0xbc>)
 8005956:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005958:	4a03      	ldr	r2, [pc, #12]	; (8005968 <prvSwitchTimerLists+0xc0>)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6013      	str	r3, [r2, #0]
}
 800595e:	3718      	adds	r7, #24
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	1fffcb0c 	.word	0x1fffcb0c
 8005968:	1fffcb10 	.word	0x1fffcb10

0800596c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800596c:	b580      	push	{r7, lr}
 800596e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005970:	f7fd fc40 	bl	80031f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005974:	4b12      	ldr	r3, [pc, #72]	; (80059c0 <prvCheckForValidListAndQueue+0x54>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d11d      	bne.n	80059b8 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800597c:	4811      	ldr	r0, [pc, #68]	; (80059c4 <prvCheckForValidListAndQueue+0x58>)
 800597e:	f7fd fd73 	bl	8003468 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005982:	4811      	ldr	r0, [pc, #68]	; (80059c8 <prvCheckForValidListAndQueue+0x5c>)
 8005984:	f7fd fd70 	bl	8003468 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005988:	4b10      	ldr	r3, [pc, #64]	; (80059cc <prvCheckForValidListAndQueue+0x60>)
 800598a:	4a0e      	ldr	r2, [pc, #56]	; (80059c4 <prvCheckForValidListAndQueue+0x58>)
 800598c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800598e:	4b10      	ldr	r3, [pc, #64]	; (80059d0 <prvCheckForValidListAndQueue+0x64>)
 8005990:	4a0d      	ldr	r2, [pc, #52]	; (80059c8 <prvCheckForValidListAndQueue+0x5c>)
 8005992:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005994:	2005      	movs	r0, #5
 8005996:	2110      	movs	r1, #16
 8005998:	2200      	movs	r2, #0
 800599a:	f7fd fe7f 	bl	800369c <xQueueGenericCreate>
 800599e:	4602      	mov	r2, r0
 80059a0:	4b07      	ldr	r3, [pc, #28]	; (80059c0 <prvCheckForValidListAndQueue+0x54>)
 80059a2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80059a4:	4b06      	ldr	r3, [pc, #24]	; (80059c0 <prvCheckForValidListAndQueue+0x54>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d005      	beq.n	80059b8 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80059ac:	4b04      	ldr	r3, [pc, #16]	; (80059c0 <prvCheckForValidListAndQueue+0x54>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4618      	mov	r0, r3
 80059b2:	4908      	ldr	r1, [pc, #32]	; (80059d4 <prvCheckForValidListAndQueue+0x68>)
 80059b4:	f7fe fc56 	bl	8004264 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80059b8:	f7fd fc4a 	bl	8003250 <vPortExitCritical>
}
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	1fffcb14 	.word	0x1fffcb14
 80059c4:	1fffcae4 	.word	0x1fffcae4
 80059c8:	1fffcaf8 	.word	0x1fffcaf8
 80059cc:	1fffcb0c 	.word	0x1fffcb0c
 80059d0:	1fffcb10 	.word	0x1fffcb10
 80059d4:	08006efc 	.word	0x08006efc

080059d8 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6819      	ldr	r1, [r3, #0]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	7c1a      	ldrb	r2, [r3, #16]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	3304      	adds	r3, #4
 80059ec:	4608      	mov	r0, r1
 80059ee:	4611      	mov	r1, r2
 80059f0:	461a      	mov	r2, r3
 80059f2:	f7fa fd21 	bl	8000438 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6819      	ldr	r1, [r3, #0]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	7c1a      	ldrb	r2, [r3, #16]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	7c5b      	ldrb	r3, [r3, #17]
 8005a02:	4608      	mov	r0, r1
 8005a04:	4611      	mov	r1, r2
 8005a06:	461a      	mov	r2, r3
 8005a08:	f7fb fc98 	bl	800133c <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3708      	adds	r7, #8
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop

08005a18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f003 0307 	and.w	r3, r3, #7
 8005a26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a28:	4b0c      	ldr	r3, [pc, #48]	; (8005a5c <__NVIC_SetPriorityGrouping+0x44>)
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005a34:	4013      	ands	r3, r2
 8005a36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8005a40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a48:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8005a4a:	4a04      	ldr	r2, [pc, #16]	; (8005a5c <__NVIC_SetPriorityGrouping+0x44>)
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	60d3      	str	r3, [r2, #12]
}
 8005a50:	3714      	adds	r7, #20
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	e000ed00 	.word	0xe000ed00

08005a60 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 8005a66:	2001      	movs	r0, #1
 8005a68:	f7ff ffd6 	bl	8005a18 <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005a6c:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 8005a6e:	4b21      	ldr	r3, [pc, #132]	; (8005af4 <SystemCoreSetup+0x94>)
 8005a70:	4a21      	ldr	r2, [pc, #132]	; (8005af8 <SystemCoreSetup+0x98>)
 8005a72:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005a74:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8005a78:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8005a7a:	4a1e      	ldr	r2, [pc, #120]	; (8005af4 <SystemCoreSetup+0x94>)
 8005a7c:	4b1d      	ldr	r3, [pc, #116]	; (8005af4 <SystemCoreSetup+0x94>)
 8005a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a82:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005a86:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 8005a8a:	4b1c      	ldr	r3, [pc, #112]	; (8005afc <SystemCoreSetup+0x9c>)
 8005a8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a90:	3314      	adds	r3, #20
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f023 030f 	bic.w	r3, r3, #15
 8005a9c:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f043 0302 	orr.w	r3, r3, #2
 8005aa4:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8005aa6:	4b15      	ldr	r3, [pc, #84]	; (8005afc <SystemCoreSetup+0x9c>)
 8005aa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aac:	3314      	adds	r3, #20
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 8005ab2:	4a10      	ldr	r2, [pc, #64]	; (8005af4 <SystemCoreSetup+0x94>)
 8005ab4:	4b0f      	ldr	r3, [pc, #60]	; (8005af4 <SystemCoreSetup+0x94>)
 8005ab6:	695b      	ldr	r3, [r3, #20]
 8005ab8:	f023 0310 	bic.w	r3, r3, #16
 8005abc:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 8005abe:	4a0d      	ldr	r2, [pc, #52]	; (8005af4 <SystemCoreSetup+0x94>)
 8005ac0:	4b0c      	ldr	r3, [pc, #48]	; (8005af4 <SystemCoreSetup+0x94>)
 8005ac2:	695b      	ldr	r3, [r3, #20]
 8005ac4:	f023 0308 	bic.w	r3, r3, #8
 8005ac8:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8005aca:	4a0a      	ldr	r2, [pc, #40]	; (8005af4 <SystemCoreSetup+0x94>)
 8005acc:	4b09      	ldr	r3, [pc, #36]	; (8005af4 <SystemCoreSetup+0x94>)
 8005ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ad4:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 8005ad6:	4a07      	ldr	r2, [pc, #28]	; (8005af4 <SystemCoreSetup+0x94>)
 8005ad8:	4b06      	ldr	r3, [pc, #24]	; (8005af4 <SystemCoreSetup+0x94>)
 8005ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005adc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005ae0:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 8005ae2:	4a04      	ldr	r2, [pc, #16]	; (8005af4 <SystemCoreSetup+0x94>)
 8005ae4:	4b03      	ldr	r3, [pc, #12]	; (8005af4 <SystemCoreSetup+0x94>)
 8005ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005aec:	6253      	str	r3, [r2, #36]	; 0x24
}
 8005aee:	3708      	adds	r7, #8
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	e000ed00 	.word	0xe000ed00
 8005af8:	08000000 	.word	0x08000000
 8005afc:	58001000 	.word	0x58001000

08005b00 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	701a      	strb	r2, [r3, #0]

  return (status);
 8005b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3714      	adds	r7, #20
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 8005b20:	b480      	push	{r7}
 8005b22:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 8005b24:	4b02      	ldr	r3, [pc, #8]	; (8005b30 <OSCHP_GetFrequency+0x10>)
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr
 8005b30:	00b71b00 	.word	0x00b71b00

08005b34 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 8005b34:	b5b0      	push	{r4, r5, r7, lr}
 8005b36:	b086      	sub	sp, #24
 8005b38:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 8005b3a:	4b10      	ldr	r3, [pc, #64]	; (8005b7c <SystemCoreClockSetup+0x48>)
 8005b3c:	1d3c      	adds	r4, r7, #4
 8005b3e:	461d      	mov	r5, r3
 8005b40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b44:	682b      	ldr	r3, [r5, #0]
 8005b46:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 8005b48:	1d3b      	adds	r3, r7, #4
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f7fa fd68 	bl	8000620 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 8005b50:	2000      	movs	r0, #0
 8005b52:	f7fa fe87 	bl	8000864 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 8005b56:	2000      	movs	r0, #0
 8005b58:	f7fa fe3c 	bl	80007d4 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 8005b5c:	2004      	movs	r0, #4
 8005b5e:	f7fa ff0d 	bl	800097c <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 8005b62:	2001      	movs	r0, #1
 8005b64:	2120      	movs	r1, #32
 8005b66:	f7fa ff81 	bl	8000a6c <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 8005b6a:	2000      	movs	r0, #0
 8005b6c:	f7fa fe46 	bl	80007fc <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 8005b70:	2001      	movs	r0, #1
 8005b72:	f7fa ff17 	bl	80009a4 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

}
 8005b76:	3718      	adds	r7, #24
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bdb0      	pop	{r4, r5, r7, pc}
 8005b7c:	08006f68 	.word	0x08006f68

08005b80 <XMC_GPIO_SetOutputLevel>:
 *
 */


__STATIC_INLINE void XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_OUTPUT_LEVEL_t level)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	460b      	mov	r3, r1
 8005b8a:	607a      	str	r2, [r7, #4]
 8005b8c:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid output level", XMC_GPIO_CHECK_OUTPUT_LEVEL(level));
  
  port->OMR = (uint32_t)level << pin;
 8005b8e:	7afb      	ldrb	r3, [r7, #11]
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	409a      	lsls	r2, r3
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	605a      	str	r2, [r3, #4]
}
 8005b98:	3714      	adds	r7, #20
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop

08005ba4 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	460b      	mov	r3, r1
 8005bae:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005bb4:	78fb      	ldrb	r3, [r7, #3]
 8005bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8005bba:	f003 0301 	and.w	r3, r3, #1
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	370c      	adds	r7, #12
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop

08005bcc <BUS_IO_Init>:
* @param handle_ptr Pointer pointing to APP data structure.
* @return BUS_IO_STATUS_t BUS_IO APP status.
*/

BUS_IO_STATUS_t BUS_IO_Init(BUS_IO_t *const handle_ptr)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  XMC_ASSERT("BUS_IO_Init: handle_ptr null pointer", handle_ptr != NULL);

  if ((bool)false == handle_ptr->initialized)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	7c5b      	ldrb	r3, [r3, #17]
 8005bd8:	f083 0301 	eor.w	r3, r3, #1
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d020      	beq.n	8005c24 <BUS_IO_Init+0x58>
  {
    /* Iterate the list of pins initializing the pin according to the gpio_config */
    for (i = 0U; i < handle_ptr->number_of_pins; i++)
 8005be2:	2300      	movs	r3, #0
 8005be4:	73fb      	strb	r3, [r7, #15]
 8005be6:	e015      	b.n	8005c14 <BUS_IO_Init+0x48>
    {
      /* Initializes input / output characteristics */
      XMC_GPIO_Init(handle_ptr->pin_array[i].gpio_port, handle_ptr->pin_array[i].gpio_pin, &handle_ptr->gpio_config);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	7bfb      	ldrb	r3, [r7, #15]
 8005bee:	00db      	lsls	r3, r3, #3
 8005bf0:	4413      	add	r3, r2
 8005bf2:	6819      	ldr	r1, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	7bfb      	ldrb	r3, [r7, #15]
 8005bfa:	00db      	lsls	r3, r3, #3
 8005bfc:	4413      	add	r3, r2
 8005bfe:	791a      	ldrb	r2, [r3, #4]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	3304      	adds	r3, #4
 8005c04:	4608      	mov	r0, r1
 8005c06:	4611      	mov	r1, r2
 8005c08:	461a      	mov	r2, r3
 8005c0a:	f7fa fc15 	bl	8000438 <XMC_GPIO_Init>
  XMC_ASSERT("BUS_IO_Init: handle_ptr null pointer", handle_ptr != NULL);

  if ((bool)false == handle_ptr->initialized)
  {
    /* Iterate the list of pins initializing the pin according to the gpio_config */
    for (i = 0U; i < handle_ptr->number_of_pins; i++)
 8005c0e:	7bfb      	ldrb	r3, [r7, #15]
 8005c10:	3301      	adds	r3, #1
 8005c12:	73fb      	strb	r3, [r7, #15]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	7c1b      	ldrb	r3, [r3, #16]
 8005c18:	7bfa      	ldrb	r2, [r7, #15]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d3e4      	bcc.n	8005be8 <BUS_IO_Init+0x1c>
    {
      /* Initializes input / output characteristics */
      XMC_GPIO_Init(handle_ptr->pin_array[i].gpio_port, handle_ptr->pin_array[i].gpio_pin, &handle_ptr->gpio_config);
    }
    handle_ptr->initialized = (bool)true;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2201      	movs	r2, #1
 8005c22:	745a      	strb	r2, [r3, #17]
  }
  return (BUS_IO_STATUS_OK);
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3710      	adds	r7, #16
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop

08005c30 <BUS_IO_Read>:
  }
}

/* Function to read the bus pins state */
uint16_t BUS_IO_Read(BUS_IO_t *const handle_ptr)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint16_t count = 0U;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	81bb      	strh	r3, [r7, #12]

  XMC_ASSERT("BUS_IO_Read: handle_ptr null pointer", handle_ptr != NULL);

  /* Iterate the list of pins reading the pin state and packing the result according the pin position in the list, from LSB to MSB */
  for (i = 0U; i < handle_ptr->number_of_pins; i++)
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	73fb      	strb	r3, [r7, #15]
 8005c40:	e01a      	b.n	8005c78 <BUS_IO_Read+0x48>
  {
    /* Reading a bus pin's state */
    count |= (uint16_t)(XMC_GPIO_GetInput(handle_ptr->pin_array[i].gpio_port, handle_ptr->pin_array[i].gpio_pin) << i);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	7bfb      	ldrb	r3, [r7, #15]
 8005c48:	00db      	lsls	r3, r3, #3
 8005c4a:	4413      	add	r3, r2
 8005c4c:	6819      	ldr	r1, [r3, #0]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	7bfb      	ldrb	r3, [r7, #15]
 8005c54:	00db      	lsls	r3, r3, #3
 8005c56:	4413      	add	r3, r2
 8005c58:	791b      	ldrb	r3, [r3, #4]
 8005c5a:	4608      	mov	r0, r1
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	f7ff ffa1 	bl	8005ba4 <XMC_GPIO_GetInput>
 8005c62:	4602      	mov	r2, r0
 8005c64:	7bfb      	ldrb	r3, [r7, #15]
 8005c66:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	89bb      	ldrh	r3, [r7, #12]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	81bb      	strh	r3, [r7, #12]
  uint16_t count = 0U;

  XMC_ASSERT("BUS_IO_Read: handle_ptr null pointer", handle_ptr != NULL);

  /* Iterate the list of pins reading the pin state and packing the result according the pin position in the list, from LSB to MSB */
  for (i = 0U; i < handle_ptr->number_of_pins; i++)
 8005c72:	7bfb      	ldrb	r3, [r7, #15]
 8005c74:	3301      	adds	r3, #1
 8005c76:	73fb      	strb	r3, [r7, #15]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	7c1b      	ldrb	r3, [r3, #16]
 8005c7c:	7bfa      	ldrb	r2, [r7, #15]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d3df      	bcc.n	8005c42 <BUS_IO_Read+0x12>
  {
    /* Reading a bus pin's state */
    count |= (uint16_t)(XMC_GPIO_GetInput(handle_ptr->pin_array[i].gpio_port, handle_ptr->pin_array[i].gpio_pin) << i);
  }
  return(count);
 8005c82:	89bb      	ldrh	r3, [r7, #12]
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3710      	adds	r7, #16
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <BUS_IO_Write>:

/* Function to set the pins bus state */
void BUS_IO_Write(BUS_IO_t *const handle_ptr, const uint16_t data)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	460b      	mov	r3, r1
 8005c96:	807b      	strh	r3, [r7, #2]
  uint8_t i;
  const BUS_IO_PORT_PIN_t *bus_io_port_pin;

  XMC_ASSERT("BUS_IO_Write: handle_ptr null pointer", handle_ptr != NULL);

  bus_io_port_pin = handle_ptr->pin_array;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	60bb      	str	r3, [r7, #8]
  /* Iterate the list of pins setting the pin state according the pin position in the list, , from LSB to MSB */
  for (i = 0U; i < handle_ptr->number_of_pins; i++)
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	73fb      	strb	r3, [r7, #15]
 8005ca2:	e023      	b.n	8005cec <BUS_IO_Write+0x60>
  {
    if (data & (uint16_t)((uint16_t)1 << i))
 8005ca4:	7bfb      	ldrb	r3, [r7, #15]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	887b      	ldrh	r3, [r7, #2]
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d009      	beq.n	8005ccc <BUS_IO_Write+0x40>
    {
      XMC_GPIO_SetOutputLevel(bus_io_port_pin->gpio_port, bus_io_port_pin->gpio_pin, XMC_GPIO_OUTPUT_LEVEL_HIGH);
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	791b      	ldrb	r3, [r3, #4]
 8005cc0:	4610      	mov	r0, r2
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f7ff ff5b 	bl	8005b80 <XMC_GPIO_SetOutputLevel>
 8005cca:	e009      	b.n	8005ce0 <BUS_IO_Write+0x54>
    }
    else
    {
      XMC_GPIO_SetOutputLevel(bus_io_port_pin->gpio_port, bus_io_port_pin->gpio_pin, XMC_GPIO_OUTPUT_LEVEL_LOW);
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	791b      	ldrb	r3, [r3, #4]
 8005cd4:	4610      	mov	r0, r2
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005cdc:	f7ff ff50 	bl	8005b80 <XMC_GPIO_SetOutputLevel>
    }
   bus_io_port_pin++;
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	3308      	adds	r3, #8
 8005ce4:	60bb      	str	r3, [r7, #8]

  XMC_ASSERT("BUS_IO_Write: handle_ptr null pointer", handle_ptr != NULL);

  bus_io_port_pin = handle_ptr->pin_array;
  /* Iterate the list of pins setting the pin state according the pin position in the list, , from LSB to MSB */
  for (i = 0U; i < handle_ptr->number_of_pins; i++)
 8005ce6:	7bfb      	ldrb	r3, [r7, #15]
 8005ce8:	3301      	adds	r3, #1
 8005cea:	73fb      	strb	r3, [r7, #15]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	7c1b      	ldrb	r3, [r3, #16]
 8005cf0:	7bfa      	ldrb	r2, [r7, #15]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d3d6      	bcc.n	8005ca4 <BUS_IO_Write+0x18>
    {
      XMC_GPIO_SetOutputLevel(bus_io_port_pin->gpio_port, bus_io_port_pin->gpio_pin, XMC_GPIO_OUTPUT_LEVEL_LOW);
    }
   bus_io_port_pin++;
  }
}
 8005cf6:	3710      	adds	r7, #16
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 8005d02:	2300      	movs	r3, #0
 8005d04:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 8005d06:	4845      	ldr	r0, [pc, #276]	; (8005e1c <DAVE_Init+0x120>)
 8005d08:	f7ff fefa 	bl	8005b00 <CLOCK_XMC4_Init>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 8005d10:	79fb      	ldrb	r3, [r7, #7]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d104      	bne.n	8005d20 <DAVE_Init+0x24>
  {
	 /**  Initialization of BUS_IO APP instance DIRECTION_BUS_IO */
	 init_status = (DAVE_STATUS_t)BUS_IO_Init(&DIRECTION_BUS_IO); 
 8005d16:	4842      	ldr	r0, [pc, #264]	; (8005e20 <DAVE_Init+0x124>)
 8005d18:	f7ff ff58 	bl	8005bcc <BUS_IO_Init>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8005d20:	79fb      	ldrb	r3, [r7, #7]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d104      	bne.n	8005d30 <DAVE_Init+0x34>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_0 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0); 
 8005d26:	483f      	ldr	r0, [pc, #252]	; (8005e24 <DAVE_Init+0x128>)
 8005d28:	f7ff fe56 	bl	80059d8 <DIGITAL_IO_Init>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8005d30:	79fb      	ldrb	r3, [r7, #7]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d104      	bne.n	8005d40 <DAVE_Init+0x44>
  {
	 /**  Initialization of DIGITAL_IO APP instance MOTOR_HIGH */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&MOTOR_HIGH); 
 8005d36:	483c      	ldr	r0, [pc, #240]	; (8005e28 <DAVE_Init+0x12c>)
 8005d38:	f7ff fe4e 	bl	80059d8 <DIGITAL_IO_Init>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8005d40:	79fb      	ldrb	r3, [r7, #7]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d104      	bne.n	8005d50 <DAVE_Init+0x54>
  {
	 /**  Initialization of DIGITAL_IO APP instance MOTOR_LOW */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&MOTOR_LOW); 
 8005d46:	4839      	ldr	r0, [pc, #228]	; (8005e2c <DAVE_Init+0x130>)
 8005d48:	f7ff fe46 	bl	80059d8 <DIGITAL_IO_Init>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8005d50:	79fb      	ldrb	r3, [r7, #7]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d104      	bne.n	8005d60 <DAVE_Init+0x64>
  {
	 /**  Initialization of BUS_IO APP instance CLAMP_BUS_IO */
	 init_status = (DAVE_STATUS_t)BUS_IO_Init(&CLAMP_BUS_IO); 
 8005d56:	4836      	ldr	r0, [pc, #216]	; (8005e30 <DAVE_Init+0x134>)
 8005d58:	f7ff ff38 	bl	8005bcc <BUS_IO_Init>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8005d60:	79fb      	ldrb	r3, [r7, #7]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d104      	bne.n	8005d70 <DAVE_Init+0x74>
  {
	 /**  Initialization of BUS_IO APP instance LED_BUS_IO */
	 init_status = (DAVE_STATUS_t)BUS_IO_Init(&LED_BUS_IO); 
 8005d66:	4833      	ldr	r0, [pc, #204]	; (8005e34 <DAVE_Init+0x138>)
 8005d68:	f7ff ff30 	bl	8005bcc <BUS_IO_Init>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8005d70:	79fb      	ldrb	r3, [r7, #7]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d104      	bne.n	8005d80 <DAVE_Init+0x84>
  {
	 /**  Initialization of PWM APP instance PWM_CLAMP */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_CLAMP); 
 8005d76:	4830      	ldr	r0, [pc, #192]	; (8005e38 <DAVE_Init+0x13c>)
 8005d78:	f7fc ff6a 	bl	8002c50 <PWM_Init>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8005d80:	79fb      	ldrb	r3, [r7, #7]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d104      	bne.n	8005d90 <DAVE_Init+0x94>
  {
	 /**  Initialization of PIN_INTERRUPT APP instance CLAMP_INTERRUPT */
	 init_status = (DAVE_STATUS_t)PIN_INTERRUPT_Init(&CLAMP_INTERRUPT); 
 8005d86:	482d      	ldr	r0, [pc, #180]	; (8005e3c <DAVE_Init+0x140>)
 8005d88:	f7fd f860 	bl	8002e4c <PIN_INTERRUPT_Init>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8005d90:	79fb      	ldrb	r3, [r7, #7]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d104      	bne.n	8005da0 <DAVE_Init+0xa4>
  {
	 /**  Initialization of PWM APP instance PWM_LIFT */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_LIFT); 
 8005d96:	482a      	ldr	r0, [pc, #168]	; (8005e40 <DAVE_Init+0x144>)
 8005d98:	f7fc ff5a 	bl	8002c50 <PWM_Init>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8005da0:	79fb      	ldrb	r3, [r7, #7]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d104      	bne.n	8005db0 <DAVE_Init+0xb4>
  {
	 /**  Initialization of PIN_INTERRUPT APP instance ROTATE_INTERRUPT */
	 init_status = (DAVE_STATUS_t)PIN_INTERRUPT_Init(&ROTATE_INTERRUPT); 
 8005da6:	4827      	ldr	r0, [pc, #156]	; (8005e44 <DAVE_Init+0x148>)
 8005da8:	f7fd f850 	bl	8002e4c <PIN_INTERRUPT_Init>
 8005dac:	4603      	mov	r3, r0
 8005dae:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8005db0:	79fb      	ldrb	r3, [r7, #7]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d104      	bne.n	8005dc0 <DAVE_Init+0xc4>
  {
	 /**  Initialization of PIN_INTERRUPT APP instance DIRECTION_INTERRUPT */
	 init_status = (DAVE_STATUS_t)PIN_INTERRUPT_Init(&DIRECTION_INTERRUPT); 
 8005db6:	4824      	ldr	r0, [pc, #144]	; (8005e48 <DAVE_Init+0x14c>)
 8005db8:	f7fd f848 	bl	8002e4c <PIN_INTERRUPT_Init>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8005dc0:	79fb      	ldrb	r3, [r7, #7]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d104      	bne.n	8005dd0 <DAVE_Init+0xd4>
  {
	 /**  Initialization of DIGITAL_IO APP instance TLE94112_ENABLE */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&TLE94112_ENABLE); 
 8005dc6:	4821      	ldr	r0, [pc, #132]	; (8005e4c <DAVE_Init+0x150>)
 8005dc8:	f7ff fe06 	bl	80059d8 <DIGITAL_IO_Init>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8005dd0:	79fb      	ldrb	r3, [r7, #7]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d104      	bne.n	8005de0 <DAVE_Init+0xe4>
  {
	 /**  Initialization of DIGITAL_IO APP instance TLE94112_CS */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&TLE94112_CS); 
 8005dd6:	481e      	ldr	r0, [pc, #120]	; (8005e50 <DAVE_Init+0x154>)
 8005dd8:	f7ff fdfe 	bl	80059d8 <DIGITAL_IO_Init>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8005de0:	79fb      	ldrb	r3, [r7, #7]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d104      	bne.n	8005df0 <DAVE_Init+0xf4>
  {
	 /**  Initialization of SPI_MASTER APP instance SPI_MASTER_0 */
	 init_status = (DAVE_STATUS_t)SPI_MASTER_Init(&SPI_MASTER_0); 
 8005de6:	481b      	ldr	r0, [pc, #108]	; (8005e54 <DAVE_Init+0x158>)
 8005de8:	f7fb fef6 	bl	8001bd8 <SPI_MASTER_Init>
 8005dec:	4603      	mov	r3, r0
 8005dee:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8005df0:	79fb      	ldrb	r3, [r7, #7]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d104      	bne.n	8005e00 <DAVE_Init+0x104>
  {
	 /**  Initialization of PWM APP instance PWM_ROTATE */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_ROTATE); 
 8005df6:	4818      	ldr	r0, [pc, #96]	; (8005e58 <DAVE_Init+0x15c>)
 8005df8:	f7fc ff2a 	bl	8002c50 <PWM_Init>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8005e00:	79fb      	ldrb	r3, [r7, #7]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d104      	bne.n	8005e10 <DAVE_Init+0x114>
  {
	 /**  Initialization of PIN_INTERRUPT APP instance HOLD_INTERRUPT */
	 init_status = (DAVE_STATUS_t)PIN_INTERRUPT_Init(&HOLD_INTERRUPT); 
 8005e06:	4815      	ldr	r0, [pc, #84]	; (8005e5c <DAVE_Init+0x160>)
 8005e08:	f7fd f820 	bl	8002e4c <PIN_INTERRUPT_Init>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 8005e10:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 8005e12:	4618      	mov	r0, r3
 8005e14:	3708      	adds	r7, #8
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	1fffcb20 	.word	0x1fffcb20
 8005e20:	1fffc920 	.word	0x1fffc920
 8005e24:	08006f04 	.word	0x08006f04
 8005e28:	08006f18 	.word	0x08006f18
 8005e2c:	08006f2c 	.word	0x08006f2c
 8005e30:	1fffc934 	.word	0x1fffc934
 8005e34:	1fffc948 	.word	0x1fffc948
 8005e38:	1fffc850 	.word	0x1fffc850
 8005e3c:	08006e4c 	.word	0x08006e4c
 8005e40:	1fffc884 	.word	0x1fffc884
 8005e44:	08006e70 	.word	0x08006e70
 8005e48:	08006e94 	.word	0x08006e94
 8005e4c:	08006f40 	.word	0x08006f40
 8005e50:	08006f54 	.word	0x08006f54
 8005e54:	1fffc844 	.word	0x1fffc844
 8005e58:	1fffc8b8 	.word	0x1fffc8b8
 8005e5c:	08006eb8 	.word	0x08006eb8

08005e60 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	460b      	mov	r3, r1
 8005e6a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8005e6c:	78fb      	ldrb	r3, [r7, #3]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	409a      	lsls	r2, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	605a      	str	r2, [r3, #4]
}
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	460b      	mov	r3, r1
 8005e8a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 8005e8c:	78fb      	ldrb	r3, [r7, #3]
 8005e8e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005e92:	409a      	lsls	r2, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	605a      	str	r2, [r3, #4]
}
 8005e98:	370c      	adds	r7, #12
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop

08005ea4 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	460b      	mov	r3, r1
 8005eae:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005eb4:	78fb      	ldrb	r3, [r7, #3]
 8005eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8005eba:	f003 0301 	and.w	r3, r3, #1
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	370c      	adds	r7, #12
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop

08005ecc <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	7c1b      	ldrb	r3, [r3, #16]
 8005edc:	4610      	mov	r0, r2
 8005ede:	4619      	mov	r1, r3
 8005ee0:	f7ff ffbe 	bl	8005e60 <XMC_GPIO_SetOutputHigh>
}
 8005ee4:	3708      	adds	r7, #8
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop

08005eec <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	7c1b      	ldrb	r3, [r3, #16]
 8005efc:	4610      	mov	r0, r2
 8005efe:	4619      	mov	r1, r3
 8005f00:	f7ff ffbe 	bl	8005e80 <XMC_GPIO_SetOutputLow>
}
 8005f04:	3708      	adds	r7, #8
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop

08005f0c <PIN_INTERRUPT_GetPinValue>:
*   return (1);
* }
*  @endcode
*/
__STATIC_INLINE uint32_t PIN_INTERRUPT_GetPinValue(const PIN_INTERRUPT_t *const handle)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PIN_INTERRUPT_GetPinValue: Handler null pointer", handle != NULL);
  return (XMC_GPIO_GetInput(handle->port, handle->pin));
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685a      	ldr	r2, [r3, #4]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005f1e:	4610      	mov	r0, r2
 8005f20:	4619      	mov	r1, r3
 8005f22:	f7ff ffbf 	bl	8005ea4 <XMC_GPIO_GetInput>
 8005f26:	4603      	mov	r3, r0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3708      	adds	r7, #8
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <XMC_SPI_CH_SetBitOrderLsbFirst>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_SetBitOrderMsbFirst()
 */
__STATIC_INLINE void XMC_SPI_CH_SetBitOrderLsbFirst(XMC_USIC_CH_t *const channel)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  channel->SCTR &= (uint32_t)~USIC_CH_SCTR_SDIR_Msk;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f3c:	f023 0201 	bic.w	r2, r3, #1
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	635a      	str	r2, [r3, #52]	; 0x34
}
 8005f44:	370c      	adds	r7, #12
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop

08005f50 <FORWARD_Task>:
SemaphoreHandle_t ROTATE_interruptSemaphore;
SemaphoreHandle_t DIRECTION_interruptSemaphore;
SemaphoreHandle_t CLAMP_interruptSemaphore;


void FORWARD_Task(void *p){
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]

	while(1){

		if (xSemaphoreTake(FORWARD_interruptSemaphore, portMAX_DELAY) == pdPASS){
 8005f58:	4b33      	ldr	r3, [pc, #204]	; (8006028 <FORWARD_Task+0xd8>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f04f 31ff 	mov.w	r1, #4294967295
 8005f62:	f7fd ff3d 	bl	8003de0 <xQueueSemaphoreTake>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d15c      	bne.n	8006026 <FORWARD_Task+0xd6>

			pin_status = PIN_INTERRUPT_GetPinValue(&DIRECTION_INTERRUPT);
 8005f6c:	482f      	ldr	r0, [pc, #188]	; (800602c <FORWARD_Task+0xdc>)
 8005f6e:	f7ff ffcd 	bl	8005f0c <PIN_INTERRUPT_GetPinValue>
 8005f72:	4602      	mov	r2, r0
 8005f74:	4b2e      	ldr	r3, [pc, #184]	; (8006030 <FORWARD_Task+0xe0>)
 8005f76:	601a      	str	r2, [r3, #0]
			if(pin_status==1){
 8005f78:	4b2d      	ldr	r3, [pc, #180]	; (8006030 <FORWARD_Task+0xe0>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d129      	bne.n	8005fd4 <FORWARD_Task+0x84>
				//FORWARD
				TLE94112EL_SetHBRegdata(&TLE94112EL_0, 0x01, 0x99);
 8005f80:	482c      	ldr	r0, [pc, #176]	; (8006034 <FORWARD_Task+0xe4>)
 8005f82:	2101      	movs	r1, #1
 8005f84:	2299      	movs	r2, #153	; 0x99
 8005f86:	f7fa f985 	bl	8000294 <TLE94112EL_SetHBRegdata>
				  vTaskDelay( xDelay );
 8005f8a:	2314      	movs	r3, #20
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f7fe fb75 	bl	800467c <vTaskDelay>

					TLE94112EL_SetHBRegdata(&TLE94112EL_0, 0x02, 0x99);
 8005f92:	4828      	ldr	r0, [pc, #160]	; (8006034 <FORWARD_Task+0xe4>)
 8005f94:	2102      	movs	r1, #2
 8005f96:	2299      	movs	r2, #153	; 0x99
 8005f98:	f7fa f97c 	bl	8000294 <TLE94112EL_SetHBRegdata>
					  vTaskDelay( xDelay );
 8005f9c:	2314      	movs	r3, #20
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7fe fb6c 	bl	800467c <vTaskDelay>

					  TLE94112EL_SetHBRegdata(&TLE94112EL_0, 0x03, 0x99);
 8005fa4:	4823      	ldr	r0, [pc, #140]	; (8006034 <FORWARD_Task+0xe4>)
 8005fa6:	2103      	movs	r1, #3
 8005fa8:	2299      	movs	r2, #153	; 0x99
 8005faa:	f7fa f973 	bl	8000294 <TLE94112EL_SetHBRegdata>
				  vTaskDelay( xDelay );
 8005fae:	2314      	movs	r3, #20
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f7fe fb63 	bl	800467c <vTaskDelay>

					 DIGITAL_IO_SetOutputHigh(&MOTOR_HIGH);
 8005fb6:	4820      	ldr	r0, [pc, #128]	; (8006038 <FORWARD_Task+0xe8>)
 8005fb8:	f7ff ff88 	bl	8005ecc <DIGITAL_IO_SetOutputHigh>
					  vTaskDelay( xDelay );
 8005fbc:	2314      	movs	r3, #20
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f7fe fb5c 	bl	800467c <vTaskDelay>

					 DIGITAL_IO_SetOutputLow(&MOTOR_LOW);
 8005fc4:	481d      	ldr	r0, [pc, #116]	; (800603c <FORWARD_Task+0xec>)
 8005fc6:	f7ff ff91 	bl	8005eec <DIGITAL_IO_SetOutputLow>
					  vTaskDelay( xDelay );
 8005fca:	2314      	movs	r3, #20
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f7fe fb55 	bl	800467c <vTaskDelay>
 8005fd2:	e028      	b.n	8006026 <FORWARD_Task+0xd6>

			}

			else{
				//stop
				TLE94112EL_SetHBRegdata(&TLE94112EL_0, 0x01, 0x00);
 8005fd4:	4817      	ldr	r0, [pc, #92]	; (8006034 <FORWARD_Task+0xe4>)
 8005fd6:	2101      	movs	r1, #1
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f7fa f95b 	bl	8000294 <TLE94112EL_SetHBRegdata>

				  vTaskDelay( xDelay );
 8005fde:	2314      	movs	r3, #20
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f7fe fb4b 	bl	800467c <vTaskDelay>

					TLE94112EL_SetHBRegdata(&TLE94112EL_0, 0x02, 0x00);
 8005fe6:	4813      	ldr	r0, [pc, #76]	; (8006034 <FORWARD_Task+0xe4>)
 8005fe8:	2102      	movs	r1, #2
 8005fea:	2200      	movs	r2, #0
 8005fec:	f7fa f952 	bl	8000294 <TLE94112EL_SetHBRegdata>
					  vTaskDelay( xDelay );
 8005ff0:	2314      	movs	r3, #20
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f7fe fb42 	bl	800467c <vTaskDelay>

				TLE94112EL_SetHBRegdata(&TLE94112EL_0, 0x03, 0x00);
 8005ff8:	480e      	ldr	r0, [pc, #56]	; (8006034 <FORWARD_Task+0xe4>)
 8005ffa:	2103      	movs	r1, #3
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f7fa f949 	bl	8000294 <TLE94112EL_SetHBRegdata>
				  vTaskDelay( xDelay );
 8006002:	2314      	movs	r3, #20
 8006004:	4618      	mov	r0, r3
 8006006:	f7fe fb39 	bl	800467c <vTaskDelay>

					 DIGITAL_IO_SetOutputLow(&MOTOR_HIGH);
 800600a:	480b      	ldr	r0, [pc, #44]	; (8006038 <FORWARD_Task+0xe8>)
 800600c:	f7ff ff6e 	bl	8005eec <DIGITAL_IO_SetOutputLow>
					  vTaskDelay( xDelay );
 8006010:	2314      	movs	r3, #20
 8006012:	4618      	mov	r0, r3
 8006014:	f7fe fb32 	bl	800467c <vTaskDelay>

					 DIGITAL_IO_SetOutputLow(&MOTOR_LOW);
 8006018:	4808      	ldr	r0, [pc, #32]	; (800603c <FORWARD_Task+0xec>)
 800601a:	f7ff ff67 	bl	8005eec <DIGITAL_IO_SetOutputLow>
					  vTaskDelay( xDelay );
 800601e:	2314      	movs	r3, #20
 8006020:	4618      	mov	r0, r3
 8006022:	f7fe fb2b 	bl	800467c <vTaskDelay>
			}
		}
	}
 8006026:	e797      	b.n	8005f58 <FORWARD_Task+0x8>
 8006028:	1fffcbd0 	.word	0x1fffcbd0
 800602c:	08006e94 	.word	0x08006e94
 8006030:	1fffcbc0 	.word	0x1fffcbc0
 8006034:	08006fbc 	.word	0x08006fbc
 8006038:	08006f18 	.word	0x08006f18
 800603c:	08006f2c 	.word	0x08006f2c

08006040 <BACKWARD_Task>:
}

void BACKWARD_Task(void *p){
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]

	while(1){

		if (xSemaphoreTake(BACKWARD_interruptSemaphore, portMAX_DELAY) == pdPASS){
 8006048:	4b33      	ldr	r3, [pc, #204]	; (8006118 <BACKWARD_Task+0xd8>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4618      	mov	r0, r3
 800604e:	f04f 31ff 	mov.w	r1, #4294967295
 8006052:	f7fd fec5 	bl	8003de0 <xQueueSemaphoreTake>
 8006056:	4603      	mov	r3, r0
 8006058:	2b01      	cmp	r3, #1
 800605a:	d15c      	bne.n	8006116 <BACKWARD_Task+0xd6>

			pin_status = PIN_INTERRUPT_GetPinValue(&DIRECTION_INTERRUPT);
 800605c:	482f      	ldr	r0, [pc, #188]	; (800611c <BACKWARD_Task+0xdc>)
 800605e:	f7ff ff55 	bl	8005f0c <PIN_INTERRUPT_GetPinValue>
 8006062:	4602      	mov	r2, r0
 8006064:	4b2e      	ldr	r3, [pc, #184]	; (8006120 <BACKWARD_Task+0xe0>)
 8006066:	601a      	str	r2, [r3, #0]
			if(pin_status==1){
 8006068:	4b2d      	ldr	r3, [pc, #180]	; (8006120 <BACKWARD_Task+0xe0>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2b01      	cmp	r3, #1
 800606e:	d129      	bne.n	80060c4 <BACKWARD_Task+0x84>
				//BACKWARD
				TLE94112EL_SetHBRegdata(&TLE94112EL_0, 0x01, 0x66);
 8006070:	482c      	ldr	r0, [pc, #176]	; (8006124 <BACKWARD_Task+0xe4>)
 8006072:	2101      	movs	r1, #1
 8006074:	2266      	movs	r2, #102	; 0x66
 8006076:	f7fa f90d 	bl	8000294 <TLE94112EL_SetHBRegdata>

				  vTaskDelay( xDelay );
 800607a:	2314      	movs	r3, #20
 800607c:	4618      	mov	r0, r3
 800607e:	f7fe fafd 	bl	800467c <vTaskDelay>
					TLE94112EL_SetHBRegdata(&TLE94112EL_0, 0x02, 0x66);
 8006082:	4828      	ldr	r0, [pc, #160]	; (8006124 <BACKWARD_Task+0xe4>)
 8006084:	2102      	movs	r1, #2
 8006086:	2266      	movs	r2, #102	; 0x66
 8006088:	f7fa f904 	bl	8000294 <TLE94112EL_SetHBRegdata>
					  vTaskDelay( xDelay );
 800608c:	2314      	movs	r3, #20
 800608e:	4618      	mov	r0, r3
 8006090:	f7fe faf4 	bl	800467c <vTaskDelay>
				TLE94112EL_SetHBRegdata(&TLE94112EL_0, 0x03, 0x66);
 8006094:	4823      	ldr	r0, [pc, #140]	; (8006124 <BACKWARD_Task+0xe4>)
 8006096:	2103      	movs	r1, #3
 8006098:	2266      	movs	r2, #102	; 0x66
 800609a:	f7fa f8fb 	bl	8000294 <TLE94112EL_SetHBRegdata>
				  vTaskDelay( xDelay );
 800609e:	2314      	movs	r3, #20
 80060a0:	4618      	mov	r0, r3
 80060a2:	f7fe faeb 	bl	800467c <vTaskDelay>

					 DIGITAL_IO_SetOutputLow(&MOTOR_HIGH);
 80060a6:	4820      	ldr	r0, [pc, #128]	; (8006128 <BACKWARD_Task+0xe8>)
 80060a8:	f7ff ff20 	bl	8005eec <DIGITAL_IO_SetOutputLow>
					  vTaskDelay( xDelay );
 80060ac:	2314      	movs	r3, #20
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7fe fae4 	bl	800467c <vTaskDelay>

					 DIGITAL_IO_SetOutputHigh(&MOTOR_LOW);
 80060b4:	481d      	ldr	r0, [pc, #116]	; (800612c <BACKWARD_Task+0xec>)
 80060b6:	f7ff ff09 	bl	8005ecc <DIGITAL_IO_SetOutputHigh>
					  vTaskDelay( xDelay );
 80060ba:	2314      	movs	r3, #20
 80060bc:	4618      	mov	r0, r3
 80060be:	f7fe fadd 	bl	800467c <vTaskDelay>
 80060c2:	e028      	b.n	8006116 <BACKWARD_Task+0xd6>
			}

			else{
				//stop
				TLE94112EL_SetHBRegdata(&TLE94112EL_0, 0x01, 0x00);
 80060c4:	4817      	ldr	r0, [pc, #92]	; (8006124 <BACKWARD_Task+0xe4>)
 80060c6:	2101      	movs	r1, #1
 80060c8:	2200      	movs	r2, #0
 80060ca:	f7fa f8e3 	bl	8000294 <TLE94112EL_SetHBRegdata>

				  vTaskDelay( xDelay );
 80060ce:	2314      	movs	r3, #20
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7fe fad3 	bl	800467c <vTaskDelay>
					TLE94112EL_SetHBRegdata(&TLE94112EL_0, 0x02, 0x00);
 80060d6:	4813      	ldr	r0, [pc, #76]	; (8006124 <BACKWARD_Task+0xe4>)
 80060d8:	2102      	movs	r1, #2
 80060da:	2200      	movs	r2, #0
 80060dc:	f7fa f8da 	bl	8000294 <TLE94112EL_SetHBRegdata>
					  vTaskDelay( xDelay );
 80060e0:	2314      	movs	r3, #20
 80060e2:	4618      	mov	r0, r3
 80060e4:	f7fe faca 	bl	800467c <vTaskDelay>
				TLE94112EL_SetHBRegdata(&TLE94112EL_0, 0x03, 0x00);
 80060e8:	480e      	ldr	r0, [pc, #56]	; (8006124 <BACKWARD_Task+0xe4>)
 80060ea:	2103      	movs	r1, #3
 80060ec:	2200      	movs	r2, #0
 80060ee:	f7fa f8d1 	bl	8000294 <TLE94112EL_SetHBRegdata>
				  vTaskDelay( xDelay );
 80060f2:	2314      	movs	r3, #20
 80060f4:	4618      	mov	r0, r3
 80060f6:	f7fe fac1 	bl	800467c <vTaskDelay>

					 DIGITAL_IO_SetOutputLow(&MOTOR_HIGH);
 80060fa:	480b      	ldr	r0, [pc, #44]	; (8006128 <BACKWARD_Task+0xe8>)
 80060fc:	f7ff fef6 	bl	8005eec <DIGITAL_IO_SetOutputLow>
					  vTaskDelay( xDelay );
 8006100:	2314      	movs	r3, #20
 8006102:	4618      	mov	r0, r3
 8006104:	f7fe faba 	bl	800467c <vTaskDelay>

					 DIGITAL_IO_SetOutputLow(&MOTOR_LOW);
 8006108:	4808      	ldr	r0, [pc, #32]	; (800612c <BACKWARD_Task+0xec>)
 800610a:	f7ff feef 	bl	8005eec <DIGITAL_IO_SetOutputLow>
					  vTaskDelay( xDelay );
 800610e:	2314      	movs	r3, #20
 8006110:	4618      	mov	r0, r3
 8006112:	f7fe fab3 	bl	800467c <vTaskDelay>

			}
		}
	}
 8006116:	e797      	b.n	8006048 <BACKWARD_Task+0x8>
 8006118:	1fffcb9c 	.word	0x1fffcb9c
 800611c:	08006e94 	.word	0x08006e94
 8006120:	1fffcbc0 	.word	0x1fffcbc0
 8006124:	08006fbc 	.word	0x08006fbc
 8006128:	08006f18 	.word	0x08006f18
 800612c:	08006f2c 	.word	0x08006f2c

08006130 <LEFT_Task>:
}

void LEFT_Task(void *p){
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]

	while(1){

		if (xSemaphoreTake(LEFT_interruptSemaphore, portMAX_DELAY) == pdPASS){
 8006138:	4b33      	ldr	r3, [pc, #204]	; (8006208 <LEFT_Task+0xd8>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4618      	mov	r0, r3
 800613e:	f04f 31ff 	mov.w	r1, #4294967295
 8006142:	f7fd fe4d 	bl	8003de0 <xQueueSemaphoreTake>
 8006146:	4603      	mov	r3, r0
 8006148:	2b01      	cmp	r3, #1
 800614a:	d15c      	bne.n	8006206 <LEFT_Task+0xd6>

			pin_status = PIN_INTERRUPT_GetPinValue(&DIRECTION_INTERRUPT);
 800614c:	482f      	ldr	r0, [pc, #188]	; (800620c <LEFT_Task+0xdc>)
 800614e:	f7ff fedd 	bl	8005f0c <PIN_INTERRUPT_GetPinValue>
 8006152:	4602      	mov	r2, r0
 8006154:	4b2e      	ldr	r3, [pc, #184]	; (8006210 <LEFT_Task+0xe0>)
 8006156:	601a      	str	r2, [r3, #0]
			if(pin_status==1){
 8006158:	4b2d      	ldr	r3, [pc, #180]	; (8006210 <LEFT_Task+0xe0>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2b01      	cmp	r3, #1
 800615e:	d129      	bne.n	80061b4 <LEFT_Task+0x84>
				//LEFT
				TLE94112EL_SetHBRegdata(&TLE94112EL_0, 0x01, 0x66);
 8006160:	482c      	ldr	r0, [pc, #176]	; (8006214 <LEFT_Task+0xe4>)
 8006162:	2101      	movs	r1, #1
 8006164:	2266      	movs	r2, #102	; 0x66
 8006166:	f7fa f895 	bl	8000294 <TLE94112EL_SetHBRegdata>

				  vTaskDelay( xDelay );
 800616a:	2314      	movs	r3, #20
 800616c:	4618      	mov	r0, r3
 800616e:	f7fe fa85 	bl	800467c <vTaskDelay>
					TLE94112EL_SetHBRegdata(&TLE94112EL_0, 0x02, 0x99);
 8006172:	4828      	ldr	r0, [pc, #160]	; (8006214 <LEFT_Task+0xe4>)
 8006174:	2102      	movs	r1, #2
 8006176:	2299      	movs	r2, #153	; 0x99
 8006178:	f7fa f88c 	bl	8000294 <TLE94112EL_SetHBRegdata>
					  vTaskDelay( xDelay );
 800617c:	2314      	movs	r3, #20
 800617e:	4618      	mov	r0, r3
 8006180:	f7fe fa7c 	bl	800467c <vTaskDelay>
				TLE94112EL_SetHBRegdata(&TLE94112EL_0, 0x03, 0x99);
 8006184:	4823      	ldr	r0, [pc, #140]	; (8006214 <LEFT_Task+0xe4>)
 8006186:	2103      	movs	r1, #3
 8006188:	2299      	movs	r2, #153	; 0x99
 800618a:	f7fa f883 	bl	8000294 <TLE94112EL_SetHBRegdata>
				  vTaskDelay( xDelay );
 800618e:	2314      	movs	r3, #20
 8006190:	4618      	mov	r0, r3
 8006192:	f7fe fa73 	bl	800467c <vTaskDelay>
					 DIGITAL_IO_SetOutputLow(&MOTOR_HIGH);
 8006196:	4820      	ldr	r0, [pc, #128]	; (8006218 <LEFT_Task+0xe8>)
 8006198:	f7ff fea8 	bl	8005eec <DIGITAL_IO_SetOutputLow>
					  vTaskDelay( xDelay );
 800619c:	2314      	movs	r3, #20
 800619e:	4618      	mov	r0, r3
 80061a0:	f7fe fa6c 	bl	800467c <vTaskDelay>

					 DIGITAL_IO_SetOutputHigh(&MOTOR_LOW);
 80061a4:	481d      	ldr	r0, [pc, #116]	; (800621c <LEFT_Task+0xec>)
 80061a6:	f7ff fe91 	bl	8005ecc <DIGITAL_IO_SetOutputHigh>
					  vTaskDelay( xDelay );
 80061aa:	2314      	movs	r3, #20
 80061ac:	4618      	mov	r0, r3
 80061ae:	f7fe fa65 	bl	800467c <vTaskDelay>
 80061b2:	e028      	b.n	8006206 <LEFT_Task+0xd6>
			}

			else{
				//stop
				TLE94112EL_SetHBRegdata(&TLE94112EL_0, 0x01, 0x00);
 80061b4:	4817      	ldr	r0, [pc, #92]	; (8006214 <LEFT_Task+0xe4>)
 80061b6:	2101      	movs	r1, #1
 80061b8:	2200      	movs	r2, #0
 80061ba:	f7fa f86b 	bl	8000294 <TLE94112EL_SetHBRegdata>

				  vTaskDelay( xDelay );
 80061be:	2314      	movs	r3, #20
 80061c0:	4618      	mov	r0, r3
 80061c2:	f7fe fa5b 	bl	800467c <vTaskDelay>
					TLE94112EL_SetHBRegdata(&TLE94112EL_0, 0x02, 0x00);
 80061c6:	4813      	ldr	r0, [pc, #76]	; (8006214 <LEFT_Task+0xe4>)
 80061c8:	2102      	movs	r1, #2
 80061ca:	2200      	movs	r2, #0
 80061cc:	f7fa f862 	bl	8000294 <TLE94112EL_SetHBRegdata>
					  vTaskDelay( xDelay );
 80061d0:	2314      	movs	r3, #20
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7fe fa52 	bl	800467c <vTaskDelay>
				TLE94112EL_SetHBRegdata(&TLE94112EL_0, 0x03, 0x00);
 80061d8:	480e      	ldr	r0, [pc, #56]	; (8006214 <LEFT_Task+0xe4>)
 80061da:	2103      	movs	r1, #3
 80061dc:	2200      	movs	r2, #0
 80061de:	f7fa f859 	bl	8000294 <TLE94112EL_SetHBRegdata>
				  vTaskDelay( xDelay );
 80061e2:	2314      	movs	r3, #20
 80061e4:	4618      	mov	r0, r3
 80061e6:	f7fe fa49 	bl	800467c <vTaskDelay>
					 DIGITAL_IO_SetOutputLow(&MOTOR_HIGH);
 80061ea:	480b      	ldr	r0, [pc, #44]	; (8006218 <LEFT_Task+0xe8>)
 80061ec:	f7ff fe7e 	bl	8005eec <DIGITAL_IO_SetOutputLow>
					  vTaskDelay( xDelay );
 80061f0:	2314      	movs	r3, #20
 80061f2:	4618      	mov	r0, r3
 80061f4:	f7fe fa42 	bl	800467c <vTaskDelay>

					 DIGITAL_IO_SetOutputLow(&MOTOR_LOW);
 80061f8:	4808      	ldr	r0, [pc, #32]	; (800621c <LEFT_Task+0xec>)
 80061fa:	f7ff fe77 	bl	8005eec <DIGITAL_IO_SetOutputLow>
					  vTaskDelay( xDelay );
 80061fe:	2314      	movs	r3, #20
 8006200:	4618      	mov	r0, r3
 8006202:	f7fe fa3b 	bl	800467c <vTaskDelay>
			}
		}
	}
 8006206:	e797      	b.n	8006138 <LEFT_Task+0x8>
 8006208:	1fffcbac 	.word	0x1fffcbac
 800620c:	08006e94 	.word	0x08006e94
 8006210:	1fffcbc0 	.word	0x1fffcbc0
 8006214:	08006fbc 	.word	0x08006fbc
 8006218:	08006f18 	.word	0x08006f18
 800621c:	08006f2c 	.word	0x08006f2c

08006220 <RIGHT_Task>:
}

void RIGHT_Task(void *p){
 8006220:	b580      	push	{r7, lr}
 8006222:	b082      	sub	sp, #8
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]

	while(1){

		if (xSemaphoreTake(RIGHT_interruptSemaphore, portMAX_DELAY) == pdPASS){
 8006228:	4b33      	ldr	r3, [pc, #204]	; (80062f8 <RIGHT_Task+0xd8>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4618      	mov	r0, r3
 800622e:	f04f 31ff 	mov.w	r1, #4294967295
 8006232:	f7fd fdd5 	bl	8003de0 <xQueueSemaphoreTake>
 8006236:	4603      	mov	r3, r0
 8006238:	2b01      	cmp	r3, #1
 800623a:	d15c      	bne.n	80062f6 <RIGHT_Task+0xd6>

			pin_status = PIN_INTERRUPT_GetPinValue(&DIRECTION_INTERRUPT);
 800623c:	482f      	ldr	r0, [pc, #188]	; (80062fc <RIGHT_Task+0xdc>)
 800623e:	f7ff fe65 	bl	8005f0c <PIN_INTERRUPT_GetPinValue>
 8006242:	4602      	mov	r2, r0
 8006244:	4b2e      	ldr	r3, [pc, #184]	; (8006300 <RIGHT_Task+0xe0>)
 8006246:	601a      	str	r2, [r3, #0]
			if(pin_status==1){
 8006248:	4b2d      	ldr	r3, [pc, #180]	; (8006300 <RIGHT_Task+0xe0>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d129      	bne.n	80062a4 <RIGHT_Task+0x84>
				//RIGHT
				TLE94112EL_SetHBRegdata(&TLE94112EL_0, 0x01, 0x99);
 8006250:	482c      	ldr	r0, [pc, #176]	; (8006304 <RIGHT_Task+0xe4>)
 8006252:	2101      	movs	r1, #1
 8006254:	2299      	movs	r2, #153	; 0x99
 8006256:	f7fa f81d 	bl	8000294 <TLE94112EL_SetHBRegdata>

				  vTaskDelay( xDelay );
 800625a:	2314      	movs	r3, #20
 800625c:	4618      	mov	r0, r3
 800625e:	f7fe fa0d 	bl	800467c <vTaskDelay>
					TLE94112EL_SetHBRegdata(&TLE94112EL_0, 0x02, 0x66);
 8006262:	4828      	ldr	r0, [pc, #160]	; (8006304 <RIGHT_Task+0xe4>)
 8006264:	2102      	movs	r1, #2
 8006266:	2266      	movs	r2, #102	; 0x66
 8006268:	f7fa f814 	bl	8000294 <TLE94112EL_SetHBRegdata>
					  vTaskDelay( xDelay );
 800626c:	2314      	movs	r3, #20
 800626e:	4618      	mov	r0, r3
 8006270:	f7fe fa04 	bl	800467c <vTaskDelay>
				TLE94112EL_SetHBRegdata(&TLE94112EL_0, 0x03, 0x66);
 8006274:	4823      	ldr	r0, [pc, #140]	; (8006304 <RIGHT_Task+0xe4>)
 8006276:	2103      	movs	r1, #3
 8006278:	2266      	movs	r2, #102	; 0x66
 800627a:	f7fa f80b 	bl	8000294 <TLE94112EL_SetHBRegdata>
				  vTaskDelay( xDelay );
 800627e:	2314      	movs	r3, #20
 8006280:	4618      	mov	r0, r3
 8006282:	f7fe f9fb 	bl	800467c <vTaskDelay>
					 DIGITAL_IO_SetOutputHigh(&MOTOR_HIGH);
 8006286:	4820      	ldr	r0, [pc, #128]	; (8006308 <RIGHT_Task+0xe8>)
 8006288:	f7ff fe20 	bl	8005ecc <DIGITAL_IO_SetOutputHigh>
					  vTaskDelay( xDelay );
 800628c:	2314      	movs	r3, #20
 800628e:	4618      	mov	r0, r3
 8006290:	f7fe f9f4 	bl	800467c <vTaskDelay>

					 DIGITAL_IO_SetOutputLow(&MOTOR_LOW);
 8006294:	481d      	ldr	r0, [pc, #116]	; (800630c <RIGHT_Task+0xec>)
 8006296:	f7ff fe29 	bl	8005eec <DIGITAL_IO_SetOutputLow>
					  vTaskDelay( xDelay );
 800629a:	2314      	movs	r3, #20
 800629c:	4618      	mov	r0, r3
 800629e:	f7fe f9ed 	bl	800467c <vTaskDelay>
 80062a2:	e028      	b.n	80062f6 <RIGHT_Task+0xd6>
			}

			else{
				//stop
				TLE94112EL_SetHBRegdata(&TLE94112EL_0, 0x01, 0x00);
 80062a4:	4817      	ldr	r0, [pc, #92]	; (8006304 <RIGHT_Task+0xe4>)
 80062a6:	2101      	movs	r1, #1
 80062a8:	2200      	movs	r2, #0
 80062aa:	f7f9 fff3 	bl	8000294 <TLE94112EL_SetHBRegdata>

				  vTaskDelay( xDelay );
 80062ae:	2314      	movs	r3, #20
 80062b0:	4618      	mov	r0, r3
 80062b2:	f7fe f9e3 	bl	800467c <vTaskDelay>
					TLE94112EL_SetHBRegdata(&TLE94112EL_0, 0x02, 0x00);
 80062b6:	4813      	ldr	r0, [pc, #76]	; (8006304 <RIGHT_Task+0xe4>)
 80062b8:	2102      	movs	r1, #2
 80062ba:	2200      	movs	r2, #0
 80062bc:	f7f9 ffea 	bl	8000294 <TLE94112EL_SetHBRegdata>
					  vTaskDelay( xDelay );
 80062c0:	2314      	movs	r3, #20
 80062c2:	4618      	mov	r0, r3
 80062c4:	f7fe f9da 	bl	800467c <vTaskDelay>
				TLE94112EL_SetHBRegdata(&TLE94112EL_0, 0x03, 0x00);
 80062c8:	480e      	ldr	r0, [pc, #56]	; (8006304 <RIGHT_Task+0xe4>)
 80062ca:	2103      	movs	r1, #3
 80062cc:	2200      	movs	r2, #0
 80062ce:	f7f9 ffe1 	bl	8000294 <TLE94112EL_SetHBRegdata>
				  vTaskDelay( xDelay );
 80062d2:	2314      	movs	r3, #20
 80062d4:	4618      	mov	r0, r3
 80062d6:	f7fe f9d1 	bl	800467c <vTaskDelay>
					 DIGITAL_IO_SetOutputLow(&MOTOR_HIGH);
 80062da:	480b      	ldr	r0, [pc, #44]	; (8006308 <RIGHT_Task+0xe8>)
 80062dc:	f7ff fe06 	bl	8005eec <DIGITAL_IO_SetOutputLow>
					  vTaskDelay( xDelay );
 80062e0:	2314      	movs	r3, #20
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7fe f9ca 	bl	800467c <vTaskDelay>

					 DIGITAL_IO_SetOutputLow(&MOTOR_LOW);
 80062e8:	4808      	ldr	r0, [pc, #32]	; (800630c <RIGHT_Task+0xec>)
 80062ea:	f7ff fdff 	bl	8005eec <DIGITAL_IO_SetOutputLow>
					  vTaskDelay( xDelay );
 80062ee:	2314      	movs	r3, #20
 80062f0:	4618      	mov	r0, r3
 80062f2:	f7fe f9c3 	bl	800467c <vTaskDelay>
			}
		}
	}
 80062f6:	e797      	b.n	8006228 <RIGHT_Task+0x8>
 80062f8:	1fffcbb8 	.word	0x1fffcbb8
 80062fc:	08006e94 	.word	0x08006e94
 8006300:	1fffcbc0 	.word	0x1fffcbc0
 8006304:	08006fbc 	.word	0x08006fbc
 8006308:	08006f18 	.word	0x08006f18
 800630c:	08006f2c 	.word	0x08006f2c

08006310 <UP_Task>:
}

void UP_Task(void *p){
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]

	while(1){

		if (xSemaphoreTake(UP_interruptSemaphore, portMAX_DELAY) == pdPASS){
 8006318:	4b1e      	ldr	r3, [pc, #120]	; (8006394 <UP_Task+0x84>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4618      	mov	r0, r3
 800631e:	f04f 31ff 	mov.w	r1, #4294967295
 8006322:	f7fd fd5d 	bl	8003de0 <xQueueSemaphoreTake>
 8006326:	4603      	mov	r3, r0
 8006328:	2b01      	cmp	r3, #1
 800632a:	d131      	bne.n	8006390 <UP_Task+0x80>

	 	  	// sets the duty to 3%.
	    	// LIFT UP
			PWM_SetDutyCycle(&PWM_LIFT,800);
 800632c:	481a      	ldr	r0, [pc, #104]	; (8006398 <UP_Task+0x88>)
 800632e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006332:	f7fc fcc5 	bl	8002cc0 <PWM_SetDutyCycle>
			vTaskDelay( xDelay );
 8006336:	2314      	movs	r3, #20
 8006338:	4618      	mov	r0, r3
 800633a:	f7fe f99f 	bl	800467c <vTaskDelay>
			PWM_SetDutyCycle(&PWM_LIFT,700);
 800633e:	4816      	ldr	r0, [pc, #88]	; (8006398 <UP_Task+0x88>)
 8006340:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8006344:	f7fc fcbc 	bl	8002cc0 <PWM_SetDutyCycle>
			vTaskDelay( xDelay );
 8006348:	2314      	movs	r3, #20
 800634a:	4618      	mov	r0, r3
 800634c:	f7fe f996 	bl	800467c <vTaskDelay>
			PWM_SetDutyCycle(&PWM_LIFT,600);
 8006350:	4811      	ldr	r0, [pc, #68]	; (8006398 <UP_Task+0x88>)
 8006352:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006356:	f7fc fcb3 	bl	8002cc0 <PWM_SetDutyCycle>
			vTaskDelay( xDelay );
 800635a:	2314      	movs	r3, #20
 800635c:	4618      	mov	r0, r3
 800635e:	f7fe f98d 	bl	800467c <vTaskDelay>
			PWM_SetDutyCycle(&PWM_LIFT,500);
 8006362:	480d      	ldr	r0, [pc, #52]	; (8006398 <UP_Task+0x88>)
 8006364:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006368:	f7fc fcaa 	bl	8002cc0 <PWM_SetDutyCycle>
			vTaskDelay( xDelay );
 800636c:	2314      	movs	r3, #20
 800636e:	4618      	mov	r0, r3
 8006370:	f7fe f984 	bl	800467c <vTaskDelay>
			PWM_SetDutyCycle(&PWM_LIFT,400);
 8006374:	4808      	ldr	r0, [pc, #32]	; (8006398 <UP_Task+0x88>)
 8006376:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800637a:	f7fc fca1 	bl	8002cc0 <PWM_SetDutyCycle>
			vTaskDelay( xDelay );
 800637e:	2314      	movs	r3, #20
 8006380:	4618      	mov	r0, r3
 8006382:	f7fe f97b 	bl	800467c <vTaskDelay>
			PWM_SetDutyCycle(&PWM_LIFT,300);
 8006386:	4804      	ldr	r0, [pc, #16]	; (8006398 <UP_Task+0x88>)
 8006388:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800638c:	f7fc fc98 	bl	8002cc0 <PWM_SetDutyCycle>

		}
	}
 8006390:	e7c2      	b.n	8006318 <UP_Task+0x8>
 8006392:	bf00      	nop
 8006394:	1fffcbc8 	.word	0x1fffcbc8
 8006398:	1fffc884 	.word	0x1fffc884

0800639c <DOWN_Task>:
}

void DOWN_Task(void *p){
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]

	while(1){

		if (xSemaphoreTake(DOWN_interruptSemaphore, portMAX_DELAY) == pdPASS){
 80063a4:	4b1e      	ldr	r3, [pc, #120]	; (8006420 <DOWN_Task+0x84>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4618      	mov	r0, r3
 80063aa:	f04f 31ff 	mov.w	r1, #4294967295
 80063ae:	f7fd fd17 	bl	8003de0 <xQueueSemaphoreTake>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d131      	bne.n	800641c <DOWN_Task+0x80>

	 	  	// sets the duty to 9 %.
	    	// LIFT DOWN
			PWM_SetDutyCycle(&PWM_LIFT,400);
 80063b8:	481a      	ldr	r0, [pc, #104]	; (8006424 <DOWN_Task+0x88>)
 80063ba:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80063be:	f7fc fc7f 	bl	8002cc0 <PWM_SetDutyCycle>
			vTaskDelay( xDelay );
 80063c2:	2314      	movs	r3, #20
 80063c4:	4618      	mov	r0, r3
 80063c6:	f7fe f959 	bl	800467c <vTaskDelay>
			PWM_SetDutyCycle(&PWM_LIFT,500);
 80063ca:	4816      	ldr	r0, [pc, #88]	; (8006424 <DOWN_Task+0x88>)
 80063cc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80063d0:	f7fc fc76 	bl	8002cc0 <PWM_SetDutyCycle>
			vTaskDelay( xDelay );
 80063d4:	2314      	movs	r3, #20
 80063d6:	4618      	mov	r0, r3
 80063d8:	f7fe f950 	bl	800467c <vTaskDelay>
			PWM_SetDutyCycle(&PWM_LIFT,600);
 80063dc:	4811      	ldr	r0, [pc, #68]	; (8006424 <DOWN_Task+0x88>)
 80063de:	f44f 7116 	mov.w	r1, #600	; 0x258
 80063e2:	f7fc fc6d 	bl	8002cc0 <PWM_SetDutyCycle>
			vTaskDelay( xDelay );
 80063e6:	2314      	movs	r3, #20
 80063e8:	4618      	mov	r0, r3
 80063ea:	f7fe f947 	bl	800467c <vTaskDelay>
	    	PWM_SetDutyCycle(&PWM_LIFT,700);
 80063ee:	480d      	ldr	r0, [pc, #52]	; (8006424 <DOWN_Task+0x88>)
 80063f0:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 80063f4:	f7fc fc64 	bl	8002cc0 <PWM_SetDutyCycle>
	    	vTaskDelay( xDelay );
 80063f8:	2314      	movs	r3, #20
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7fe f93e 	bl	800467c <vTaskDelay>
	    	PWM_SetDutyCycle(&PWM_LIFT,800);
 8006400:	4808      	ldr	r0, [pc, #32]	; (8006424 <DOWN_Task+0x88>)
 8006402:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006406:	f7fc fc5b 	bl	8002cc0 <PWM_SetDutyCycle>
	    	vTaskDelay( xDelay );
 800640a:	2314      	movs	r3, #20
 800640c:	4618      	mov	r0, r3
 800640e:	f7fe f935 	bl	800467c <vTaskDelay>
	    	PWM_SetDutyCycle(&PWM_LIFT,900);
 8006412:	4804      	ldr	r0, [pc, #16]	; (8006424 <DOWN_Task+0x88>)
 8006414:	f44f 7161 	mov.w	r1, #900	; 0x384
 8006418:	f7fc fc52 	bl	8002cc0 <PWM_SetDutyCycle>

		}
	}
 800641c:	e7c2      	b.n	80063a4 <DOWN_Task+0x8>
 800641e:	bf00      	nop
 8006420:	1fffcba0 	.word	0x1fffcba0
 8006424:	1fffc884 	.word	0x1fffc884

08006428 <OPEN_Task>:
}

void OPEN_Task(void *p){
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]

	while(1){

		if (xSemaphoreTake(OPEN_interruptSemaphore, portMAX_DELAY) == pdPASS){
 8006430:	4b10      	ldr	r3, [pc, #64]	; (8006474 <OPEN_Task+0x4c>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4618      	mov	r0, r3
 8006436:	f04f 31ff 	mov.w	r1, #4294967295
 800643a:	f7fd fcd1 	bl	8003de0 <xQueueSemaphoreTake>
 800643e:	4603      	mov	r3, r0
 8006440:	2b01      	cmp	r3, #1
 8006442:	d115      	bne.n	8006470 <OPEN_Task+0x48>

			pin_status = PIN_INTERRUPT_GetPinValue(&CLAMP_INTERRUPT);
 8006444:	480c      	ldr	r0, [pc, #48]	; (8006478 <OPEN_Task+0x50>)
 8006446:	f7ff fd61 	bl	8005f0c <PIN_INTERRUPT_GetPinValue>
 800644a:	4602      	mov	r2, r0
 800644c:	4b0b      	ldr	r3, [pc, #44]	; (800647c <OPEN_Task+0x54>)
 800644e:	601a      	str	r2, [r3, #0]
		     if(pin_status == 1)
 8006450:	4b0a      	ldr	r3, [pc, #40]	; (800647c <OPEN_Task+0x54>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2b01      	cmp	r3, #1
 8006456:	d104      	bne.n	8006462 <OPEN_Task+0x3a>
		     {
		 	  	// sets the duty to 2%.
		    	// clamp open
		    	 PWM_SetDutyCycle(&PWM_CLAMP,200);
 8006458:	4809      	ldr	r0, [pc, #36]	; (8006480 <OPEN_Task+0x58>)
 800645a:	21c8      	movs	r1, #200	; 0xc8
 800645c:	f7fc fc30 	bl	8002cc0 <PWM_SetDutyCycle>
 8006460:	e003      	b.n	800646a <OPEN_Task+0x42>

		     else
		     {
		    	 // sets the channel duty to 0%.
		    	 // clamp maintain
		    	 PWM_SetDutyCycle(&PWM_CLAMP,0);
 8006462:	4807      	ldr	r0, [pc, #28]	; (8006480 <OPEN_Task+0x58>)
 8006464:	2100      	movs	r1, #0
 8006466:	f7fc fc2b 	bl	8002cc0 <PWM_SetDutyCycle>
		     }

		 	pin_status = 0;
 800646a:	4b04      	ldr	r3, [pc, #16]	; (800647c <OPEN_Task+0x54>)
 800646c:	2200      	movs	r2, #0
 800646e:	601a      	str	r2, [r3, #0]

		}
	}
 8006470:	e7de      	b.n	8006430 <OPEN_Task+0x8>
 8006472:	bf00      	nop
 8006474:	1fffcbb4 	.word	0x1fffcbb4
 8006478:	08006e4c 	.word	0x08006e4c
 800647c:	1fffcbc0 	.word	0x1fffcbc0
 8006480:	1fffc850 	.word	0x1fffc850

08006484 <CLOSE_Task>:
}

void CLOSE_Task(void *p){
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]

	while(1){

		if (xSemaphoreTake(CLOSE_interruptSemaphore, portMAX_DELAY) == pdPASS){
 800648c:	4b0e      	ldr	r3, [pc, #56]	; (80064c8 <CLOSE_Task+0x44>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4618      	mov	r0, r3
 8006492:	f04f 31ff 	mov.w	r1, #4294967295
 8006496:	f7fd fca3 	bl	8003de0 <xQueueSemaphoreTake>
 800649a:	4603      	mov	r3, r0
 800649c:	2b01      	cmp	r3, #1
 800649e:	d111      	bne.n	80064c4 <CLOSE_Task+0x40>

			pin_status = PIN_INTERRUPT_GetPinValue(&CLAMP_INTERRUPT);
 80064a0:	480a      	ldr	r0, [pc, #40]	; (80064cc <CLOSE_Task+0x48>)
 80064a2:	f7ff fd33 	bl	8005f0c <PIN_INTERRUPT_GetPinValue>
 80064a6:	4602      	mov	r2, r0
 80064a8:	4b09      	ldr	r3, [pc, #36]	; (80064d0 <CLOSE_Task+0x4c>)
 80064aa:	601a      	str	r2, [r3, #0]
		     if(pin_status == 1)
 80064ac:	4b08      	ldr	r3, [pc, #32]	; (80064d0 <CLOSE_Task+0x4c>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d104      	bne.n	80064be <CLOSE_Task+0x3a>
		     {
		 	  	// sets the duty to 9%.
		    	// clamp CLOSE
		    	 PWM_SetDutyCycle(&PWM_CLAMP,900);
 80064b4:	4807      	ldr	r0, [pc, #28]	; (80064d4 <CLOSE_Task+0x50>)
 80064b6:	f44f 7161 	mov.w	r1, #900	; 0x384
 80064ba:	f7fc fc01 	bl	8002cc0 <PWM_SetDutyCycle>
//		    	 // sets the channel duty to 9%.
//		    	 // clamp maintain
//		    	 PWM_SetDutyCycle(&PWM_CLAMP,900);
//		     }

		 	pin_status = 0;
 80064be:	4b04      	ldr	r3, [pc, #16]	; (80064d0 <CLOSE_Task+0x4c>)
 80064c0:	2200      	movs	r2, #0
 80064c2:	601a      	str	r2, [r3, #0]

		}
	}
 80064c4:	e7e2      	b.n	800648c <CLOSE_Task+0x8>
 80064c6:	bf00      	nop
 80064c8:	1fffcbd4 	.word	0x1fffcbd4
 80064cc:	08006e4c 	.word	0x08006e4c
 80064d0:	1fffcbc0 	.word	0x1fffcbc0
 80064d4:	1fffc850 	.word	0x1fffc850

080064d8 <HOLD_Task>:
}

void HOLD_Task(void *p){
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]

	while(1){

		if (xSemaphoreTake(HOLD_interruptSemaphore, portMAX_DELAY) == pdPASS){
 80064e0:	4b0e      	ldr	r3, [pc, #56]	; (800651c <HOLD_Task+0x44>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4618      	mov	r0, r3
 80064e6:	f04f 31ff 	mov.w	r1, #4294967295
 80064ea:	f7fd fc79 	bl	8003de0 <xQueueSemaphoreTake>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d111      	bne.n	8006518 <HOLD_Task+0x40>

			pin_status = PIN_INTERRUPT_GetPinValue(&HOLD_INTERRUPT);
 80064f4:	480a      	ldr	r0, [pc, #40]	; (8006520 <HOLD_Task+0x48>)
 80064f6:	f7ff fd09 	bl	8005f0c <PIN_INTERRUPT_GetPinValue>
 80064fa:	4602      	mov	r2, r0
 80064fc:	4b09      	ldr	r3, [pc, #36]	; (8006524 <HOLD_Task+0x4c>)
 80064fe:	601a      	str	r2, [r3, #0]
		     if(pin_status == 1)
 8006500:	4b08      	ldr	r3, [pc, #32]	; (8006524 <HOLD_Task+0x4c>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d104      	bne.n	8006512 <HOLD_Task+0x3a>
		     {
		    	 // sets the channel duty to 8%.
		    	 // clamp maintain
		    	 PWM_SetDutyCycle(&PWM_CLAMP,800);
 8006508:	4807      	ldr	r0, [pc, #28]	; (8006528 <HOLD_Task+0x50>)
 800650a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800650e:	f7fc fbd7 	bl	8002cc0 <PWM_SetDutyCycle>
		     }

		 	pin_status = 0;
 8006512:	4b04      	ldr	r3, [pc, #16]	; (8006524 <HOLD_Task+0x4c>)
 8006514:	2200      	movs	r2, #0
 8006516:	601a      	str	r2, [r3, #0]

		}
	}
 8006518:	e7e2      	b.n	80064e0 <HOLD_Task+0x8>
 800651a:	bf00      	nop
 800651c:	1fffcba4 	.word	0x1fffcba4
 8006520:	08006eb8 	.word	0x08006eb8
 8006524:	1fffcbc0 	.word	0x1fffcbc0
 8006528:	1fffc850 	.word	0x1fffc850

0800652c <ROTATE_Task>:
}

void ROTATE_Task(void *p){
 800652c:	b580      	push	{r7, lr}
 800652e:	b082      	sub	sp, #8
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]

	while(1){

		if (xSemaphoreTake(ROTATE_interruptSemaphore, portMAX_DELAY) == pdPASS){
 8006534:	4b46      	ldr	r3, [pc, #280]	; (8006650 <ROTATE_Task+0x124>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4618      	mov	r0, r3
 800653a:	f04f 31ff 	mov.w	r1, #4294967295
 800653e:	f7fd fc4f 	bl	8003de0 <xQueueSemaphoreTake>
 8006542:	4603      	mov	r3, r0
 8006544:	2b01      	cmp	r3, #1
 8006546:	f040 8081 	bne.w	800664c <ROTATE_Task+0x120>

			pin_status = PIN_INTERRUPT_GetPinValue(&ROTATE_INTERRUPT);
 800654a:	4842      	ldr	r0, [pc, #264]	; (8006654 <ROTATE_Task+0x128>)
 800654c:	f7ff fcde 	bl	8005f0c <PIN_INTERRUPT_GetPinValue>
 8006550:	4602      	mov	r2, r0
 8006552:	4b41      	ldr	r3, [pc, #260]	; (8006658 <ROTATE_Task+0x12c>)
 8006554:	601a      	str	r2, [r3, #0]
		     if(pin_status == 1)
 8006556:	4b40      	ldr	r3, [pc, #256]	; (8006658 <ROTATE_Task+0x12c>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2b01      	cmp	r3, #1
 800655c:	d13f      	bne.n	80065de <ROTATE_Task+0xb2>
		     {
				 BUS_IO_Write(&LED_BUS_IO, green_led);	//LED INDICATOR
 800655e:	23ff      	movs	r3, #255	; 0xff
 8006560:	483e      	ldr	r0, [pc, #248]	; (800665c <ROTATE_Task+0x130>)
 8006562:	4619      	mov	r1, r3
 8006564:	f7ff fb92 	bl	8005c8c <BUS_IO_Write>
				// sets the duty to 3%.
				// Metal
				PWM_SetDutyCycle(&PWM_ROTATE,800);
 8006568:	483d      	ldr	r0, [pc, #244]	; (8006660 <ROTATE_Task+0x134>)
 800656a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800656e:	f7fc fba7 	bl	8002cc0 <PWM_SetDutyCycle>
				vTaskDelay( xDelay );
 8006572:	2314      	movs	r3, #20
 8006574:	4618      	mov	r0, r3
 8006576:	f7fe f881 	bl	800467c <vTaskDelay>
				PWM_SetDutyCycle(&PWM_ROTATE,700);
 800657a:	4839      	ldr	r0, [pc, #228]	; (8006660 <ROTATE_Task+0x134>)
 800657c:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8006580:	f7fc fb9e 	bl	8002cc0 <PWM_SetDutyCycle>
				vTaskDelay( xDelay );
 8006584:	2314      	movs	r3, #20
 8006586:	4618      	mov	r0, r3
 8006588:	f7fe f878 	bl	800467c <vTaskDelay>
				PWM_SetDutyCycle(&PWM_ROTATE,600);
 800658c:	4834      	ldr	r0, [pc, #208]	; (8006660 <ROTATE_Task+0x134>)
 800658e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006592:	f7fc fb95 	bl	8002cc0 <PWM_SetDutyCycle>
				vTaskDelay( xDelay );
 8006596:	2314      	movs	r3, #20
 8006598:	4618      	mov	r0, r3
 800659a:	f7fe f86f 	bl	800467c <vTaskDelay>
				PWM_SetDutyCycle(&PWM_ROTATE,500);
 800659e:	4830      	ldr	r0, [pc, #192]	; (8006660 <ROTATE_Task+0x134>)
 80065a0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80065a4:	f7fc fb8c 	bl	8002cc0 <PWM_SetDutyCycle>
				vTaskDelay( xDelay );
 80065a8:	2314      	movs	r3, #20
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7fe f866 	bl	800467c <vTaskDelay>
				PWM_SetDutyCycle(&PWM_ROTATE,400);
 80065b0:	482b      	ldr	r0, [pc, #172]	; (8006660 <ROTATE_Task+0x134>)
 80065b2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80065b6:	f7fc fb83 	bl	8002cc0 <PWM_SetDutyCycle>
				vTaskDelay( xDelay );
 80065ba:	2314      	movs	r3, #20
 80065bc:	4618      	mov	r0, r3
 80065be:	f7fe f85d 	bl	800467c <vTaskDelay>
				PWM_SetDutyCycle(&PWM_ROTATE,300);
 80065c2:	4827      	ldr	r0, [pc, #156]	; (8006660 <ROTATE_Task+0x134>)
 80065c4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80065c8:	f7fc fb7a 	bl	8002cc0 <PWM_SetDutyCycle>
				vTaskDelay( xDelay );
 80065cc:	2314      	movs	r3, #20
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7fe f854 	bl	800467c <vTaskDelay>
				PWM_SetDutyCycle(&PWM_ROTATE,200);
 80065d4:	4822      	ldr	r0, [pc, #136]	; (8006660 <ROTATE_Task+0x134>)
 80065d6:	21c8      	movs	r1, #200	; 0xc8
 80065d8:	f7fc fb72 	bl	8002cc0 <PWM_SetDutyCycle>
 80065dc:	e036      	b.n	800664c <ROTATE_Task+0x120>

		     }

		     else
		     {
		    	 BUS_IO_Write(&LED_BUS_IO, red_led);	//LED INDICATOR
 80065de:	2300      	movs	r3, #0
 80065e0:	481e      	ldr	r0, [pc, #120]	; (800665c <ROTATE_Task+0x130>)
 80065e2:	4619      	mov	r1, r3
 80065e4:	f7ff fb52 	bl	8005c8c <BUS_IO_Write>
				// sets the duty to 10 %.
				// NON-metal
				PWM_SetDutyCycle(&PWM_ROTATE,400);
 80065e8:	481d      	ldr	r0, [pc, #116]	; (8006660 <ROTATE_Task+0x134>)
 80065ea:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80065ee:	f7fc fb67 	bl	8002cc0 <PWM_SetDutyCycle>
				vTaskDelay( xDelay );
 80065f2:	2314      	movs	r3, #20
 80065f4:	4618      	mov	r0, r3
 80065f6:	f7fe f841 	bl	800467c <vTaskDelay>
				PWM_SetDutyCycle(&PWM_ROTATE,500);
 80065fa:	4819      	ldr	r0, [pc, #100]	; (8006660 <ROTATE_Task+0x134>)
 80065fc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006600:	f7fc fb5e 	bl	8002cc0 <PWM_SetDutyCycle>
				vTaskDelay( xDelay );
 8006604:	2314      	movs	r3, #20
 8006606:	4618      	mov	r0, r3
 8006608:	f7fe f838 	bl	800467c <vTaskDelay>
				PWM_SetDutyCycle(&PWM_ROTATE,600);
 800660c:	4814      	ldr	r0, [pc, #80]	; (8006660 <ROTATE_Task+0x134>)
 800660e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006612:	f7fc fb55 	bl	8002cc0 <PWM_SetDutyCycle>
				vTaskDelay( xDelay );
 8006616:	2314      	movs	r3, #20
 8006618:	4618      	mov	r0, r3
 800661a:	f7fe f82f 	bl	800467c <vTaskDelay>
				PWM_SetDutyCycle(&PWM_ROTATE,700);
 800661e:	4810      	ldr	r0, [pc, #64]	; (8006660 <ROTATE_Task+0x134>)
 8006620:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8006624:	f7fc fb4c 	bl	8002cc0 <PWM_SetDutyCycle>
				vTaskDelay( xDelay );
 8006628:	2314      	movs	r3, #20
 800662a:	4618      	mov	r0, r3
 800662c:	f7fe f826 	bl	800467c <vTaskDelay>
				PWM_SetDutyCycle(&PWM_ROTATE,800);
 8006630:	480b      	ldr	r0, [pc, #44]	; (8006660 <ROTATE_Task+0x134>)
 8006632:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006636:	f7fc fb43 	bl	8002cc0 <PWM_SetDutyCycle>
				vTaskDelay( xDelay );
 800663a:	2314      	movs	r3, #20
 800663c:	4618      	mov	r0, r3
 800663e:	f7fe f81d 	bl	800467c <vTaskDelay>
				PWM_SetDutyCycle(&PWM_ROTATE,900);
 8006642:	4807      	ldr	r0, [pc, #28]	; (8006660 <ROTATE_Task+0x134>)
 8006644:	f44f 7161 	mov.w	r1, #900	; 0x384
 8006648:	f7fc fb3a 	bl	8002cc0 <PWM_SetDutyCycle>

		     }
		}
	}
 800664c:	e772      	b.n	8006534 <ROTATE_Task+0x8>
 800664e:	bf00      	nop
 8006650:	1fffcba8 	.word	0x1fffcba8
 8006654:	08006e70 	.word	0x08006e70
 8006658:	1fffcbc0 	.word	0x1fffcbc0
 800665c:	1fffc948 	.word	0x1fffc948
 8006660:	1fffc8b8 	.word	0x1fffc8b8

08006664 <DIRECTION_Task>:
}

void DIRECTION_Task(void *p){
 8006664:	b580      	push	{r7, lr}
 8006666:	b082      	sub	sp, #8
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]

	while(1){

		if (xSemaphoreTake(DIRECTION_interruptSemaphore, portMAX_DELAY) == pdPASS){
 800666c:	4b1f      	ldr	r3, [pc, #124]	; (80066ec <DIRECTION_Task+0x88>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4618      	mov	r0, r3
 8006672:	f04f 31ff 	mov.w	r1, #4294967295
 8006676:	f7fd fbb3 	bl	8003de0 <xQueueSemaphoreTake>
 800667a:	4603      	mov	r3, r0
 800667c:	2b01      	cmp	r3, #1
 800667e:	d133      	bne.n	80066e8 <DIRECTION_Task+0x84>

			direction_status = BUS_IO_Read(&DIRECTION_BUS_IO);
 8006680:	481b      	ldr	r0, [pc, #108]	; (80066f0 <DIRECTION_Task+0x8c>)
 8006682:	f7ff fad5 	bl	8005c30 <BUS_IO_Read>
 8006686:	4603      	mov	r3, r0
 8006688:	461a      	mov	r2, r3
 800668a:	4b1a      	ldr	r3, [pc, #104]	; (80066f4 <DIRECTION_Task+0x90>)
 800668c:	801a      	strh	r2, [r3, #0]

			switch(direction_status){
 800668e:	4b19      	ldr	r3, [pc, #100]	; (80066f4 <DIRECTION_Task+0x90>)
 8006690:	881b      	ldrh	r3, [r3, #0]
 8006692:	b29b      	uxth	r3, r3
 8006694:	2b03      	cmp	r3, #3
 8006696:	d8e9      	bhi.n	800666c <DIRECTION_Task+0x8>
 8006698:	a201      	add	r2, pc, #4	; (adr r2, 80066a0 <DIRECTION_Task+0x3c>)
 800669a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800669e:	bf00      	nop
 80066a0:	080066b1 	.word	0x080066b1
 80066a4:	080066bf 	.word	0x080066bf
 80066a8:	080066cd 	.word	0x080066cd
 80066ac:	080066db 	.word	0x080066db

			case 0:
				xSemaphoreGiveFromISR(FORWARD_interruptSemaphore, NULL);
 80066b0:	4b11      	ldr	r3, [pc, #68]	; (80066f8 <DIRECTION_Task+0x94>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4618      	mov	r0, r3
 80066b6:	2100      	movs	r1, #0
 80066b8:	f7fd fa16 	bl	8003ae8 <xQueueGiveFromISR>
				break;
 80066bc:	e014      	b.n	80066e8 <DIRECTION_Task+0x84>

			case 1:
				xSemaphoreGiveFromISR(BACKWARD_interruptSemaphore, NULL);
 80066be:	4b0f      	ldr	r3, [pc, #60]	; (80066fc <DIRECTION_Task+0x98>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4618      	mov	r0, r3
 80066c4:	2100      	movs	r1, #0
 80066c6:	f7fd fa0f 	bl	8003ae8 <xQueueGiveFromISR>
				break;
 80066ca:	e00d      	b.n	80066e8 <DIRECTION_Task+0x84>

			case 2:
				xSemaphoreGiveFromISR(LEFT_interruptSemaphore, NULL);
 80066cc:	4b0c      	ldr	r3, [pc, #48]	; (8006700 <DIRECTION_Task+0x9c>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4618      	mov	r0, r3
 80066d2:	2100      	movs	r1, #0
 80066d4:	f7fd fa08 	bl	8003ae8 <xQueueGiveFromISR>
				break;
 80066d8:	e006      	b.n	80066e8 <DIRECTION_Task+0x84>

			case 3:
				xSemaphoreGiveFromISR(RIGHT_interruptSemaphore, NULL);
 80066da:	4b0a      	ldr	r3, [pc, #40]	; (8006704 <DIRECTION_Task+0xa0>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4618      	mov	r0, r3
 80066e0:	2100      	movs	r1, #0
 80066e2:	f7fd fa01 	bl	8003ae8 <xQueueGiveFromISR>
				break;
 80066e6:	bf00      	nop

			}
		}
	}
 80066e8:	e7c0      	b.n	800666c <DIRECTION_Task+0x8>
 80066ea:	bf00      	nop
 80066ec:	1fffcbbc 	.word	0x1fffcbbc
 80066f0:	1fffc920 	.word	0x1fffc920
 80066f4:	1fffcbc4 	.word	0x1fffcbc4
 80066f8:	1fffcbd0 	.word	0x1fffcbd0
 80066fc:	1fffcb9c 	.word	0x1fffcb9c
 8006700:	1fffcbac 	.word	0x1fffcbac
 8006704:	1fffcbb8 	.word	0x1fffcbb8

08006708 <CLAMP_Task>:
}

void CLAMP_Task(void *p){
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]

	while(1){

		if (xSemaphoreTake(CLAMP_interruptSemaphore, portMAX_DELAY) == pdPASS){
 8006710:	4b1f      	ldr	r3, [pc, #124]	; (8006790 <CLAMP_Task+0x88>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4618      	mov	r0, r3
 8006716:	f04f 31ff 	mov.w	r1, #4294967295
 800671a:	f7fd fb61 	bl	8003de0 <xQueueSemaphoreTake>
 800671e:	4603      	mov	r3, r0
 8006720:	2b01      	cmp	r3, #1
 8006722:	d133      	bne.n	800678c <CLAMP_Task+0x84>

			clamp_status = BUS_IO_Read(&CLAMP_BUS_IO);
 8006724:	481b      	ldr	r0, [pc, #108]	; (8006794 <CLAMP_Task+0x8c>)
 8006726:	f7ff fa83 	bl	8005c30 <BUS_IO_Read>
 800672a:	4603      	mov	r3, r0
 800672c:	461a      	mov	r2, r3
 800672e:	4b1a      	ldr	r3, [pc, #104]	; (8006798 <CLAMP_Task+0x90>)
 8006730:	801a      	strh	r2, [r3, #0]

			switch(clamp_status){
 8006732:	4b19      	ldr	r3, [pc, #100]	; (8006798 <CLAMP_Task+0x90>)
 8006734:	881b      	ldrh	r3, [r3, #0]
 8006736:	b29b      	uxth	r3, r3
 8006738:	2b03      	cmp	r3, #3
 800673a:	d8e9      	bhi.n	8006710 <CLAMP_Task+0x8>
 800673c:	a201      	add	r2, pc, #4	; (adr r2, 8006744 <CLAMP_Task+0x3c>)
 800673e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006742:	bf00      	nop
 8006744:	08006755 	.word	0x08006755
 8006748:	08006763 	.word	0x08006763
 800674c:	08006771 	.word	0x08006771
 8006750:	0800677f 	.word	0x0800677f

			case 0:
				xSemaphoreGiveFromISR(UP_interruptSemaphore, NULL);
 8006754:	4b11      	ldr	r3, [pc, #68]	; (800679c <CLAMP_Task+0x94>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4618      	mov	r0, r3
 800675a:	2100      	movs	r1, #0
 800675c:	f7fd f9c4 	bl	8003ae8 <xQueueGiveFromISR>
				break;
 8006760:	e014      	b.n	800678c <CLAMP_Task+0x84>

			case 1:
				xSemaphoreGiveFromISR(DOWN_interruptSemaphore, NULL);
 8006762:	4b0f      	ldr	r3, [pc, #60]	; (80067a0 <CLAMP_Task+0x98>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4618      	mov	r0, r3
 8006768:	2100      	movs	r1, #0
 800676a:	f7fd f9bd 	bl	8003ae8 <xQueueGiveFromISR>
				break;
 800676e:	e00d      	b.n	800678c <CLAMP_Task+0x84>

			case 2:
				xSemaphoreGiveFromISR(OPEN_interruptSemaphore, NULL);
 8006770:	4b0c      	ldr	r3, [pc, #48]	; (80067a4 <CLAMP_Task+0x9c>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4618      	mov	r0, r3
 8006776:	2100      	movs	r1, #0
 8006778:	f7fd f9b6 	bl	8003ae8 <xQueueGiveFromISR>
				break;
 800677c:	e006      	b.n	800678c <CLAMP_Task+0x84>

			case 3:
				xSemaphoreGiveFromISR(CLOSE_interruptSemaphore, NULL);
 800677e:	4b0a      	ldr	r3, [pc, #40]	; (80067a8 <CLAMP_Task+0xa0>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4618      	mov	r0, r3
 8006784:	2100      	movs	r1, #0
 8006786:	f7fd f9af 	bl	8003ae8 <xQueueGiveFromISR>
				break;
 800678a:	bf00      	nop

			}
		}
	}
 800678c:	e7c0      	b.n	8006710 <CLAMP_Task+0x8>
 800678e:	bf00      	nop
 8006790:	1fffcbcc 	.word	0x1fffcbcc
 8006794:	1fffc934 	.word	0x1fffc934
 8006798:	1fffcbb0 	.word	0x1fffcbb0
 800679c:	1fffcbc8 	.word	0x1fffcbc8
 80067a0:	1fffcba0 	.word	0x1fffcba0
 80067a4:	1fffcbb4 	.word	0x1fffcbb4
 80067a8:	1fffcbd4 	.word	0x1fffcbd4

080067ac <main>:
}

int main(void)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af02      	add	r7, sp, #8
  DAVE_STATUS_t status;

  status = DAVE_Init();           /* Initialization of DAVE APPs  */
 80067b2:	f7ff faa3 	bl	8005cfc <DAVE_Init>
 80067b6:	4603      	mov	r3, r0
 80067b8:	71fb      	strb	r3, [r7, #7]

  if(status != DAVE_STATUS_SUCCESS)
 80067ba:	79fb      	ldrb	r3, [r7, #7]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d000      	beq.n	80067c2 <main+0x16>
    XMC_DEBUG("DAVE APPs initialization failed\n");

    while(1U)
    {

    }
 80067c0:	e7fe      	b.n	80067c0 <main+0x14>
  }

	// LIFT DOWN
	 PWM_SetDutyCycle(&PWM_LIFT,900);
 80067c2:	4877      	ldr	r0, [pc, #476]	; (80069a0 <main+0x1f4>)
 80067c4:	f44f 7161 	mov.w	r1, #900	; 0x384
 80067c8:	f7fc fa7a 	bl	8002cc0 <PWM_SetDutyCycle>
	 PWM_SetDutyCycle(&PWM_ROTATE,200);
 80067cc:	4875      	ldr	r0, [pc, #468]	; (80069a4 <main+0x1f8>)
 80067ce:	21c8      	movs	r1, #200	; 0xc8
 80067d0:	f7fc fa76 	bl	8002cc0 <PWM_SetDutyCycle>

	 BUS_IO_Write(&LED_BUS_IO, red_led);	//LED INDICATOR
 80067d4:	2300      	movs	r3, #0
 80067d6:	4874      	ldr	r0, [pc, #464]	; (80069a8 <main+0x1fc>)
 80067d8:	4619      	mov	r1, r3
 80067da:	f7ff fa57 	bl	8005c8c <BUS_IO_Write>
	 DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_0);
 80067de:	4873      	ldr	r0, [pc, #460]	; (80069ac <main+0x200>)
 80067e0:	f7ff fb74 	bl	8005ecc <DIGITAL_IO_SetOutputHigh>


	// ENABLE DC Motor Shield
	TLE94112EL_Enable(&TLE94112EL_0);
 80067e4:	4872      	ldr	r0, [pc, #456]	; (80069b0 <main+0x204>)
 80067e6:	f7f9 fd81 	bl	80002ec <TLE94112EL_Enable>

	// Initialize the FreeRTOS
	xTaskCreate(FORWARD_Task, "FORWARD", 200, NULL, tskIDLE_PRIORITY, &FORWARD_Handle);
 80067ea:	2300      	movs	r3, #0
 80067ec:	9300      	str	r3, [sp, #0]
 80067ee:	4b71      	ldr	r3, [pc, #452]	; (80069b4 <main+0x208>)
 80067f0:	9301      	str	r3, [sp, #4]
 80067f2:	4871      	ldr	r0, [pc, #452]	; (80069b8 <main+0x20c>)
 80067f4:	4971      	ldr	r1, [pc, #452]	; (80069bc <main+0x210>)
 80067f6:	22c8      	movs	r2, #200	; 0xc8
 80067f8:	2300      	movs	r3, #0
 80067fa:	f7fd fdeb 	bl	80043d4 <xTaskCreate>
	xTaskCreate(BACKWARD_Task, "BACKWARD", 200, NULL, tskIDLE_PRIORITY, &BACKWARD_Handle);
 80067fe:	2300      	movs	r3, #0
 8006800:	9300      	str	r3, [sp, #0]
 8006802:	4b6f      	ldr	r3, [pc, #444]	; (80069c0 <main+0x214>)
 8006804:	9301      	str	r3, [sp, #4]
 8006806:	486f      	ldr	r0, [pc, #444]	; (80069c4 <main+0x218>)
 8006808:	496f      	ldr	r1, [pc, #444]	; (80069c8 <main+0x21c>)
 800680a:	22c8      	movs	r2, #200	; 0xc8
 800680c:	2300      	movs	r3, #0
 800680e:	f7fd fde1 	bl	80043d4 <xTaskCreate>
	xTaskCreate(LEFT_Task, "LEFT", 200, NULL, tskIDLE_PRIORITY, &LEFT_Handle);
 8006812:	2300      	movs	r3, #0
 8006814:	9300      	str	r3, [sp, #0]
 8006816:	4b6d      	ldr	r3, [pc, #436]	; (80069cc <main+0x220>)
 8006818:	9301      	str	r3, [sp, #4]
 800681a:	486d      	ldr	r0, [pc, #436]	; (80069d0 <main+0x224>)
 800681c:	496d      	ldr	r1, [pc, #436]	; (80069d4 <main+0x228>)
 800681e:	22c8      	movs	r2, #200	; 0xc8
 8006820:	2300      	movs	r3, #0
 8006822:	f7fd fdd7 	bl	80043d4 <xTaskCreate>
	xTaskCreate(RIGHT_Task, "RIGHT", 200, NULL, tskIDLE_PRIORITY, &RIGHT_Handle);
 8006826:	2300      	movs	r3, #0
 8006828:	9300      	str	r3, [sp, #0]
 800682a:	4b6b      	ldr	r3, [pc, #428]	; (80069d8 <main+0x22c>)
 800682c:	9301      	str	r3, [sp, #4]
 800682e:	486b      	ldr	r0, [pc, #428]	; (80069dc <main+0x230>)
 8006830:	496b      	ldr	r1, [pc, #428]	; (80069e0 <main+0x234>)
 8006832:	22c8      	movs	r2, #200	; 0xc8
 8006834:	2300      	movs	r3, #0
 8006836:	f7fd fdcd 	bl	80043d4 <xTaskCreate>

	xTaskCreate(UP_Task, "UP", 200, NULL, tskIDLE_PRIORITY, &UP_Handle);
 800683a:	2300      	movs	r3, #0
 800683c:	9300      	str	r3, [sp, #0]
 800683e:	4b69      	ldr	r3, [pc, #420]	; (80069e4 <main+0x238>)
 8006840:	9301      	str	r3, [sp, #4]
 8006842:	4869      	ldr	r0, [pc, #420]	; (80069e8 <main+0x23c>)
 8006844:	4969      	ldr	r1, [pc, #420]	; (80069ec <main+0x240>)
 8006846:	22c8      	movs	r2, #200	; 0xc8
 8006848:	2300      	movs	r3, #0
 800684a:	f7fd fdc3 	bl	80043d4 <xTaskCreate>
	xTaskCreate(DOWN_Task, "DOWN", 200, NULL, tskIDLE_PRIORITY, &DOWN_Handle);
 800684e:	2300      	movs	r3, #0
 8006850:	9300      	str	r3, [sp, #0]
 8006852:	4b67      	ldr	r3, [pc, #412]	; (80069f0 <main+0x244>)
 8006854:	9301      	str	r3, [sp, #4]
 8006856:	4867      	ldr	r0, [pc, #412]	; (80069f4 <main+0x248>)
 8006858:	4967      	ldr	r1, [pc, #412]	; (80069f8 <main+0x24c>)
 800685a:	22c8      	movs	r2, #200	; 0xc8
 800685c:	2300      	movs	r3, #0
 800685e:	f7fd fdb9 	bl	80043d4 <xTaskCreate>
	xTaskCreate(OPEN_Task, "OPEN", 200, NULL, tskIDLE_PRIORITY, &OPEN_Handle);
 8006862:	2300      	movs	r3, #0
 8006864:	9300      	str	r3, [sp, #0]
 8006866:	4b65      	ldr	r3, [pc, #404]	; (80069fc <main+0x250>)
 8006868:	9301      	str	r3, [sp, #4]
 800686a:	4865      	ldr	r0, [pc, #404]	; (8006a00 <main+0x254>)
 800686c:	4965      	ldr	r1, [pc, #404]	; (8006a04 <main+0x258>)
 800686e:	22c8      	movs	r2, #200	; 0xc8
 8006870:	2300      	movs	r3, #0
 8006872:	f7fd fdaf 	bl	80043d4 <xTaskCreate>
	xTaskCreate(CLOSE_Task, "CLOSE", 200, NULL, tskIDLE_PRIORITY, &CLOSE_Handle);
 8006876:	2300      	movs	r3, #0
 8006878:	9300      	str	r3, [sp, #0]
 800687a:	4b63      	ldr	r3, [pc, #396]	; (8006a08 <main+0x25c>)
 800687c:	9301      	str	r3, [sp, #4]
 800687e:	4863      	ldr	r0, [pc, #396]	; (8006a0c <main+0x260>)
 8006880:	4963      	ldr	r1, [pc, #396]	; (8006a10 <main+0x264>)
 8006882:	22c8      	movs	r2, #200	; 0xc8
 8006884:	2300      	movs	r3, #0
 8006886:	f7fd fda5 	bl	80043d4 <xTaskCreate>
	xTaskCreate(HOLD_Task, "HOLD", 200, NULL, tskIDLE_PRIORITY, &HOLD_Handle);
 800688a:	2300      	movs	r3, #0
 800688c:	9300      	str	r3, [sp, #0]
 800688e:	4b61      	ldr	r3, [pc, #388]	; (8006a14 <main+0x268>)
 8006890:	9301      	str	r3, [sp, #4]
 8006892:	4861      	ldr	r0, [pc, #388]	; (8006a18 <main+0x26c>)
 8006894:	4961      	ldr	r1, [pc, #388]	; (8006a1c <main+0x270>)
 8006896:	22c8      	movs	r2, #200	; 0xc8
 8006898:	2300      	movs	r3, #0
 800689a:	f7fd fd9b 	bl	80043d4 <xTaskCreate>

	xTaskCreate(ROTATE_Task, "ROTATE", 200, NULL, tskIDLE_PRIORITY, &ROTATE_Handle);
 800689e:	2300      	movs	r3, #0
 80068a0:	9300      	str	r3, [sp, #0]
 80068a2:	4b5f      	ldr	r3, [pc, #380]	; (8006a20 <main+0x274>)
 80068a4:	9301      	str	r3, [sp, #4]
 80068a6:	485f      	ldr	r0, [pc, #380]	; (8006a24 <main+0x278>)
 80068a8:	495f      	ldr	r1, [pc, #380]	; (8006a28 <main+0x27c>)
 80068aa:	22c8      	movs	r2, #200	; 0xc8
 80068ac:	2300      	movs	r3, #0
 80068ae:	f7fd fd91 	bl	80043d4 <xTaskCreate>
	xTaskCreate(DIRECTION_Task, "DIRECTION", 200, NULL, tskIDLE_PRIORITY, &DIRECTION_Handle);
 80068b2:	2300      	movs	r3, #0
 80068b4:	9300      	str	r3, [sp, #0]
 80068b6:	4b5d      	ldr	r3, [pc, #372]	; (8006a2c <main+0x280>)
 80068b8:	9301      	str	r3, [sp, #4]
 80068ba:	485d      	ldr	r0, [pc, #372]	; (8006a30 <main+0x284>)
 80068bc:	495d      	ldr	r1, [pc, #372]	; (8006a34 <main+0x288>)
 80068be:	22c8      	movs	r2, #200	; 0xc8
 80068c0:	2300      	movs	r3, #0
 80068c2:	f7fd fd87 	bl	80043d4 <xTaskCreate>
	xTaskCreate(CLAMP_Task, "CLAMP", 200, NULL, tskIDLE_PRIORITY, &CLAMP_Handle);
 80068c6:	2300      	movs	r3, #0
 80068c8:	9300      	str	r3, [sp, #0]
 80068ca:	4b5b      	ldr	r3, [pc, #364]	; (8006a38 <main+0x28c>)
 80068cc:	9301      	str	r3, [sp, #4]
 80068ce:	485b      	ldr	r0, [pc, #364]	; (8006a3c <main+0x290>)
 80068d0:	495b      	ldr	r1, [pc, #364]	; (8006a40 <main+0x294>)
 80068d2:	22c8      	movs	r2, #200	; 0xc8
 80068d4:	2300      	movs	r3, #0
 80068d6:	f7fd fd7d 	bl	80043d4 <xTaskCreate>


	FORWARD_interruptSemaphore = xSemaphoreCreateBinary();
 80068da:	2001      	movs	r0, #1
 80068dc:	2100      	movs	r1, #0
 80068de:	2203      	movs	r2, #3
 80068e0:	f7fc fedc 	bl	800369c <xQueueGenericCreate>
 80068e4:	4602      	mov	r2, r0
 80068e6:	4b57      	ldr	r3, [pc, #348]	; (8006a44 <main+0x298>)
 80068e8:	601a      	str	r2, [r3, #0]
	BACKWARD_interruptSemaphore = xSemaphoreCreateBinary();
 80068ea:	2001      	movs	r0, #1
 80068ec:	2100      	movs	r1, #0
 80068ee:	2203      	movs	r2, #3
 80068f0:	f7fc fed4 	bl	800369c <xQueueGenericCreate>
 80068f4:	4602      	mov	r2, r0
 80068f6:	4b54      	ldr	r3, [pc, #336]	; (8006a48 <main+0x29c>)
 80068f8:	601a      	str	r2, [r3, #0]
	LEFT_interruptSemaphore = xSemaphoreCreateBinary();
 80068fa:	2001      	movs	r0, #1
 80068fc:	2100      	movs	r1, #0
 80068fe:	2203      	movs	r2, #3
 8006900:	f7fc fecc 	bl	800369c <xQueueGenericCreate>
 8006904:	4602      	mov	r2, r0
 8006906:	4b51      	ldr	r3, [pc, #324]	; (8006a4c <main+0x2a0>)
 8006908:	601a      	str	r2, [r3, #0]
	RIGHT_interruptSemaphore = xSemaphoreCreateBinary();
 800690a:	2001      	movs	r0, #1
 800690c:	2100      	movs	r1, #0
 800690e:	2203      	movs	r2, #3
 8006910:	f7fc fec4 	bl	800369c <xQueueGenericCreate>
 8006914:	4602      	mov	r2, r0
 8006916:	4b4e      	ldr	r3, [pc, #312]	; (8006a50 <main+0x2a4>)
 8006918:	601a      	str	r2, [r3, #0]

	UP_interruptSemaphore = xSemaphoreCreateBinary();
 800691a:	2001      	movs	r0, #1
 800691c:	2100      	movs	r1, #0
 800691e:	2203      	movs	r2, #3
 8006920:	f7fc febc 	bl	800369c <xQueueGenericCreate>
 8006924:	4602      	mov	r2, r0
 8006926:	4b4b      	ldr	r3, [pc, #300]	; (8006a54 <main+0x2a8>)
 8006928:	601a      	str	r2, [r3, #0]
	DOWN_interruptSemaphore = xSemaphoreCreateBinary();
 800692a:	2001      	movs	r0, #1
 800692c:	2100      	movs	r1, #0
 800692e:	2203      	movs	r2, #3
 8006930:	f7fc feb4 	bl	800369c <xQueueGenericCreate>
 8006934:	4602      	mov	r2, r0
 8006936:	4b48      	ldr	r3, [pc, #288]	; (8006a58 <main+0x2ac>)
 8006938:	601a      	str	r2, [r3, #0]
	OPEN_interruptSemaphore = xSemaphoreCreateBinary();
 800693a:	2001      	movs	r0, #1
 800693c:	2100      	movs	r1, #0
 800693e:	2203      	movs	r2, #3
 8006940:	f7fc feac 	bl	800369c <xQueueGenericCreate>
 8006944:	4602      	mov	r2, r0
 8006946:	4b45      	ldr	r3, [pc, #276]	; (8006a5c <main+0x2b0>)
 8006948:	601a      	str	r2, [r3, #0]
	CLOSE_interruptSemaphore = xSemaphoreCreateBinary();
 800694a:	2001      	movs	r0, #1
 800694c:	2100      	movs	r1, #0
 800694e:	2203      	movs	r2, #3
 8006950:	f7fc fea4 	bl	800369c <xQueueGenericCreate>
 8006954:	4602      	mov	r2, r0
 8006956:	4b42      	ldr	r3, [pc, #264]	; (8006a60 <main+0x2b4>)
 8006958:	601a      	str	r2, [r3, #0]
	HOLD_interruptSemaphore = xSemaphoreCreateBinary();
 800695a:	2001      	movs	r0, #1
 800695c:	2100      	movs	r1, #0
 800695e:	2203      	movs	r2, #3
 8006960:	f7fc fe9c 	bl	800369c <xQueueGenericCreate>
 8006964:	4602      	mov	r2, r0
 8006966:	4b3f      	ldr	r3, [pc, #252]	; (8006a64 <main+0x2b8>)
 8006968:	601a      	str	r2, [r3, #0]

	ROTATE_interruptSemaphore = xSemaphoreCreateBinary();
 800696a:	2001      	movs	r0, #1
 800696c:	2100      	movs	r1, #0
 800696e:	2203      	movs	r2, #3
 8006970:	f7fc fe94 	bl	800369c <xQueueGenericCreate>
 8006974:	4602      	mov	r2, r0
 8006976:	4b3c      	ldr	r3, [pc, #240]	; (8006a68 <main+0x2bc>)
 8006978:	601a      	str	r2, [r3, #0]
	DIRECTION_interruptSemaphore = xSemaphoreCreateBinary();
 800697a:	2001      	movs	r0, #1
 800697c:	2100      	movs	r1, #0
 800697e:	2203      	movs	r2, #3
 8006980:	f7fc fe8c 	bl	800369c <xQueueGenericCreate>
 8006984:	4602      	mov	r2, r0
 8006986:	4b39      	ldr	r3, [pc, #228]	; (8006a6c <main+0x2c0>)
 8006988:	601a      	str	r2, [r3, #0]
	CLAMP_interruptSemaphore = xSemaphoreCreateBinary();
 800698a:	2001      	movs	r0, #1
 800698c:	2100      	movs	r1, #0
 800698e:	2203      	movs	r2, #3
 8006990:	f7fc fe84 	bl	800369c <xQueueGenericCreate>
 8006994:	4602      	mov	r2, r0
 8006996:	4b36      	ldr	r3, [pc, #216]	; (8006a70 <main+0x2c4>)
 8006998:	601a      	str	r2, [r3, #0]

	vTaskStartScheduler();
 800699a:	f7fd fea1 	bl	80046e0 <vTaskStartScheduler>

  /* Placeholder for user application code. The while loop below can be replaced with user application code. */
  while(1U)
  {

  }
 800699e:	e7fe      	b.n	800699e <main+0x1f2>
 80069a0:	1fffc884 	.word	0x1fffc884
 80069a4:	1fffc8b8 	.word	0x1fffc8b8
 80069a8:	1fffc948 	.word	0x1fffc948
 80069ac:	08006f04 	.word	0x08006f04
 80069b0:	08006fbc 	.word	0x08006fbc
 80069b4:	1fffcb24 	.word	0x1fffcb24
 80069b8:	08005f51 	.word	0x08005f51
 80069bc:	08006fc8 	.word	0x08006fc8
 80069c0:	1fffcb28 	.word	0x1fffcb28
 80069c4:	08006041 	.word	0x08006041
 80069c8:	08006fd0 	.word	0x08006fd0
 80069cc:	1fffcb2c 	.word	0x1fffcb2c
 80069d0:	08006131 	.word	0x08006131
 80069d4:	08006fdc 	.word	0x08006fdc
 80069d8:	1fffcb30 	.word	0x1fffcb30
 80069dc:	08006221 	.word	0x08006221
 80069e0:	08006fe4 	.word	0x08006fe4
 80069e4:	1fffcb34 	.word	0x1fffcb34
 80069e8:	08006311 	.word	0x08006311
 80069ec:	08006fec 	.word	0x08006fec
 80069f0:	1fffcb38 	.word	0x1fffcb38
 80069f4:	0800639d 	.word	0x0800639d
 80069f8:	08006ff0 	.word	0x08006ff0
 80069fc:	1fffcb3c 	.word	0x1fffcb3c
 8006a00:	08006429 	.word	0x08006429
 8006a04:	08006ff8 	.word	0x08006ff8
 8006a08:	1fffcb40 	.word	0x1fffcb40
 8006a0c:	08006485 	.word	0x08006485
 8006a10:	08007000 	.word	0x08007000
 8006a14:	1fffcb44 	.word	0x1fffcb44
 8006a18:	080064d9 	.word	0x080064d9
 8006a1c:	08007008 	.word	0x08007008
 8006a20:	1fffcb48 	.word	0x1fffcb48
 8006a24:	0800652d 	.word	0x0800652d
 8006a28:	08007010 	.word	0x08007010
 8006a2c:	1fffcb4c 	.word	0x1fffcb4c
 8006a30:	08006665 	.word	0x08006665
 8006a34:	08007018 	.word	0x08007018
 8006a38:	1fffcb50 	.word	0x1fffcb50
 8006a3c:	08006709 	.word	0x08006709
 8006a40:	08007024 	.word	0x08007024
 8006a44:	1fffcbd0 	.word	0x1fffcbd0
 8006a48:	1fffcb9c 	.word	0x1fffcb9c
 8006a4c:	1fffcbac 	.word	0x1fffcbac
 8006a50:	1fffcbb8 	.word	0x1fffcbb8
 8006a54:	1fffcbc8 	.word	0x1fffcbc8
 8006a58:	1fffcba0 	.word	0x1fffcba0
 8006a5c:	1fffcbb4 	.word	0x1fffcbb4
 8006a60:	1fffcbd4 	.word	0x1fffcbd4
 8006a64:	1fffcba4 	.word	0x1fffcba4
 8006a68:	1fffcba8 	.word	0x1fffcba8
 8006a6c:	1fffcbbc 	.word	0x1fffcbbc
 8006a70:	1fffcbcc 	.word	0x1fffcbcc

08006a74 <ERU0_2_IRQHandler>:
}

void ROTATE_IRQHandler(void){
 8006a74:	b580      	push	{r7, lr}
 8006a76:	af00      	add	r7, sp, #0

	xSemaphoreGiveFromISR(ROTATE_interruptSemaphore, NULL);
 8006a78:	4b03      	ldr	r3, [pc, #12]	; (8006a88 <ERU0_2_IRQHandler+0x14>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	2100      	movs	r1, #0
 8006a80:	f7fd f832 	bl	8003ae8 <xQueueGiveFromISR>
}
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	1fffcba8 	.word	0x1fffcba8

08006a8c <ERU0_3_IRQHandler>:

void DIRECTION_IRQHandler(void){
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	af00      	add	r7, sp, #0

	xSemaphoreGiveFromISR(DIRECTION_interruptSemaphore, NULL);
 8006a90:	4b03      	ldr	r3, [pc, #12]	; (8006aa0 <ERU0_3_IRQHandler+0x14>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4618      	mov	r0, r3
 8006a96:	2100      	movs	r1, #0
 8006a98:	f7fd f826 	bl	8003ae8 <xQueueGiveFromISR>
}
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	1fffcbbc 	.word	0x1fffcbbc

08006aa4 <ERU1_0_IRQHandler>:

void CLAMP_IRQHandler(void){
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	af00      	add	r7, sp, #0

	xSemaphoreGiveFromISR(CLAMP_interruptSemaphore, NULL);
 8006aa8:	4b03      	ldr	r3, [pc, #12]	; (8006ab8 <ERU1_0_IRQHandler+0x14>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4618      	mov	r0, r3
 8006aae:	2100      	movs	r1, #0
 8006ab0:	f7fd f81a 	bl	8003ae8 <xQueueGiveFromISR>
}
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	1fffcbcc 	.word	0x1fffcbcc

08006abc <ERU0_0_IRQHandler>:

void HOLD_IRQHandler(void){
 8006abc:	b580      	push	{r7, lr}
 8006abe:	af00      	add	r7, sp, #0

	xSemaphoreGiveFromISR(HOLD_interruptSemaphore, NULL);
 8006ac0:	4b03      	ldr	r3, [pc, #12]	; (8006ad0 <ERU0_0_IRQHandler+0x14>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	2100      	movs	r1, #0
 8006ac8:	f7fd f80e 	bl	8003ae8 <xQueueGiveFromISR>
}
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	1fffcba4 	.word	0x1fffcba4

08006ad4 <tle94112el_enable>:

static void tle94112el_enable(void)

{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	af00      	add	r7, sp, #0

  DIGITAL_IO_SetOutputHigh(&TLE94112_ENABLE);
 8006ad8:	4801      	ldr	r0, [pc, #4]	; (8006ae0 <tle94112el_enable+0xc>)
 8006ada:	f7ff f9f7 	bl	8005ecc <DIGITAL_IO_SetOutputHigh>

}
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	08006f40 	.word	0x08006f40

08006ae4 <tle94112el_disable>:

static void tle94112el_disable(void)

{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	af00      	add	r7, sp, #0

  DIGITAL_IO_SetOutputLow(&TLE94112_ENABLE);
 8006ae8:	4801      	ldr	r0, [pc, #4]	; (8006af0 <tle94112el_disable+0xc>)
 8006aea:	f7ff f9ff 	bl	8005eec <DIGITAL_IO_SetOutputLow>

}
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	08006f40 	.word	0x08006f40

08006af4 <tle94112el_spi_transfer>:

static int32_t tle94112el_spi_transfer(uint8_t *tx_data, uint8_t *rx_data)

{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]

  XMC_SPI_CH_SetBitOrderLsbFirst(SPI_MASTER_0.channel);
 8006afe:	4b0e      	ldr	r3, [pc, #56]	; (8006b38 <tle94112el_spi_transfer+0x44>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7ff fa14 	bl	8005f30 <XMC_SPI_CH_SetBitOrderLsbFirst>



  DIGITAL_IO_SetOutputLow(&TLE94112_CS);
 8006b08:	480c      	ldr	r0, [pc, #48]	; (8006b3c <tle94112el_spi_transfer+0x48>)
 8006b0a:	f7ff f9ef 	bl	8005eec <DIGITAL_IO_SetOutputLow>



  SPI_MASTER_Transfer(&SPI_MASTER_0, tx_data, rx_data, 2);
 8006b0e:	480a      	ldr	r0, [pc, #40]	; (8006b38 <tle94112el_spi_transfer+0x44>)
 8006b10:	6879      	ldr	r1, [r7, #4]
 8006b12:	683a      	ldr	r2, [r7, #0]
 8006b14:	2302      	movs	r3, #2
 8006b16:	f7fb f8ff 	bl	8001d18 <SPI_MASTER_Transfer>

  while(SPI_MASTER_0.runtime->rx_busy);
 8006b1a:	bf00      	nop
 8006b1c:	4b06      	ldr	r3, [pc, #24]	; (8006b38 <tle94112el_spi_transfer+0x44>)
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	7fdb      	ldrb	r3, [r3, #31]
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d1f9      	bne.n	8006b1c <tle94112el_spi_transfer+0x28>



  DIGITAL_IO_SetOutputHigh(&TLE94112_CS);
 8006b28:	4804      	ldr	r0, [pc, #16]	; (8006b3c <tle94112el_spi_transfer+0x48>)
 8006b2a:	f7ff f9cf 	bl	8005ecc <DIGITAL_IO_SetOutputHigh>

  return 0;
 8006b2e:	2300      	movs	r3, #0

}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3708      	adds	r7, #8
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	1fffc844 	.word	0x1fffc844
 8006b3c:	08006f54 	.word	0x08006f54

08006b40 <__errno>:
 8006b40:	4b01      	ldr	r3, [pc, #4]	; (8006b48 <__errno+0x8>)
 8006b42:	6818      	ldr	r0, [r3, #0]
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop
 8006b48:	1fffc9bc 	.word	0x1fffc9bc

08006b4c <__libc_init_array>:
 8006b4c:	b570      	push	{r4, r5, r6, lr}
 8006b4e:	4b0e      	ldr	r3, [pc, #56]	; (8006b88 <__libc_init_array+0x3c>)
 8006b50:	4c0e      	ldr	r4, [pc, #56]	; (8006b8c <__libc_init_array+0x40>)
 8006b52:	1ae4      	subs	r4, r4, r3
 8006b54:	10a4      	asrs	r4, r4, #2
 8006b56:	2500      	movs	r5, #0
 8006b58:	461e      	mov	r6, r3
 8006b5a:	42a5      	cmp	r5, r4
 8006b5c:	d004      	beq.n	8006b68 <__libc_init_array+0x1c>
 8006b5e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b62:	4798      	blx	r3
 8006b64:	3501      	adds	r5, #1
 8006b66:	e7f8      	b.n	8006b5a <__libc_init_array+0xe>
 8006b68:	f7fa ff02 	bl	8001970 <_init>
 8006b6c:	4c08      	ldr	r4, [pc, #32]	; (8006b90 <__libc_init_array+0x44>)
 8006b6e:	4b09      	ldr	r3, [pc, #36]	; (8006b94 <__libc_init_array+0x48>)
 8006b70:	1ae4      	subs	r4, r4, r3
 8006b72:	10a4      	asrs	r4, r4, #2
 8006b74:	2500      	movs	r5, #0
 8006b76:	461e      	mov	r6, r3
 8006b78:	42a5      	cmp	r5, r4
 8006b7a:	d004      	beq.n	8006b86 <__libc_init_array+0x3a>
 8006b7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b80:	4798      	blx	r3
 8006b82:	3501      	adds	r5, #1
 8006b84:	e7f8      	b.n	8006b78 <__libc_init_array+0x2c>
 8006b86:	bd70      	pop	{r4, r5, r6, pc}
 8006b88:	1fffc9c0 	.word	0x1fffc9c0
 8006b8c:	1fffc9c0 	.word	0x1fffc9c0
 8006b90:	1fffc9c0 	.word	0x1fffc9c0
 8006b94:	1fffc9c0 	.word	0x1fffc9c0

08006b98 <malloc>:
 8006b98:	4b02      	ldr	r3, [pc, #8]	; (8006ba4 <malloc+0xc>)
 8006b9a:	4601      	mov	r1, r0
 8006b9c:	6818      	ldr	r0, [r3, #0]
 8006b9e:	f000 b863 	b.w	8006c68 <_malloc_r>
 8006ba2:	bf00      	nop
 8006ba4:	1fffc9bc 	.word	0x1fffc9bc

08006ba8 <free>:
 8006ba8:	4b02      	ldr	r3, [pc, #8]	; (8006bb4 <free+0xc>)
 8006baa:	4601      	mov	r1, r0
 8006bac:	6818      	ldr	r0, [r3, #0]
 8006bae:	f000 b817 	b.w	8006be0 <_free_r>
 8006bb2:	bf00      	nop
 8006bb4:	1fffc9bc 	.word	0x1fffc9bc

08006bb8 <memcpy>:
 8006bb8:	b510      	push	{r4, lr}
 8006bba:	1e43      	subs	r3, r0, #1
 8006bbc:	440a      	add	r2, r1
 8006bbe:	4291      	cmp	r1, r2
 8006bc0:	d004      	beq.n	8006bcc <memcpy+0x14>
 8006bc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bca:	e7f8      	b.n	8006bbe <memcpy+0x6>
 8006bcc:	bd10      	pop	{r4, pc}

08006bce <memset>:
 8006bce:	4402      	add	r2, r0
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d002      	beq.n	8006bdc <memset+0xe>
 8006bd6:	f803 1b01 	strb.w	r1, [r3], #1
 8006bda:	e7fa      	b.n	8006bd2 <memset+0x4>
 8006bdc:	4770      	bx	lr
	...

08006be0 <_free_r>:
 8006be0:	b530      	push	{r4, r5, lr}
 8006be2:	2900      	cmp	r1, #0
 8006be4:	d03d      	beq.n	8006c62 <_free_r+0x82>
 8006be6:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8006bea:	1f0b      	subs	r3, r1, #4
 8006bec:	491d      	ldr	r1, [pc, #116]	; (8006c64 <_free_r+0x84>)
 8006bee:	2a00      	cmp	r2, #0
 8006bf0:	bfb8      	it	lt
 8006bf2:	189b      	addlt	r3, r3, r2
 8006bf4:	680a      	ldr	r2, [r1, #0]
 8006bf6:	460c      	mov	r4, r1
 8006bf8:	b912      	cbnz	r2, 8006c00 <_free_r+0x20>
 8006bfa:	605a      	str	r2, [r3, #4]
 8006bfc:	600b      	str	r3, [r1, #0]
 8006bfe:	bd30      	pop	{r4, r5, pc}
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d20d      	bcs.n	8006c20 <_free_r+0x40>
 8006c04:	6819      	ldr	r1, [r3, #0]
 8006c06:	1858      	adds	r0, r3, r1
 8006c08:	4290      	cmp	r0, r2
 8006c0a:	bf01      	itttt	eq
 8006c0c:	585a      	ldreq	r2, [r3, r1]
 8006c0e:	1852      	addeq	r2, r2, r1
 8006c10:	601a      	streq	r2, [r3, #0]
 8006c12:	6842      	ldreq	r2, [r0, #4]
 8006c14:	605a      	str	r2, [r3, #4]
 8006c16:	6023      	str	r3, [r4, #0]
 8006c18:	bd30      	pop	{r4, r5, pc}
 8006c1a:	4299      	cmp	r1, r3
 8006c1c:	d803      	bhi.n	8006c26 <_free_r+0x46>
 8006c1e:	460a      	mov	r2, r1
 8006c20:	6851      	ldr	r1, [r2, #4]
 8006c22:	2900      	cmp	r1, #0
 8006c24:	d1f9      	bne.n	8006c1a <_free_r+0x3a>
 8006c26:	6814      	ldr	r4, [r2, #0]
 8006c28:	1915      	adds	r5, r2, r4
 8006c2a:	429d      	cmp	r5, r3
 8006c2c:	d10a      	bne.n	8006c44 <_free_r+0x64>
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4423      	add	r3, r4
 8006c32:	18d0      	adds	r0, r2, r3
 8006c34:	4288      	cmp	r0, r1
 8006c36:	6013      	str	r3, [r2, #0]
 8006c38:	d113      	bne.n	8006c62 <_free_r+0x82>
 8006c3a:	6808      	ldr	r0, [r1, #0]
 8006c3c:	4403      	add	r3, r0
 8006c3e:	6013      	str	r3, [r2, #0]
 8006c40:	684b      	ldr	r3, [r1, #4]
 8006c42:	e00d      	b.n	8006c60 <_free_r+0x80>
 8006c44:	d902      	bls.n	8006c4c <_free_r+0x6c>
 8006c46:	230c      	movs	r3, #12
 8006c48:	6003      	str	r3, [r0, #0]
 8006c4a:	bd30      	pop	{r4, r5, pc}
 8006c4c:	681c      	ldr	r4, [r3, #0]
 8006c4e:	1918      	adds	r0, r3, r4
 8006c50:	4288      	cmp	r0, r1
 8006c52:	bf04      	itt	eq
 8006c54:	6808      	ldreq	r0, [r1, #0]
 8006c56:	6849      	ldreq	r1, [r1, #4]
 8006c58:	6059      	str	r1, [r3, #4]
 8006c5a:	bf04      	itt	eq
 8006c5c:	1900      	addeq	r0, r0, r4
 8006c5e:	6018      	streq	r0, [r3, #0]
 8006c60:	6053      	str	r3, [r2, #4]
 8006c62:	bd30      	pop	{r4, r5, pc}
 8006c64:	1fffcb58 	.word	0x1fffcb58

08006c68 <_malloc_r>:
 8006c68:	b570      	push	{r4, r5, r6, lr}
 8006c6a:	1ccc      	adds	r4, r1, #3
 8006c6c:	f024 0403 	bic.w	r4, r4, #3
 8006c70:	3408      	adds	r4, #8
 8006c72:	2c0c      	cmp	r4, #12
 8006c74:	bf38      	it	cc
 8006c76:	240c      	movcc	r4, #12
 8006c78:	2c00      	cmp	r4, #0
 8006c7a:	4606      	mov	r6, r0
 8006c7c:	da03      	bge.n	8006c86 <_malloc_r+0x1e>
 8006c7e:	230c      	movs	r3, #12
 8006c80:	6033      	str	r3, [r6, #0]
 8006c82:	2000      	movs	r0, #0
 8006c84:	bd70      	pop	{r4, r5, r6, pc}
 8006c86:	428c      	cmp	r4, r1
 8006c88:	d3f9      	bcc.n	8006c7e <_malloc_r+0x16>
 8006c8a:	4a20      	ldr	r2, [pc, #128]	; (8006d0c <_malloc_r+0xa4>)
 8006c8c:	6813      	ldr	r3, [r2, #0]
 8006c8e:	4610      	mov	r0, r2
 8006c90:	4619      	mov	r1, r3
 8006c92:	b1a1      	cbz	r1, 8006cbe <_malloc_r+0x56>
 8006c94:	680a      	ldr	r2, [r1, #0]
 8006c96:	1b12      	subs	r2, r2, r4
 8006c98:	d40e      	bmi.n	8006cb8 <_malloc_r+0x50>
 8006c9a:	2a0b      	cmp	r2, #11
 8006c9c:	d903      	bls.n	8006ca6 <_malloc_r+0x3e>
 8006c9e:	600a      	str	r2, [r1, #0]
 8006ca0:	188b      	adds	r3, r1, r2
 8006ca2:	508c      	str	r4, [r1, r2]
 8006ca4:	e01f      	b.n	8006ce6 <_malloc_r+0x7e>
 8006ca6:	428b      	cmp	r3, r1
 8006ca8:	bf0d      	iteet	eq
 8006caa:	685a      	ldreq	r2, [r3, #4]
 8006cac:	684a      	ldrne	r2, [r1, #4]
 8006cae:	605a      	strne	r2, [r3, #4]
 8006cb0:	6002      	streq	r2, [r0, #0]
 8006cb2:	bf18      	it	ne
 8006cb4:	460b      	movne	r3, r1
 8006cb6:	e016      	b.n	8006ce6 <_malloc_r+0x7e>
 8006cb8:	460b      	mov	r3, r1
 8006cba:	6849      	ldr	r1, [r1, #4]
 8006cbc:	e7e9      	b.n	8006c92 <_malloc_r+0x2a>
 8006cbe:	4d14      	ldr	r5, [pc, #80]	; (8006d10 <_malloc_r+0xa8>)
 8006cc0:	682b      	ldr	r3, [r5, #0]
 8006cc2:	b91b      	cbnz	r3, 8006ccc <_malloc_r+0x64>
 8006cc4:	4630      	mov	r0, r6
 8006cc6:	f000 f825 	bl	8006d14 <_sbrk_r>
 8006cca:	6028      	str	r0, [r5, #0]
 8006ccc:	4630      	mov	r0, r6
 8006cce:	4621      	mov	r1, r4
 8006cd0:	f000 f820 	bl	8006d14 <_sbrk_r>
 8006cd4:	1c42      	adds	r2, r0, #1
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	d0d1      	beq.n	8006c7e <_malloc_r+0x16>
 8006cda:	1cc5      	adds	r5, r0, #3
 8006cdc:	f025 0503 	bic.w	r5, r5, #3
 8006ce0:	4285      	cmp	r5, r0
 8006ce2:	d10a      	bne.n	8006cfa <_malloc_r+0x92>
 8006ce4:	601c      	str	r4, [r3, #0]
 8006ce6:	f103 000b 	add.w	r0, r3, #11
 8006cea:	1d1a      	adds	r2, r3, #4
 8006cec:	f020 0007 	bic.w	r0, r0, #7
 8006cf0:	1a82      	subs	r2, r0, r2
 8006cf2:	d00a      	beq.n	8006d0a <_malloc_r+0xa2>
 8006cf4:	4251      	negs	r1, r2
 8006cf6:	5099      	str	r1, [r3, r2]
 8006cf8:	bd70      	pop	{r4, r5, r6, pc}
 8006cfa:	4630      	mov	r0, r6
 8006cfc:	1ae9      	subs	r1, r5, r3
 8006cfe:	f000 f809 	bl	8006d14 <_sbrk_r>
 8006d02:	3001      	adds	r0, #1
 8006d04:	d0bb      	beq.n	8006c7e <_malloc_r+0x16>
 8006d06:	462b      	mov	r3, r5
 8006d08:	e7ec      	b.n	8006ce4 <_malloc_r+0x7c>
 8006d0a:	bd70      	pop	{r4, r5, r6, pc}
 8006d0c:	1fffcb58 	.word	0x1fffcb58
 8006d10:	1fffcb54 	.word	0x1fffcb54

08006d14 <_sbrk_r>:
 8006d14:	b538      	push	{r3, r4, r5, lr}
 8006d16:	4c06      	ldr	r4, [pc, #24]	; (8006d30 <_sbrk_r+0x1c>)
 8006d18:	2300      	movs	r3, #0
 8006d1a:	4605      	mov	r5, r0
 8006d1c:	4608      	mov	r0, r1
 8006d1e:	6023      	str	r3, [r4, #0]
 8006d20:	f7fa fdf2 	bl	8001908 <_sbrk>
 8006d24:	1c43      	adds	r3, r0, #1
 8006d26:	d102      	bne.n	8006d2e <_sbrk_r+0x1a>
 8006d28:	6823      	ldr	r3, [r4, #0]
 8006d2a:	b103      	cbz	r3, 8006d2e <_sbrk_r+0x1a>
 8006d2c:	602b      	str	r3, [r5, #0]
 8006d2e:	bd38      	pop	{r3, r4, r5, pc}
 8006d30:	1fffcbd8 	.word	0x1fffcbd8

08006d34 <SPI_MASTER_0_MOSI>:
 8006d34:	48028100 00000009                       ...H....

08006d3c <SPI_MASTER_0_MISO>:
 8006d3c:	48028000 00000000                       ...H....

08006d44 <SPI_MASTER_0_SCLKOUT>:
 8006d44:	48028100 00000008                       ...H....

08006d4c <SPI_MASTER_0_SCLKOUT_Config>:
 8006d4c:	000000a0 00000001 00000001 00000000     ................
 8006d5c:	00000000                                ....

08006d60 <SPI_MASTER_0_SS_0>:
 8006d60:	48028000 00000002                       ...H....

08006d68 <SPI_MASTER_0_SS_0_Config>:
 8006d68:	00000090 00000001 00000001 00000000     ................
 8006d78:	00020000                                ....

08006d7c <SPI_MASTER_0_Config>:
 8006d7c:	1fffc814 08002601 08006d34 1fffc800     .....&..4m......
 8006d8c:	08006d3c 1fffc9c4 00000000 00000000     <m..............
	...
 8006da4:	08006d44 08006d4c 08006d60 00000000     Dm..Lm..`m......
	...
 8006dcc:	08006d68 00000000 00000000 00000000     hm..............
	...
 8006df8:	00000404 00000000 01000000 00000102     ................

08006e08 <PWM_CLAMP_compare_config>:
	...
 8006e14:	00000005                                ....

08006e18 <PWM_CLAMP_gpio_out_config>:
 8006e18:	00000098 00010000 00000000              ............

08006e24 <PWM_LIFT_compare_config>:
 8006e24:	00000000 00000005                       ........

08006e2c <PWM_LIFT_gpio_out_config>:
 8006e2c:	00000098 00010000 00000003              ............

08006e38 <PWM_ROTATE_compare_config>:
 8006e38:	00000000 00000005                       ........

08006e40 <PWM_ROTATE_gpio_out_config>:
 8006e40:	00000098 00010000 00000004              ............

08006e4c <CLAMP_INTERRUPT>:
 8006e4c:	40044000 48028100 00000018 00000000     .@.@...H........
	...
 8006e64:	0000010d 02003f05 00010200              .....?......

08006e70 <ROTATE_INTERRUPT>:
 8006e70:	50004800 48028100 00000018 00000000     .H.P...H........
	...
 8006e88:	0000012d 02003f03 00010402              -....?......

08006e94 <DIRECTION_INTERRUPT>:
 8006e94:	50004800 48028100 00000018 00000000     .H.P...H........
	...
 8006eac:	0000013d 03003f04 00010003              =....?......

08006eb8 <HOLD_INTERRUPT>:
 8006eb8:	50004800 48028200 00000008 00000000     .H.P...H........
 8006ec8:	00000000 00000002 00000005 01003f01     .............?..
 8006ed8:	00010300 454c4449 00000000 09632509     ....IDLE.....%c.
 8006ee8:	25097525 75250975 00000a0d 20726d54     %u.%u.%u....Tmr 
 8006ef8:	00637653 51726d54 00000000              Svc.TmrQ....

08006f04 <DIGITAL_IO_0>:
 8006f04:	48028200 00000080 00010000 00000000     ...H............
 8006f14:	00000009                                ....

08006f18 <MOTOR_HIGH>:
 8006f18:	48028200 00000080 00010000 00000000     ...H............
 8006f28:	0000000e                                ....

08006f2c <MOTOR_LOW>:
 8006f2c:	48028200 00000080 00010000 00000000     ...H............
 8006f3c:	0000000f                                ....

08006f40 <TLE94112_ENABLE>:
 8006f40:	48028200 00000080 00000001 00000000     ...H............
 8006f50:	00000006                                ....

08006f54 <TLE94112_CS>:
 8006f54:	48028100 00000080 00000001 00000000     ...H............
 8006f64:	00000007 01040350 00010000 00000000     ....P...........
 8006f74:	00010000 01010101                       ........

08006f7c <DIRECTION_BUS_IO_pin_list>:
 8006f7c:	48028200 00000000 48028200 00000002     ...H.......H....

08006f8c <CLAMP_BUS_IO_pin_list>:
 8006f8c:	48028200 00000004 48028200 00000008     ...H.......H....

08006f9c <LED_BUS_IO_pin_list>:
 8006f9c:	48028000 00000005 48028000 00000003     ...H.......H....
 8006fac:	48028000 00000001 48028000 0000000a     ...H.......H....

08006fbc <TLE94112EL_0>:
 8006fbc:	08006ad5 08006ae5 08006af5 57524f46     .j...j...j..FORW
 8006fcc:	00445241 4b434142 44524157 00000000     ARD.BACKWARD....
 8006fdc:	5446454c 00000000 48474952 00000054     LEFT....RIGHT...
 8006fec:	00005055 4e574f44 00000000 4e45504f     UP..DOWN....OPEN
 8006ffc:	00000000 534f4c43 00000045 444c4f48     ....CLOSE...HOLD
 800700c:	00000000 41544f52 00004554 45524944     ....ROTATE..DIRE
 800701c:	4f495443 0000004e 4d414c43 00000050     CTION...CLAMP...
 800702c:	00000043                                C...
